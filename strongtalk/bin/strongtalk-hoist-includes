#! /usr/bin/env python3

import optparse
import os
import pathlib
import re
import shutil
import sys
import tempfile


# -----------------------------------------------------------------------------

class LineBasedFile( object ):

    def __init__( self, filename, encoding='utf-8', line_ending='\n' ):
        self._filename      = pathlib.Path( filename )
        self._encoding      = encoding
        self._line_ending   = line_ending
        self._lines         = []


    def read( self ):
        with open( self.filename, 'r' ) as stream:
            self._lines = stream.readlines()


    def write( self ):

        kwargs = {}
        kwargs[ 'dir' ] = pathlib.Path( self.filename ).parent
        kwargs[ 'prefix' ] = '.' + pathlib.Path( self.filename ).name + '.'
        kwargs[ 'delete' ] = False
        with tempfile.NamedTemporaryFile( **kwargs ) as temp:
            print( f'tempfile-write: {temp.name}  filename: {self.filename}' )
            for line in self.lines:
                temp.write( line.encode( self._encoding ) )
            shutil.move( temp.name, self.filename )


    @property
    def filename( self ):
        return self._filename.resolve()


    @property
    def lines( self, line_ending='\n' ):
        for line in self._lines:
            yield line.rstrip() + line_ending


# -----------------------------------------------------------------------------

class HeaderFile( LineBasedFile ):

    def rewriteHashIncludes( self, mappings ):

        lines = []

        for line in self.lines:

            match = re.search( '^# ?include "(?P<include_name>.*)"', line )
            if not match:
                lines.append( line )
                continue

            include_name = match.group( 'include_name' )
            if include_name not in mappings:
                print( f'not-in-mappings: filename: {self.filename}  line: {line}' )
                lines.append( line )
                continue

            r = pathlib.Path( mappings[ include_name ] )
            replacement = os.path.sep.join( r.parts[ -2: ] )
            lines.append( f'#include "{replacement}"' )

        self._lines = lines


class CppFile( LineBasedFile ):

    def hoistHashIncludes( self, mappings ):

        lines = []

        for line in self.lines:

            match = re.search( '^# ?include "(?P<include_name>.*)"', line )
            if not match:
                lines.append( line )
                continue

            include_name = match.group( 'include_name' )
            if include_name.endswith( '.incl' ):

                if include_name not in mappings:
                    print( f'not-in-mappings: filename: {self.filename}  line: {line}' )
                    lines.append( line )
                    continue

                inclFile = HeaderFile( mappings[ include_name ] )
                inclFile.read()
                inclFile.rewriteHashIncludes( mappings )
                for line in inclFile.lines:
                    lines.append( line )

            else:
                lines.append( line )

        self._lines = lines


# -----------------------------------------------------------------------------

class FileTree( object ):

    def __init__( self, root ):
        self._root      = pathlib.Path( root )
        self._mappings  = None

    @property
    def root( self ):
        return self._root.resolve()

    def files( self, root=None, suffix=None, relative=False ):

        if root is None:
            root=self.root

        for root, _, files in os.walk( root, topdown=False ):
            for name in files:
                if suffix and not name.endswith( suffix ):
                    continue
                if relative:
                    yield pathlib.Path( name )
                else:
                    yield ( pathlib.Path( root ) / name ).resolve()


class StrongTalkTree( FileTree ):

    @property
    def incl_files( self ):
        for f in self.files( suffix='.incl' ): yield f

    @property
    def hpp_files( self ):
        for f in self.files( suffix='.hpp' ): yield f

    @property
    def cpp_files( self ):
        for f in self.files( suffix='.cpp' ): yield f

    @property
    def mappings( self ):
        if self._mappings is not None:
            return self._mappings
        self._mappings = {}
        self._mappings.update( { p.name: p.resolve() for p in self.cpp_files } )
        self._mappings.update( { p.name: p.resolve() for p in self.hpp_files } )
        self._mappings.update( { p.name: p.resolve() for p in self.incl_files } )
        self._mappings.update( { p.parent.name + os.path.sep + p.name: p.resolve() for p in self.cpp_files } )
        self._mappings.update( { p.parent.name + os.path.sep + p.name: p.resolve() for p in self.hpp_files } )
        self._mappings.update( { p.parent.name + os.path.sep + p.name: p.resolve() for p in self.incl_files } )
        return self._mappings


    def transformCppFiles( self, replace=False ):

        for filename_cpp in self.cpp_files:
            cppFile = CppFile( filename_cpp )
            print( f'{filename_cpp}' )
            cppFile.read()
            cppFile.hoistHashIncludes( self.mappings )
            if replace:
                cppFile.write()


    def dumpMappings( self ):

        for name, resolved in self.mappings.items():
            qualified = os.path.sep.join( pathlib.Path( resolved ).parts[ -2: ] )
            print( f'{name} {resolved} {qualified}' )


# -----------------------------------------------------------------------------

def run( options, args ):

    stt = StrongTalkTree( options.strongtalk_root )

    if options.dump_mappings:
        return stt.dumpMappings()

    if options.transform_cpp_files:
        return stt.transformCppFiles( replace=options.replace )


def main():

    STRONGTALK_ROOT_DEFAULT = 'src/cpp'

    parser = optparse.OptionParser()
    parser.add_option( '--strongtalk-root',     action='store',         default=STRONGTALK_ROOT_DEFAULT )
    parser.add_option( '--dump-mappings',       action='store_true',    default=False )
    parser.add_option( '--transform-cpp-files', action='store_true',    default=True )
    parser.add_option( '--replace',             action='store_true',    default=False )
    options, args = parser.parse_args()

    run( options, args )


if __name__ == '__main__':
    sys.exit( main() )

