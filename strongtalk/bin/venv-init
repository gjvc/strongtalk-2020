#! /usr/bin/env bash

# locus -----------------------------------------------------------------------

set -eu
readonly _DIRNAME=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
readonly _BASENAME=$( basename ${BASH_SOURCE[ 0 ]} )
readonly _ROOT=$( dirname ${_DIRNAME} )
readonly _PREFIX=$( dirname ${_ROOT} )


# execute ---------------------------------------------------------------------

function execute {

    venv_root=${1}
    base_python=${2}
    requirements_txt=${3}

    requirements_txt_versions=${requirements_txt}.versions

    system_python_default=/usr/bin/python2
    system_python=${system_python_default}

    [[ ! -f ${system_python} ]] && { echo "fatal: system python binary [${system_python}] missing -- cannot proceed";  exit 111; }
    system_python_major_version=$( ${system_python} -c 'import sys; print( sys.version_info[ 0 ] )' )
    case ${system_python_major_version} in
        (2) module=virtualenv ;;
        (3) module=venv ;;
        (*) { exit 111; } ;;
    esac

    [[ ! -f ${base_python} ]] && { echo "fatal: base python binary [${base_python}] missing -- cannot proceed";  exit 111; }
    echo ">>> installing venv in [${venv_root}] based on [${base_python}] (using [${system_python}] via [${module}])"
    /bin/rm -rfv ${venv_root}
    ${system_python} -m ${module} \
        --clear \
        --download \
        --no-setuptools \
        --no-wheel \
        --python ${base_python} \
        ${venv_root}

    venv_python=${venv_root}/bin/python
    venv_python_version=$( ${venv_python} --version )
    echo

    echo ">>> upgrading pip in [${venv_root}]"
    venv_pip_version_before=$( ${venv_python} -m pip --version )
    ${venv_python} -m pip install \
        --isolated \
        --no-compile \
        --upgrade \
        pip \
        wheel
    venv_pip_version_after=$( ${venv_python} -m pip --version )
    echo

    echo ">>> installing setuptools in [${venv_root}]"
    ${venv_python} -m pip install \
        --isolated \
        --no-compile \
        --upgrade \
        setuptools
    echo

    if [[ -f ${requirements_txt} ]]; then
        echo ">>> installing packages in [${venv_root}] from [${requirements_txt}]"
        ${venv_python} -m pip install \
            --isolated \
            --no-compile \
            --requirement ${requirements_txt} \
            --upgrade
        echo

        echo ">>> writing package versions from [${venv_root}] to [${requirements_txt_versions}]"
        ${venv_python} -m pip freeze \
            |& tee ${requirements_txt_versions}
        echo

        echo ">>> checking packages installed in [${venv_root}]"
        ${venv_python} -m pip check
        echo
    else
        echo "info: pip requirement file [${requirements_txt}] not found -- nothing to do"
    fi

    echo ">>> getting version of [${venv_python}]"
    ${venv_python} --version
    echo
}


# main -----------------------------------------------------------------------

function main {

    venv_root_default=${_ROOT}/.venv
    venv_root=$( realpath ${1:-${venv_root_default}} )

    base_python_default=$( which "python3" )
    base_python=$( realpath ${2:-${base_python_default}} )

    requirements_txt_default=${_ROOT}/etc/venv/requirements.txt
    requirements_txt=$( realpath ${3:-${requirements_txt_default}} )

    execute ${venv_root} ${base_python} ${requirements_txt}

}

main "${@}"

