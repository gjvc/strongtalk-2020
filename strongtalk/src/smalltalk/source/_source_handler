Class
handlerId!
8436343!
Unclassified!
0Str! !
#categories!
Unclassified! !
#instanceVariableString!
mirror dualHandler indexFile indexDict isNewIndex ! !
hasDualHandler!
8436495!
Unclassified!
0Boolean! !
indexDict!
35432494!
Unclassified!
0Dictionary[Symbol,Cltn[Str]]! !
removeIndex!
8441563!
Unclassified!
0! !
newExtension!
8439953!
Unclassified!
0Str! !
#extensionsAreSubtypes!
true! !
mirror:!
8439816!
Unclassified!
0Mirror:! !
dualHandler!
8435485!
Unclassified!
0Self! !
backupExtension!
8433430!
Unclassified!
0Str! !
metaExtension!
8439546!
Unclassified!
0Str! !
setName:!
8442495!
Unclassified!
0Str:! !
sourceDirectory!
8442741!
Unclassified!
0FilePath! !
#branded!
true! !
storeIndexFile!
35432680!
Unclassified!
0! !
booleanAttributeAt:put:!
8433843!
Unclassified!
0Str:Boolean:! !
indexFile!
8437104!
Unclassified!
0FilePath! !
parseIndexFile!
8440088!
Unclassified!
0! !
dualHandler:!
8435805!
Unclassified!
0:Self! !
indexDict:!
8436939!
Unclassified!
0Dictionary[Symbol,Cltn[Str]]:! !
addSectionToChangeLog:!
8432467!
Unclassified!
0[WriteStream,^Int]:Int! !
indexFileName!
8437925!
Unclassified!
0Str! !
booleanAttributeAt:!
8433567!
Unclassified!
0Str:Boolean! !
mirror!
8439684!
Unclassified!
0Mirror! !
#superclassTypeString!
NotifyingObject mixin |> Object! !
convertFromFilename:!
8434211!
Unclassified!
0Str:Str! !
#group!
reflection! !
#revision!
$Revision: 1.9 $! !
attributeAt:!
8432667!
Unclassified!
0Str:OrdCltn[Str]! !
#classVariableString!
ActiveHandlers ChangeLog <CharWriteStream> RawChangeLog <ExternalReadWriteStream> SourceDirectory InitialChangeLogSize <Int>! !
removeAttributeAt:ifAbsent:!
8441331!
Unclassified!
0Str:[]:Cltn[Str]! !
printOn:!
8441103!
Unclassified!
0Stream:! !
isMeta!
8438231!
Unclassified!
0Boolean! !
isPersistent!
8438770!
Unclassified!
0Boolean! !
uniqueAttributeAt:!
8443527!
Unclassified!
0Str:Str! !
attributeAt:put:!
8432882!
Unclassified!
0Str:OrdCltn[Str]:! !
isNewIndex:!
8438624!
Unclassified!
0Boolean:! !
#subtype!
true! !
convertToFilename:!
8434894!
Unclassified!
0Str:Str! !
#comment!
This class manages the source code database. 
Subclasses are specialized for specific source constructs.
An instance of such a subclass manages the source code for a particular definition. For example,
a MixinSourceHandler handles source code for a partiular mixin.

The database usually resides in the subdirectory 'source' of the strongtalk directory. If you wish to have
it elsewhere, set the environment variable StrongtalkSourceDir.

The database contains an identification file, strongtalksource.id. This file consists of two "chunks"
in file in format. The first chunk is a path, that specifies what binary the source database is
associated with. The second chunk is the size of the file strongtalkchange.log, which contains the
entire source code history of the system from last creation.

The source DB also includes files for every class and metaclass in the system. If the class is named X, then its
instance side is represented in the file X in the source directory, and its class side is represented in the file X.class.

Whenever a change is made to the
source code, several things happen:

0. The binary representation IN MEMORY is modified to match the changed source.
1. If this is a new definition X, then a file X.new is created in the source directory.
2. Otherwise, if this is the first change to this definition  in the current session, then:
a. The original source file for the definition X being modified is backed up as X.bak.
b.  The original source code, in file in format, is appended to the restore log, strongtalkrestore.log.
3. The source file for X is modified accordingly.
4. The change is appended to the change log, strongtalkchange.log.

When the system is saved, the binary on disk is rewritten to reflect the memory image of the program.
All the .bak files are removed, and all the .new files have their .new suffix removed, making the new source 
permanent. In addition, a save comment is written to the change log, and the restore log is deleted. 
Finally, the id file is regenerated: it will now contain the path
of the binary that was used in this session, and the size of the change log just after the save.

Using this information, the system can detect if the change log size is greater than the size listed in the id file. This 
indicates unsaved source changes. The system then generates a warning that the source DB is inconsistent with 
the binary. The user is then asked to resync the two. This is accomplished by:

a. Rolling back the change log to the index
indicated by the id file.  
b. For all files X.bak, remove the file X and then rename X.bak to X.
c. Remove all .new files.

Any lost changes can be filed in from the restore log.

Other than the logs and id file, the source DB consists of files representing the code in individual classes and
metaclasses. These rely heavily on indices into the change log, and are known as index files. Every instance
of a source handler has its own index file. The index files are represented in file in format, using chunks.

For every construct, the appropriate source handler defines a series of attributes. The index file then encodes
these attributes. Some attributes are listed directly in the index file, while others point at an index in the change
log. As a rule, if an attribute needs to be available quickly, it is encoded directly into the index file. For example,
category names and type signatures are needed by browsers that have to display this information, even if
no method bodies are being viewed. Type information is also needed by the type checker. Therefore, this
data is directly available in the index file. On the other hand, method bodies are only needed when a browser
opens a view on a method. In that case, we can afford to look it up in the change log, so the index file contains
only a number, which is a character offser into the change log where the method body can be found.

 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
#abstract!
false! !
initIndexDict!
35432195!
Unclassified!
0Dictionary[Symbol,Cltn[Str]]! !
isNewIndex!
8438376!
Unclassified!
0Boolean! !
makeBackupIndex!
8438926!
Unclassified!
0! !
changeLog!
8434061!
Unclassified!
0FilePath! !
removeIndexFile!
8442174!
Unclassified!
0! !
flush!
8435952!
Unclassified!
0! !
indexFile:!
8437778!
Unclassified!
0FilePath:! !
