Class
predictSpecialPrimitiveNode:!
34249589!
Unclassified!
0:! !
#categories!
Unclassified! !
primitiveCallNode:!
34249801!
Unclassified!
0:! !
primitiveNode:!
34249997!
Unclassified!
0:! !
parameters:matchArguments:!
34248823!
Unclassified!
0::! !
#group!
ast! !
returnInstVarNode:!
34251577!
Unclassified!
0:! !
cascadedSendNode:!
34239763!
Unclassified!
0:! !
codeBodyNode:!
34240388!
Unclassified!
0CodeBody:! !
returnStatNode:!
34251769!
Unclassified!
0:! !
rewriteAsFloatValue:!
34253768!
Unclassified!
0:! !
assignmentNode:!
34238845!
Unclassified!
0:! !
ifNode:!
34242753!
Unclassified!
0:! !
loopNode:!
34244310!
Unclassified!
0:! !
at:error:!
34239284!
Unclassified!
0::! !
if:with:nofArgs:do:!
34242414!
Unclassified!
0::::! !
#extensionsAreSubtypes!
true! !
guaranteedNode:!
34241779!
Unclassified!
0:! !
literalNode:!
34244124!
Unclassified!
0:! !
#branded!
true! !
rewriteSpecialBodies:!
34254839!
Unclassified!
0:! !
globalVarNode:!
34241591!
Unclassified!
0:! !
inlinedBlockNode:!
34242923!
Unclassified!
0:! !
superSendNode:!
34257112!
Unclassified!
0:! !
genericApplicationExpressionNode:!
34241344!
Unclassified!
0:! !
#superclassTypeString!
DeltaASTTool! !
isRemovableBlock:withArgs:!
34243113!
Unclassified!
0::! !
#revision!
$Revision: 1.3 $! !
selfSendNode:!
34256926!
Unclassified!
0:! !
#instanceVariableString!
scope result ! !
refNode:!
34251309!
Unclassified!
0:! !
normalSendNode:!
36204152!
Unclassified!
0:! !
tupleNode:!
34257300!
Unclassified!
0TupleAST:! !
rewriteAsOop:!
34254415!
Unclassified!
0:! !
methodNode:!
34244835!
Unclassified!
0:! !
rewrite:!
34252013!
Unclassified!
0:! !
komment!
34243562!
Unclassified!
0! !
blockNode:!
34239515!
Unclassified!
0:! !
if:with:and:do:!
34241988!
Unclassified!
0::::! !
#subtype!
true! !
xxxnormalSendNode:!
36200486!
Unclassified!
0:! !
messageNode:!
34244488!
Unclassified!
0:! !
#comment!
The rewriter recursively traverses the AST and optimizes
    particular nodes by relacing them with other (more optimal)
    nodes.

    Instance variables:

    result      the result after rewriting the current node. If the node
                      has not changed, result simply holds the current node.

    scope      the current scope. Scope is adjusted whenever a
                      new codeBody is entered.
    
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
#abstract!
false! !
rewrite:asFloatOperationOn:!
34252387!
Unclassified!
0::! !
predictPrimitiveNode:!
34249391!
Unclassified!
0:! !
andOrNode:!
34238665!
Unclassified!
0:! !
dllCallNode:!
34240980!
Unclassified!
0:! !
