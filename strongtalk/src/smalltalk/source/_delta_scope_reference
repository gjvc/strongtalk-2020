Class
isOverrideScope!
2477447!
Unclassified!
0! !
includesKeyLocally:!
2477049!
Unclassified!
0NameType:Boolean! !
#superclassTypeString!
DeltaScope! !
#group!
ast! !
classVarDecls!
2476295!
Unclassified!
0Dict[Symbol,VarDecl]! !
includesIndexLocally:!
2476663!
Unclassified!
0NameType:Boolean! !
#extensionsAreSubtypes!
true! !
#revision!
$Revision: 1.1 $! !
ref!
2477940!
Unclassified!
0! !
removeKey:!
2478528!
Unclassified!
0:! !
at:!
2475461!
Unclassified!
0:! !
#instanceVariableString!
ref accessBlk ! !
remove:!
2478364!
Unclassified!
0:! !
#categories!
Unclassified! !
includesKey:!
2476875!
Unclassified!
0:! !
ref:!
2478066!
Unclassified!
0:! !
removeKey:ifAbsent:!
2478698!
Unclassified!
0::! !
komment!
2477616!
Unclassified!
0! !
varDecls!
2479102!
Unclassified!
0Dict[Symbol,VarDecl]! !
instVarDecls!
2477259!
Unclassified!
0Dict[Symbol,VarDecl]! !
#subtype!
true! !
accessBlk:!
2475314!
Unclassified!
0:! !
#branded!
true! !
#comment!
This scope serves as a symbolic reference to another scope.
It maintains a symbolic reference to the construct whose scope it
represents, and uses that to locate the correct scope dynamically.

 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
#abstract!
false! !
at:put:!
2475905!
Unclassified!
0::! !
accessBlk!
2475176!
Unclassified!
0! !
includesIndex:!
2476485!
Unclassified!
0:! !
referredScope!
2478199!
Unclassified!
0! !
substitute:!
2478896!
Unclassified!
0:! !
at:put:ifThere:!
2476084!
Unclassified!
0:::! !
at:ifAbsent:!
2475716!
Unclassified!
0::! !
