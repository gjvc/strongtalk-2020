Class
receiver!
1288640!
accessing!
0Object! !
#categories!
menus!
control!
indexing!
selection!
event processing!
private!
accessing!
private-initialization! !
inspectIt!
35735990!
control!
0! !
#group!
ui! !
showItBlock!
35797354!
control!
0[]! !
computeValueIfFail:!
1287261!
private!
3[^X def]:Object|X! !
#extensionsAreSubtypes!
true! !
inspectItBlock!
35736587!
control!
0[]! !
smalltalkMenu!
1279136!
menus!
0Menu! !
popUpMenu!
1278975!
menus!
0Menu! !
computeValueIfSuccess:!
35736403!
control!
0[X]:! !
showIt!
35735670!
control!
0! !
linearIndexForGlyph:ifAbsent:!
1282133!
indexing!
0Glyph:[^DoesNotMatter]:Integer! !
sourceSelection:!
1285331!
selection!
0Tuple[Integer,Integer]:! !
linearViewIndexFromSourceIndex:!
6323955!
indexing!
0Integer:Integer! !
fileItIn!
1280844!
control!
0! !
keyDown:focus:event:!
1285769!
event processing!
0Symbol:Visual:UIEvent:Boolean! !
#branded!
true! !
evalBlock!
1288369!
accessing!
0[]! !
receiver:!
1288773!
accessing!
0Object:! !
viewIndexFromSourceIndex:!
1284591!
indexing!
0Integer:Point! !
autoSelectRegionIfNeeded!
1286569!
private!
1! !
spotForGlyph:ifAbsent:!
1284274!
indexing!
0Glyph:[^DoesNotMatter]:Point! !
menuBar!
1278821!
menus!
0Menu! !
#superclassTypeString!
ProgrammingEnvironment mixin |> TextView[CharGlyphs]! !
buildClosureIfFail:!
1286803!
private!
3[^X def]:[]|X! !
#revision!
$Revision: 1.12 $! !
showItMenuFor:text:!
1287913!
private!
1Visual:Str:Menu! !
#instanceVariableString!
receiver <Object>
	"Receiver for expression evaluation (doit). This is nil unless explicitly set, 
		which is fine since in a 'pure' workspace 'self' is thought of as being nil"
evalBlock <[]>
	"Block to be evaluated whenever an expression is evaluated."! !
rows!
1287735!
private!
1SeqCltn[SeqCltn[Glyph]]! !
initialize!
1288928!
private-initialization!
1! !
buildDoItButtonFor:!
5931222!
control!
0Str:! !
buildDoItButton!
1279885!
control!
0! !
#subtype!
true! !
sourceIndexFromViewIndex:!
7342218!
indexing!
0Point:Integer! !
#comment!
A code view is a view  for  Smalltalk code. 

One may create a CodeView using CodeView forText.

This creates a code view whose model is a CharGlyphs (a SeqCltn[CharacterGlyph]).

Such code views convert program text into a sequence of CharacterGlyphs corresponding
to the characters in the source code, which in turn is converted into a view by treating those
glyphs representing carriage return as line breaks. Conversely, a view can be converted
into a model by filtering out all non-character glyphs, and these can be converted back into
program text by extracting the characters they represent.

 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
#abstract!
false! !
buildClosureFor:ifFail:!
5930871!
private!
3Str:[^X def]:[]|X! !
doIt!
1280696!
control!
0! !
sourceSelection!
1285023!
selection!
0Tuple[Integer,Integer]! !
openDefinition!
6435240!
control!
0! !
evalBlock:!
1288500!
accessing!
0[]:! !
