Class
useContinuousScroll!
3083337!
accessing!
0Boolean! !
#categories!
initialization!
accessing!
private!
restricted-win32!
updating!
displaying!
control! !
createVisible!
3086425!
private!
1Boolean! !
handleScrollVertical:wParam:lParam:!
3090954!
restricted-win32!
0Boolean:ExternalData:ExternalData:ExternalData! !
win32Style!
3090607!
private!
1ExternalData! !
#group!
ui! !
computedYShown!
3086124!
private!
1Int! !
#extensionsAreSubtypes!
true! !
xScrollState!
3083879!
accessing!
0ScrollState! !
yScrollBarShown!
3084026!
accessing!
0Boolean! !
localDisplayOn:!
3092872!
displaying!
0Canvas:! !
yScrollState!
3084277!
accessing!
0ScrollState! !
xScrollBarShown!
3083628!
accessing!
0Boolean! !
oldcheckShown!
3086853!
private!
1! !
xScrollState:!
3082234!
initialization!
0ScrollState:! !
hasYScrollState!
3082902!
accessing!
0ScrollState! !
useContinuousScroll:!
3081905!
initialization!
0Boolean:! !
yScrollState:!
3082492!
initialization!
0ScrollState:! !
#branded!
true! !
updateWindowDimensions!
3090271!
private!
1! !
showState!
3087865!
private!
1! !
hasXScrollState!
3082745!
accessing!
0ScrollState! !
hideScrollBar:!
3086559!
private!
1ExternalData:! !
#superclassTypeString!
OverlappingVisual! !
viewport:!
3082072!
initialization!
0Viewport:! !
update:with:!
3092484!
updating!
0Symbol:Object:! !
useContinuousGrid!
3083059!
accessing!
0! !
#revision!
$Revision: 1.4 $! !
#classVariableString!
HScrollbarHeight <Int>
VScrollbarWidth <Int>
		! !
#instanceVariableString!
xScrollState <ScrollState>
			"If nil, then do not show x scrollbar"
yScrollState <ScrollState>
			"If nil, then do not show y scrollbar"
			useContinuousScroll <Boolean>
			"If true, then scroll continuously while the thumb is being tracked"
viewport <Viewport>
			"If this is non-nil, then the part is a viewport, and this is it"
		! !
handleMouseWheelWithWParam:!
5870597!
restricted-win32!
0ExternalData:ExternalData! !
initialize!
3081702!
initialization!
0! !
buildWin32Handle!
3084422!
private!
1! !
scrollMeOrAParentBy:vertical:!
5869827!
control!
0Int:Boolean:! !
#subtype!
true! !
message:for:wParam:lParam:!
5865798!
restricted-win32!
0ExternalData:HWND:ExternalData:ExternalData:ExternalData! !
#comment!
A Scroller displays scrollbars around its optional part.  Because scrolling is accomplished
differently for different applications, scrolling is accomplished indirectly, using instances
of ScrollState, which syncronize the scrolled view (usually a Viewport) with the Scroller.
In other words, the Scroller is very simple: it allocates its part to be the same size as itself,
and simply syncronizes (both ways) the scrollbars with the vertical and horizontal ScrollStates.
It is up to some other dependent of the ScrollState to actually accomplish the scrolling (see
Viewport).

Tags: %User %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.4 
! !
#abstract!
false! !
viewport!
3083493!
accessing!
0Viewport! !
computedXShown!
3085828!
private!
1Int! !
checkShown!
3084980!
private!
1! !
update:forScroller:redraw:!
3088750!
private!
1Symbol:Object:Boolean:! !
showStateFor:!
3088040!
private!
1ExternalData:! !
