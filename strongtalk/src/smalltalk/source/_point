Class
truncateTo:!
4787622!
operations!
0Number:! !
#categories!
accessing!
printing!
comparing!
operations!
testing!
utility!
restricted-double dispatching! !
#group!
base! !
>=!
4785272!
comparing!
0Point:Boolean! !
translatedBy:!
4787478!
operations!
0Point:Point! !
corner:!
4788079!
utility!
0Point:Rect! !
insetRect:!
4788699!
restricted-double dispatching!
0Rect:Rect! !
<=!
4784404!
comparing!
0Point:Boolean! !
#extensionsAreSubtypes!
true! !
*!
4785570!
operations!
0Point:Point! !
+!
4785735!
operations!
0Point:Point! !
-!
4785900!
operations!
0Point:Point! !
#branded!
true! !
/!
4786065!
operations!
0Point:Point! !
asPoint!
4785446!
comparing!
0Point! !
abs!
4786398!
operations!
0Point! !
truncated!
4787802!
operations!
0Point! !
<!
4784233!
comparing!
0Point:Boolean! !
hash!
4783542!
accessing!
0Int! !
>!
4785101!
comparing!
0Point:Boolean! !
#superclassTypeString!
Object! !
max:!
4786682!
operations!
0Point:Point! !
#revision!
$Revision: 1.8 $! !
=!
4784578!
comparing!
0Object:Boolean! !
//!
4786230!
operations!
0Point:Point! !
printOn:!
4784051!
printing!
0CharOutputStream:! !
extent:!
4788246!
utility!
0Point:Rect! !
expandRect:!
4788435!
restricted-double dispatching!
0Rect:Rect! !
floor!
4786537!
operations!
0Point! !
relativeTo:!
4787185!
operations!
0Point:Point! !
#subtype!
true! !
x!
4783772!
accessing!
0Number! !
#comment!
This is the abstract superclass for 2 dimensional points.  Subclasses must implement the #x and #y methods.

%compatibility note:  Coercive operations between points and numbers are not supported in our system.
They are a kludge, don't add significant functionality, obfusticate the number double dispatching code,
and worst of all, lead you down the slippery slope to defining numbers as simply "points on the diagonal"
("Should > be coercive? What about =? Hey, the easiest and most complete way to get this coercive stuff to work
is to define #x and #y in Number to return self, and then mixin Point behavior to Number!! Voila!!" 
Blech.  Try seeing what evaluating 1 = (1@1) gives you in certain other unnamed Smalltalk systems).

Tags: %BlueBook %User %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.8 $
! !
#abstract!
true! !
min:!
4786858!
operations!
0Point:Point! !
negated!
4787034!
operations!
0Point! !
rounded!
4787327!
operations!
0Point! !
isPoint!
4787956!
testing!
0Boolean! !
y!
4783912!
accessing!
0Number! !
