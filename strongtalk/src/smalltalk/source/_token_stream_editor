Class
#categories!
private -accessing!
transforming! !
#extensionsAreSubtypes!
true! !
#superclassTypeString!
Object! !
#group!
ast! !
#subtype!
true! !
tokenTransformer:!
1773521!
private -accessing!
1[Symbol,Object,Str,^Str]:! !
#branded!
true! !
#comment!
I map a string into another, with tokens transformed according to a given transformation.
A token here consists of a symbol, identifying what kind of token we have; an object that is the token's value; and
a read string that is th etoken's string representation in the input.
Specifically, given an input string that can be tokenized (by default using the Strongtalk scanner),
and a block mapping tokens to read strings, I produce an output string. This output string
will have all tokens transformed according to the specification in the block.
Whitespace/comments will be preserved.




 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
#revision!
$Revision: 1.1 $! !
tokenTransformer!
1773332!
private -accessing!
1[Symbol,Object,Str,^Str]! !
transform:ifFail:!
1773709!
transforming!
0Str:[Str,Int,^DoesNotMatter]:Str! !
#instanceVariableString!
tokenTransformer <[Symbol, Object, Str, ^Str]>
 "A block that takes a token symbol, its value and its string representation, and produces a new string"
! !
#abstract!
false! !
