Class
asString!
6303128!
converting!
0String! !
#categories!
accessing!
streaming!
hashing!
converting!
Camp Smalltalk!
Aliens-converting!
comparing! !
#comment!
Writable Strings.

%note: Adjacent byte pairs of indexed byte inst vars hold the unicode value of each character.
At the moment, the high byte of the pair holds the high byte of the character code.

%todo: implement all the basic ops faster (<, at:, size, =, etc).  It would be nice to have a primitive
		that returned a sigma value (-1,0,1) based on the comparison; <,
        equality, & more etc would all be definable using it.

Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
! !
#superclassTypeString!
VarSequenceableCollection[Character] mixin |> UncompressedReadString! !
#group!
base! !
#extensionsAreSubtypes!
true! !
#revision!
$Revision: 1.3 $! !
at:putUnicode:!
925332!
accessing!
0Int:Int:Int! !
sunitAsSymbol!
30869708!
Camp Smalltalk!
0! !
writeStream!
925709!
streaming!
0CharReadWriteStream! !
#subtype!
true! !
asAlien!
35033294!
Aliens-converting!
0! !
#branded!
true! !
sunitSubStrings!
30869996!
Camp Smalltalk!
0! !
#abstract!
false! !
sunitMatch:!
30869846!
Camp Smalltalk!
0:! !
at:put:!
925133!
accessing!
0Int:Character:Character! !
#supportedProtocolString!
VarStr! !
readWriteStream!
6305650!
streaming!
0CharReadWriteStream! !
hash!
925865!
hashing!
0Int! !
