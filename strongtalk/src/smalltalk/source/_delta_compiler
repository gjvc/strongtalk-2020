Class
incomingAsInt:!
4154603!
Unclassified!
0:! !
predictSpecialPrimitiveNode:!
4162659!
Unclassified!
0:! !
#categories!
Unclassified! !
resultOf:onTos:load:!
4164782!
Unclassified!
0:::! !
primitiveCallNode:!
4162902!
Unclassified!
0:! !
floatBinaryOpNode:!
4150647!
Unclassified!
0:! !
floatUnaryOpNode:!
4151966!
Unclassified!
0:! !
resultOf:onTos:!
4164539!
Unclassified!
0::! !
receiverNode:!
4164092!
Unclassified!
0:! !
computeFlags:!
4147915!
Unclassified!
0:! !
returnInstVarNode:!
4165036!
Unclassified!
0:! !
cascadedSendNode:!
4141371!
Unclassified!
0:! !
cascadeTo:!
4141105!
Unclassified!
0:! !
temporaryNode:!
4167454!
Unclassified!
0:! !
floatUnaryOpToOopNode:!
4152275!
Unclassified!
0:! !
assignmentNode:!
4140013!
Unclassified!
0:! !
ifNode:!
4153120!
Unclassified!
0:! !
loopNode:!
4159351!
Unclassified!
0:! !
messageNode:!
4160536!
Unclassified!
0:! !
inlinedBlockNode:!
4156925!
Unclassified!
0:! !
accessViaAssociation:!
4137097!
Unclassified!
0:! !
#group!
ast! !
#extensionsAreSubtypes!
true! !
compileBody:selector:!
4146333!
Unclassified!
0::! !
floatLiteralNode:!
4151368!
Unclassified!
0:! !
literalNode:!
4158912!
Unclassified!
0:! !
copyParameters:!
4148729!
Unclassified!
0:! !
floatifyNode:!
4152607!
Unclassified!
0:! !
globalVarNode:!
4152898!
Unclassified!
0:! !
parameterNode:!
4161970!
Unclassified!
0:! !
floatRefNode:!
4151699!
Unclassified!
0:! !
codeFor:within:useLongJumps:!
4143496!
Unclassified!
0:::! !
classVarNode:!
4141663!
Unclassified!
0:! !
poolVarNode:!
4162169!
Unclassified!
0:! !
superSendNode:!
4167142!
Unclassified!
0:! !
codeFor:lastResultOnTos:!
4141970!
Unclassified!
0::! !
#superclassTypeString!
DeltaASTTool! !
activationVarNode:!
4138129!
Unclassified!
0:! !
compileDoit:!
4147495!
Unclassified!
0:! !
initializeTemporaries:!
4155393!
Unclassified!
0:! !
#revision!
$Revision: 1.4 $! !
selfSendNode:!
4166833!
Unclassified!
0:! !
floatBinaryOpToOopNode:!
4150996!
Unclassified!
0:! !
#instanceVariableString!
result cgen class optimize scope resultOnTos loadVar withinCascade method blocks errorBlock lastEnclosedBlock ! !
refNode:!
4164317!
Unclassified!
0:! !
returnStatNode:!
4165286!
Unclassified!
0:! !
#branded!
true! !
saveExcursion:!
4166429!
Unclassified!
0:! !
methodNode:!
4161370!
Unclassified!
0:! !
initializeClass:optimize:ifError:!
4154981!
Unclassified!
0:::! !
andOrNode:!
4139436!
Unclassified!
0:! !
komment!
4157996!
Unclassified!
0! !
blockNode:!
4140289!
Unclassified!
0:! !
dllCallNode:!
4149660!
Unclassified!
0:! !
#subtype!
true! !
accessViaName:!
4137624!
Unclassified!
0:! !
instVarNode:!
4157292!
Unclassified!
0:! !
#comment!
Compilation of nodes is directed via a few instance variables:

	resultOnTos			indicates that the result of the node should be on tos
	loadVar				indicates that a variable should be loaded (rather than tos stored in that variable)
	withinCascade		indicates that a cascaded send is compiled and that the receivers should be pushed twice
	scope					the current scope
	blocks					the set of blocks found in the method/block currently beeing compiled

	If any of these instance variables are to change for a new node, its old state has to be saved and
	restored after generating the code for that particular node. Saveing and restoring this state is
	performed via the following methods:

	cascadeTo:
	resultOf:onTos:
	resultOf:onTos:load
	codeFor:within:
	compileMethodOrBlock:
	
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
#abstract!
false! !
compile:!
4145903!
Unclassified!
0:! !
predictPrimitiveNode:!
4162415!
Unclassified!
0:! !
normalSendNode:!
4161675!
Unclassified!
0:! !
floatAssignmentNode:!
4150326!
Unclassified!
0:! !
