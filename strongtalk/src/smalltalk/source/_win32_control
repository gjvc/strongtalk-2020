Class
palette:!
8479967!
methods copied from Window!
0Palette:! !
localDisplayOn:!
8473013!
displaying!
0Canvas:! !
win32Style!
8497262!
private!
1ExternalData! !
recursiveRealizePaletteForeground:updateColors:!
8481179!
methods copied from Window!
0Boolean:Boolean:! !
originalWndProc!
8495344!
private!
1HWND! !
display!
8487711!
methods copied from Windows with mods!
0! !
character:focus:event:!
8473183!
event handling!
0Character:Visual:UIEvent:Boolean! !
noPalette!
8479097!
methods copied from Window!
0! !
withDCDo:!
8485930!
methods copied from Window!
0[HDC]:! !
#extensionsAreSubtypes!
true! !
hInstance!
8500204!
restricted-win32!
0ExternalProxy! !
isRectangularAndOpaque!
8499275!
private-testing!
1Boolean! !
paintPending:!
8479657!
methods copied from Window!
0Boolean:! !
detaching!
8487883!
notification!
0! !
sendMessage:wparam:lparam:!
8504316!
restricted-win32!
0ExternalData:ExternalData:ExternalData:ExternalProxy! !
nextPaintTime:!
8478934!
methods copied from Window!
0Float:! !
useDisplayBuffering:!
8484287!
methods copied from Window!
0Boolean:! !
setFocus!
8504640!
restricted-win32!
0! !
keyDown:focus:event:!
8473407!
event handling!
0Symbol:Visual:UIEvent:Boolean! !
enabled:!
8470545!
accessing!
0Boolean:! !
invalidate:!
8494366!
private!
1Region:! !
cursor!
8476767!
methods copied from Window!
0Cursor! !
createNativeWindow!
8491237!
private!
1! !
allocation:at:!
8474266!
geometry-local!
0Region:Point:! !
changing!
8471223!
control!
0! !
enabled!
8470415!
accessing!
0Boolean! !
paintPending!
8479500!
methods copied from Window!
0Boolean! !
withBufferedCanvasDo:!
8484464!
methods copied from Window!
2[Canvas,^X def]:X! !
nativeWindow!
8470951!
accessing!
0Window|Win32Control! !
unregisterControl:!
8483932!
methods copied from Window!
0Win32Control:! !
beforeSetFocus!
8498204!
private-message handling!
1! !
destroyWin32Handle!
8492626!
private!
1! !
redraw!
8471097!
accessing!
0Boolean! !
#revision!
$Revision: 1.6 $! !
drawItemMsg:!
8500023!
restricted-win32!
0DRAWITEMSTRUCT:ExternalData! !
isFocusCandidate!
8499056!
private-testing!
1Boolean! !
originalWndProc:!
8495484!
private!
1HWND:! !
#classVariableString!
Controls <VarDict[Int, Win32Control]>
CustomWndProc <APICallback>
MaxControlId <Int>
			"We assign numbers to controls sequentially (%bug breaks after 1 billion created)"
	! !
queryPaletteMsg:hwnd:wParam:lParam:!
8480724!
methods copied from Window!
0ExternalData:HWND:ExternalData:ExternalData:ExternalData! !
nativePosition!
8495046!
private!
1Point! !
backgroundPainter!
8470198!
accessing!
0Painter! !
isFocus!
8505116!
testing!
0Boolean! !
commandWith:!
8499806!
restricted-win32!
0ExternalData:ExternalData! !
wndProc!
8497598!
private!
1ExternalProxy! !
printAllocOn:!
8472723!
debugging!
0CharOutputStream:! !
registerPaintTime!
8482593!
methods copied from Window!
0! !
extendedWin32Style!
8493659!
private!
1ExternalData! !
buttonColorMsg:!
8499567!
restricted-win32!
0ExternalProxy:ExternalData! !
checkForNativePositionChanging!
8490540!
private!
1Boolean! !
displayUpwardPopUpMenuAt:!
8493175!
private!
1Point:Boolean! !
#comment!
A Visual that has a corresponding native Win32 window.

%optional #commandWith: - should override to process any WM_COMMAND messages needed

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.5 $
! !
showTimes!
8483717!
methods copied from Window!
0Boolean! !
checkPaintTime:!
8476221!
methods copied from Window!
0Float:! !
release!
8472204!
control!
0! !
nextPaintTime!
8478778!
methods copied from Window!
0Float! !
notificationMsg:!
8503778!
restricted-win32!
0ExternalData:! !
cursor:!
8476910!
methods copied from Window!
0Cursor:! !
useDisplayBuffering!
8484116!
methods copied from Window!
0Boolean! !
wndProc:!
8497759!
private!
1ExternalProxy:! !
createVisible!
8491940!
private!
1Boolean! !
hasWin32Handle!
8494221!
private!
1Boolean! !
keyUp:focus:event:!
8473628!
event handling!
0Symbol:Visual:UIEvent:Boolean! !
#group!
ui! !
setWindowText:!
8496446!
private!
1Str:! !
mouseEvent:at:event:!
8473847!
event handling!
0Symbol:Point:UIEvent:Boolean! !
localFromGlobalPosition:!
8478292!
methods copied from Window!
0WinPOINT:WinPOINT! !
refreshInterval:!
8482150!
methods copied from Window!
0Float:! !
paintOccuring!
8479241!
methods copied from Window!
0! !
setCursor!
8482924!
methods copied from Window!
0ExternalData! !
#categories!
notification!
private!
restricted-win32!
displaying!
geometry-local!
accessing!
initialization!
control!
private-testing!
private-message handling!
testing!
event handling!
geometry-nonlocal!
methods copied from Window!
methods copied from Windows with mods!
debugging!
restricted-to session! !
_visible:!
8472389!
control!
0Boolean:! !
canBeFocusCandidate!
8490278!
private!
1Boolean! !
cleanUp!
8490865!
private!
1! !
contextMenuMsg:hwnd:wParam:lParam:!
8498727!
private-message handling!
1ExternalData:HWND:ExternalData:ExternalData:Boolean! !
withCanvasDo:!
8485605!
methods copied from Window!
2[Canvas,^X def]:X! !
ignoreNextFocusSet:!
8472042!
control!
0Boolean:! !
paletteChangedMsg:hwnd:wParam:lParam:!
8480191!
methods copied from Window!
0ExternalData:HWND:ExternalData:ExternalData:ExternalData! !
moveBy:!
8475486!
geometry-nonlocal!
0Point:! !
palette!
8479820!
methods copied from Window!
0Palette! !
measureItemMsg:!
8500376!
restricted-win32!
0MEASUREITEMSTRUCT:ExternalData! !
withDirectCanvasDo:!
8486279!
methods copied from Window!
2[Canvas,^X def]:X! !
handleMouseEvent:at:!
8477651!
methods copied from Window!
0Symbol:Point:Boolean! !
callOrigWndProc:wParam:lParam:!
8488651!
private!
1ExternalData:ExternalData:ExternalData:ExternalData! !
setCursorMsg:hwnd:wParam:lParam:!
8483188!
methods copied from Window!
0ExternalData:HWND:ExternalData:ExternalData:ExternalData! !
updateWindowDimensions!
8496713!
private!
1! !
controlId!
8491109!
private!
1Int! !
controls!
8476602!
methods copied from Window!
0Extensible[Win32Control]! !
blinkFocus:!
8499429!
restricted-to session!
0Boolean:! !
callOrigWndProcFor:!
8489257!
private!
1MSG:ExternalData! !
beforeKillFocus!
8497947!
private-message handling!
1! !
redraw:!
8495630!
private!
1Boolean:! !
handleMouseEvent:message:wParam:lParam:!
8493822!
private!
1Symbol:ExternalData:ExternalData:ExternalData:! !
win32Handle!
8504922!
restricted-win32!
0HWND! !
#branded!
true! !
#superclassTypeString!
InstanceCritical |> (ClassCritical |> Visual)! !
registerControl:!
8482415!
methods copied from Window!
0Win32Control:! !
deferringRedrawDo:!
8471437!
control!
0[^Object]:! !
callOrigWndProcFor:withLParam:!
8489715!
private!
1MSG:ExternalData:ExternalData! !
refreshInterval!
8481989!
methods copied from Window!
0Float! !
globalFromLocalPosition:!
8477216!
methods copied from Window!
0WinPOINT:WinPOINT! !
#instanceVariableString!
win32Handle <HWND>
controlId <Int>
originalWndProc <HWND>
			"The windows procedure that we overrode using so-called Windows subclassing"
enabled <Boolean>
			"Indicates whether the control is enabled/disabled"
redraw <Boolean>
			"If false, then redrawing is disabled"
backgroundPainter <Painter>
isFocus <Boolean>
ignoreNextFocusSet <Boolean>
			"if this is true, the we have asked to acquire or release the win32 focus,
				in which case the set/killFocus message is ignored, since
				any processing has already been done.  This must be
				done since if something we contain is getting the
				input focus, we set the containing native window
				to be the focus even though it is not the actual
				visual that has the focus."

refreshInterval <Float>
			"Time in seconds for the maximum time between refreshes."
nextPaintTime <Float>
			"If not nil, then if any paint is needed, it should occur
				no later than this time"
paintPending <Boolean>
useDisplayBuffering <Boolean>
			"If true, use double buffering for flicker free display"
nativePosition <Point>
			"Position of native window in containing native window"
controls <Extensible[Win32Control]>
palette <Palette>
cursor <Cursor>
		! !
initialize!
8475770!
initialization!
0! !
buildWin32Handle!
8488506!
private!
1! !
nativePositionChanged!
8488192!
notification!
0! !
setEnabled:!
8496142!
private!
1Boolean:! !
fullyEnabled!
8470730!
accessing!
0Boolean! !
#subtype!
true! !
isFocus:!
8488030!
notification!
0Boolean:! !
message:for:wParam:lParam:!
8500563!
restricted-win32!
0ExternalData:HWND:ExternalData:ExternalData:ExternalData! !
defaultRefreshInterval!
8477060!
methods copied from Window!
0Float! !
#abstract!
false! !
debugTest:for:!
8492232!
private!
1ExternalData:ExternalData:! !
customWndProc!
8492071!
private!
1APICallback! !
