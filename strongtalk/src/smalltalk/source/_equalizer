Class
#categories!
private!
private-initialization!
accessing!
wrapping!
control!
preferences! !
flushPrefs!
1010761!
private!
1! !
computePreferences!
1009898!
private!
1! !
prefsUpToDate!
1011075!
private!
1Boolean! !
for:!
1013966!
wrapping!
0Visual:EqualizerWrapper! !
#group!
ui! !
setPrefsFor:!
1011218!
private!
1PreferenceModifier:! !
#extensionsAreSubtypes!
true! !
#revision!
$Revision: 1.1 $! !
setYPrefsFor:!
1012269!
private!
1PreferenceModifier:! !
max!
1015032!
preferences!
0Rect! !
remove:!
1014461!
wrapping!
0EqualizerWrapper:! !
initialize!
1012871!
private-initialization!
1! !
#superclassTypeString!
UI! !
natural!
1015334!
preferences!
0Rect! !
rigid:!
1013226!
accessing!
0Boolean:! !
yEqualize!
1013672!
accessing!
0Boolean! !
#subtype!
true! !
xEqualize!
1013377!
accessing!
0Boolean! !
modifiers!
1010920!
private!
1Extensible[EqualizerWrapper]! !
setXPrefsFor:!
1011682!
private!
1PreferenceModifier:! !
#branded!
true! !
#comment!
An Equalizer is used to force a set of visuals to have the same preferences
in one or both dimensions.  To use, an equalizer is created, and then used to
generate wrappers for the set of visuals, which take care of the rest.

Tags: %User %UI

(c) 1996-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.1 $
! !
#abstract!
false! !
#instanceVariableString!
modifiers <Extensible[EqualizerWrapper]>
xEqualize <Boolean>
yEqualize <Boolean>
rigid <Boolean>
		"If this is true, then the min and max are forced to be the same as the natural"
natural <Rect>
min <Rect>
max <Rect>
	! !
xEqualize:!
1013513!
accessing!
0Boolean:! !
changing!
1014767!
control!
0! !
ensurePrefsUpToDate!
1010580!
private!
1! !
min!
1015183!
preferences!
0Rect! !
rigid!
1013098!
accessing!
0Boolean! !
yEqualize:!
1013808!
accessing!
0Boolean:! !
