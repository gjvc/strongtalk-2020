Delta define: #Win32Control as: (
(Class subclassOf: 'InstanceCritical |> (ClassCritical |> Visual)' instanceVariables: 'win32Handle <HWND>
controlId <Int>
originalWndProc <HWND>
			"The windows procedure that we overrode using so-called Windows subclassing"
enabled <Boolean>
			"Indicates whether the control is enabled/disabled"
redraw <Boolean>
			"If false, then redrawing is disabled"
backgroundPainter <Painter>
isFocus <Boolean>
ignoreNextFocusSet <Boolean>
			"if this is true, the we have asked to acquire or release the win32 focus,
				in which case the set/killFocus message is ignored, since
				any processing has already been done.  This must be
				done since if something we contain is getting the
				input focus, we set the containing native window
				to be the focus even though it is not the actual
				visual that has the focus."

refreshInterval <Float>
			"Time in seconds for the maximum time between refreshes."
nextPaintTime <Float>
			"If not nil, then if any paint is needed, it should occur
				no later than this time"
paintPending <Boolean>
useDisplayBuffering <Boolean>
			"If true, use double buffering for flicker free display"
nativePosition <Point>
			"Position of native window in containing native window"
controls <Extensible[Win32Control]>
palette <Palette>
cursor <Cursor>
		') classVariables: 'Controls <VarDict[Int, Win32Control]>
CustomWndProc <APICallback>
MaxControlId <Int>
			"We assign numbers to controls sequentially (%bug breaks after 1 billion created)"
	') !

(Delta mirrorFor: #Win32Control) revision: '$Revision: 1.6 $'!

(Delta mirrorFor: #Win32Control) group: 'ui'!

(Delta mirrorFor: #Win32Control)
comment: 
'A Visual that has a corresponding native Win32 window.

%optional #commandWith: - should override to process any WM_COMMAND messages needed

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.5 $
'!

! (Delta mirrorFor: #Win32Control) classSide methodsFor: 'private' !


controlForHandle: hwnd <ExternalProxy> ifAbsent: b <[^X def]> ^<Win32Control | X>

	^self controlFor: (self controlIdFor: hwnd) ifAbsent: b!

controls ^<VarDict[Int, Win32Control]>

	"Assumption: allers must be in a critical region for self"

	Controls isNil
		ifTrue: [ Controls := Dictionary[Int, Win32Control] new ].
	^Controls!

dispatchMsgFor: hwnd <ExternalProxy>
msg: msg <SmallInteger>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	^(self controlForHandle: hwnd ifAbsent: [ ^0 ])
		message: msg for: hwnd wParam: wParam lParam: lParam! !

! (Delta mirrorFor: #Win32Control) classSide methodsFor: 'restricted' !


assignId ^<Int>
	"Assign and return a unique control id number.  It is assumed that we are already in a
		critical region on the Win32Control."

	MaxControlId isNil
				ifTrue: [ MaxControlId := 1 ]
				ifFalse: [ MaxControlId := MaxControlId + 1].
	^MaxControlId!

buttonColorMsg: hdc <ExternalProxy> for: control <Int> ^<ExternalData>

	^(self controlFor: control  ifAbsent: [ ^0 ]) buttonColorMsg: hdc!

controlFor: id <Int> ifAbsent: b <[^X def]> ^<Win32Control | X>

	^Win32Control
		critical: [	self controls at: id ifAbsent: b ]!

controlIdFor: hwnd <HWND> ^<Int>

	^{{<user ExternalProxy GetWindowLongA> hwnd: hwnd value: Win32 GWL_ID}} asSmallInteger.
!

customWndProc ^<APICallback>

	"Don't need a critical region"
	CustomWndProc isNil
		ifTrue: [	CustomWndProc := APICallBack
							register:
								[ :hwnd <ExternalProxy> :msg <SmallInteger> :wParam <ExternalData> :lParam <ExternalData> |
									self dispatchMsgFor: hwnd msg: msg wParam: wParam lParam: lParam ]
							parameters: (OrderedCollection[Class]
								with: ExternalProxy with: SmallInteger with: ExternalProxy with: ExternalProxy).	].
	^CustomWndProc!

drawItemMsg: data <DRAWITEMSTRUCT> for: control <Int> ^<ExternalData>

	^(self controlFor: control ifAbsent: [ ^0 ]) drawItemMsg: data!

measureItemMsg: data <MEASUREITEMSTRUCT> for: control <Int> ^<ExternalData>

	^(self controlFor: control ifAbsent: [ ^0 ]) measureItemMsg: data!

notificationMsg: notifyCode <ExternalData> for: control <Int>

	(self controlFor: control ifAbsent: [ ^0 ]) notificationMsg: notifyCode!

registerControl: id <Int> for: inst <Win32Control>

	Win32Control critical: 
		[ self controls at: id put: inst	]!

unregisterControl: id <Int>

	Win32Control critical: [ self controls removeKey: id ]! !

! (Delta mirrorFor: #Win32Control) classSide methodsFor: 'testing' !


debugEvents ^<Boolean>

	^Session debugEvents!

debugNotifications ^<Boolean>

	^false! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'accessing' !


backgroundPainter ^<Painter>

	backgroundPainter isNil
		ifTrue: [ ^super backgroundPainter ].
	^backgroundPainter!

enabled ^<Boolean>

	^enabled!

enabled: flag <Boolean>

	self enabled = flag
		ifFalse: [	self setEnabled: flag ].!

fullyEnabled ^<Boolean>

	"is true if we are enabled and all parents are enabled"
	^self enabled and: [ super enabled ]!

nativeWindow ^<Window | Win32Control>

	^self!

redraw ^<Boolean>

	^redraw! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'control' !


changing

	"flush the cached background painter so that it updates"
	backgroundPainter := nil.
	
	super changing!

deferringRedrawDo: blk <[^Object]>
	"defer redrawing during evaluation of blk.  If these calls are nested recursively,
	   redrawing is deferred until the outermost returns, at which point the entire control
	   is invalidated.  This can be used to surround a large number of changes to the receiver
	   that would otherwise cause redundant redrawing."

	| oldFlag <Boolean> |
	oldFlag := self redraw.
	self redraw: false.
	blk value.
	self redraw: oldFlag.
	oldFlag
		ifTrue: [ self invalidate ]!

ignoreNextFocusSet: flag <Boolean>

	ignoreNextFocusSet := flag!

release

	self hasWin32Handle
		ifTrue: [ self destroyWin32Handle ].
	super release.!

_visible: flag <Boolean>

	| data <ExternalData> |
	self assert: [ self hasWin32Handle ].

	data := flag ifTrue: [ Win32 SW_SHOW ] ifFalse: [ Win32 SW_HIDE ].
	{{<user ExternalProxy ShowWindow> hwnd: self win32Handle flag: data}}.! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'debugging' !


printAllocOn: strm <CharOutputStream>

	super printAllocOn: strm.
	self hasWin32Handle
		ifTrue: [	strm show: ' hwnd: '; print: self win32Handle ]
		ifFalse: [ strm show: ' (no hwnd)' ]! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'displaying' !


localDisplayOn: can <Canvas>

	can subwindowsToDisplay add: self! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'event handling' !


character: c <Character> focus: focus <Visual> event: ev <UIEvent> ^<Boolean>

	^(self callOrigWndProcFor: ev msg) = 0!

keyDown: key <Symbol> focus: focus <Visual> event: ev <UIEvent> ^<Boolean>

	^(self callOrigWndProcFor: ev msg) = 0!

keyUp: key <Symbol> focus: focus <Visual> event: ev <UIEvent> ^<Boolean>

	^(self callOrigWndProcFor: ev msg) = 0!

mouseEvent: type <Symbol> at: loc <Point> event: ev <UIEvent> ^<Boolean>

	| orig <Point> |

	"Translate location back into native window coordinates"
	orig := self allocation enclosingRect origin.
	^(self callOrigWndProcFor: ev msg withLParam: (ExternalProxy forHigh: loc y - orig y low: loc x - orig x)) = 0! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'geometry-local' !


allocation: r <Region> at: pos <Point>

	| oldAlloc <Region> alloc <Rect> oldLayoutStatus <Int> |
	oldLayoutStatus := self layoutStatus.
	oldAlloc := allocation.
	alloc := r enclosingRect.
	super allocation: r at: pos.

	oldAlloc isNil
		ifTrue: [ self win32Handle.		"Make sure window is created with the current allocation & position" ]
		ifFalse: [	| oldNativePos <Point> old <Rect> | 
						"We need to use a variable since pos...Window changes nativePos"
						old := oldAlloc enclosingRect.
						oldNativePos := nativePosition.
						self hasWin32Handle
							ifTrue: [	(old width ~= alloc width
													or: [ old height ~= alloc height
													or: [ oldNativePos ~= self nativePosition ]  ] )
												ifTrue: [  self updateWindowDimensions  ]	 ]
							ifFalse: [	self isAttached
												ifTrue: [ self win32Handle ]	] ].
	"Invalidate if we are relaying out as a %hack to solve the problems that a higher level
		relayoutAndInvalidate doesn't invalidate contained native windows like this one"
	oldLayoutStatus = Visual needsRelayout
		ifTrue: [ self invalidate ]! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'geometry-nonlocal' !


moveBy: positionDelta <Point>

	"We override this since moving a native visual will generate any needed invalidations
	  automatically."

	self adjustPositionBy: positionDelta! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'initialization' !


initialize

	super initialize.
	redraw := true.
	enabled := true.
	isFocus := false.
	self addNonLocalCount: 1.		"Receiver is non-local"
	ignoreNextFocusSet := false.

	self refreshInterval: self defaultRefreshInterval.
	self paintPending: false.
	self useDisplayBuffering: true.
	controls := IdentitySet[Win32Control] new.! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'methods copied from Window' !


checkPaintTime: t <Float>
	"If we have reached our refresh time, paint"

	(self hasWin32Handle and: [ self paintPending ])
		ifTrue: [ self nextPaintTime <= t
						ifTrue: [ self display ]
						ifFalse: [ self session needPaintAtTime: self nextPaintTime ]	 ]!

controls ^<Extensible[Win32Control]>

	^controls!

cursor ^<Cursor>

	^cursor!

cursor: c <Cursor>

	cursor := c.!

defaultRefreshInterval ^<Float>

	^0.25!

globalFromLocalPosition: p <WinPOINT> ^<WinPOINT>

	| wp <WinPOINT> result <WinPOINT> |
	wp := WinPOINT new allocate.
	wp x: p x; y: p y.
	{{<user ExternalProxy ClientToScreen>
			handle: self win32Handle
			point: wp
	}} asBoolean
		ifFalse: [ Win32 handleError ].
	result := wp x @ wp y.
	wp free.
	^result!

handleMouseEvent: type <Symbol> at: loc <Point> ^<Boolean>

	| ev <UIEvent> |

	"%todo: remove the dispatch block for all events; isn't needed anymore"
	ev := UIEvent
			forMsg: self session currentMsg
			dispatch:
				[ :e <UIEvent> :h <UIEventHandler> |
					h mouseEvent: type at: loc event: e ].
	Sampler notNil
		ifTrue: [ Sampler 
						in: self topWindow visual 
						sampleEvent: type 
						at: (loc translatedBy: self positionInTopWindow)
						event: ev ].
	^self mouseEvent: type at: loc event: ev!

localFromGlobalPosition: p <WinPOINT> ^<WinPOINT>

	| wp <WinPOINT> result <WinPOINT> |
	wp := WinPOINT new allocate.
	wp x: p x; y: p y.
	{{<user ExternalProxy ScreenToClient>
			handle: self win32Handle
			point: wp
	}} asBoolean
		ifFalse: [ Win32 handleError ].
	result := wp x @ wp y.
	wp free.
	^result translatedBy: self allocation enclosingRect origin!

nextPaintTime ^<Float>

	^nextPaintTime!

nextPaintTime: t <Float>

	nextPaintTime := t!

noPalette

	palette := nil!

paintOccuring

	self nextPaintTime: Time clockValue + self refreshInterval.
	self paintPending: false.
	self session paintOccuredFor: self.!

paintPending ^<Boolean>

	^paintPending!

paintPending: b <Boolean>

	paintPending := b!

palette ^<Palette>

	^palette!

palette: p <Palette>

	p == palette
		ifTrue: [ ^self ].
	self assert: [ palette isNil ].
	palette := p!

paletteChangedMsg: msg <ExternalData>
hwnd: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	wParam @= self win32Handle
		ifFalse: [ self recursiveRealizePaletteForeground: false updateColors: true.
						self palette isNil
							ifTrue: [ ^self callDefWndProcFor: hwnd
											msgCode: msg
											wParam: wParam
											lParam: lParam	].
					 ].
	^0!

queryPaletteMsg: msg <ExternalData>
hwnd: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	self recursiveRealizePaletteForeground: true updateColors: false.
	self palette isNil
		ifTrue: [ ^self callDefWndProcFor: hwnd
						msgCode: msg
						wParam: wParam
						lParam: lParam	].
	^0!

recursiveRealizePaletteForeground: fore <Boolean> updateColors: update <Boolean>

	self palette isNil
		ifFalse: [	self withDCDo:
							[ :hdc <HDC> |
								| oldpal <Win32Handle> |
								oldpal := Palette select: self palette win32Handle into: hdc background: fore not.
								self palette unrealize.
								self palette realizeFor: hdc.
								Palette debugging
									ifTrue: [ Platform errorStream show: '(Restoring old palette)'.	].
								Palette select: oldpal win32Handle into: hdc background: fore not.
							 ].
						self invalidate.
						].
	self controls do:
		[ :c <Win32Control> |
			c recursiveRealizePaletteForeground: fore updateColors: update ].!

refreshInterval ^<Float>

	^refreshInterval!

refreshInterval: d <Float>
	"Wait no longer than this amount of time (in seconds) between
		paint operations, if possible"

	refreshInterval := d!

registerControl: c <Win32Control>

	self controls include: c!

registerPaintTime

	self paintPending
		ifFalse: [	self paintPending: true.
						self nextPaintTime: Time clockValue + self refreshInterval.
						self session schedulePaintFor: self at: self nextPaintTime.	].!

setCursor ^<ExternalData>

	^cursor isNil
		ifFalse: [	{{<user ExternalProxy SetCursor> handle: cursor win32Handle}}.
						1 ]
		ifTrue: [ 0 ]!

setCursorMsg: msg <ExternalData>
hwnd: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	^(cursor notNil
			and: [	| hitcode <Int> |
						hitcode := lParam asExternalProxy low.
						hitcode = 1 or: [ hitcode = 65534 ] "client area or disabled"  ])
		ifTrue: [ 	self setCursor.
						1 ]
		ifFalse: [ self callOrigWndProc: msg wParam: wParam lParam: lParam ]
!

showTimes ^<Boolean>
	"Report preference, layout, and painting times on the transcript"

	^false!

unregisterControl: c <Win32Control>

	self controls removeEvery: c!

useDisplayBuffering ^<Boolean>

	^useDisplayBuffering!

useDisplayBuffering: f <Boolean>

	useDisplayBuffering := f!

withBufferedCanvasDo: drawing <[Canvas,^X def]> ^<X>

	^self withDirectCanvasDo:
		[ :directCanvas <Canvas> |
			| invalid <Rect> oldpal <Win32Handle> |
			invalid := directCanvas clippingRect.

			self session
				withBufferCanvasFor: invalid
				do: [ :bufferCanvas <Canvas> :buffer <HBITMAP> |
							self palette isNil
								ifFalse: [ oldpal := bufferCanvas win32Palette: self palette win32Handle ].

							"draw on the buffer canvas"
							drawing value: bufferCanvas.
							bufferCanvas shallowFlush.

							"Now, copy the buffer bits onto the screen"
							directCanvas atOffset: invalid origin
								do: [ bufferCanvas atOffset: invalid origin 
									do: [	directCanvas
													bitBlt: bufferCanvas
												extent: invalid extent
												op: UI ropCopy.		].	].
							oldpal notNil
								ifTrue: [ 	Palette debugging
													ifTrue: [ Platform errorStream show: '(Restoring old palette)'.	].
												bufferCanvas win32Palette: oldpal ]. 
						].	
		]!

withCanvasDo: drawing <[Canvas,^X def]> ^<X>

	^(self useDisplayBuffering and: [ Window bufferingPossible ])
		ifFalse: [	self withDirectCanvasDo: drawing ]
		ifTrue: [	self withBufferedCanvasDo: drawing ]!

withDCDo: blk <[HDC]>
	"With the window's device context do the block (not for painting)"

	| hdc <HDC> |
	hdc := {{<user HDC GetDC> hwnd: self win32Handle}}.
	[ blk value: hdc ]
		ensure: [ hdc releaseDCFor: self win32Handle ]!

withDirectCanvasDo: drawing <[Canvas,^X def]> ^<X>

	|	can <Canvas>
		ps <PAINTSTRUCT>
		paintBlk <[^Object]>
		result <X>
		oldpal <Win32Handle>  |

	"use a critical region to paint, since background painting might reuse the
	  same device context in the UI thread"
	^self critical:
		[	ps := PAINTSTRUCT new allocateZeroed.
			can := self beginPaint: self win32Handle paintStructure: ps.
			can isNull
				ifTrue: [ Win32 handleError ].
			can	initialize;
				toRelease: [ :dc <HDC> | "End paint will release the context" ];
				initClippingRectBeforeTranslation: ps rcPaint asRectangle;
				window: self.
			self palette isNil
				ifFalse: [ oldpal := can win32Palette: self palette win32Handle ].

			Session debugInvalidation
				ifTrue: [	can withPainter: (Painter new paint: Paint red)
									do: [ can displayFilledRectangle: ps rcPaint asRectangle; flush. ].
								Platform errorStream show: self class name, ' rendering: '; print: ps rcPaint asRectangle; cr.	].

			result := drawing value: can.
			oldpal notNil
				ifTrue: [ 	Palette debugging
									ifTrue: [ Platform errorStream show: '(Restoring old palette)'.	].
								can win32Palette: oldpal ]. 
			can release. 

			self endPaint: self win32Handle paintStructure: ps.
			ps free.
			result	]! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'methods copied from Windows with mods' !


display

	"win32 controls do no Smalltalk level painting by default"! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'notification' !


detaching

	super detaching.
	self cleanUp!

isFocus: f <Boolean>

	isFocus := f.
	super isFocus: f.
!

nativePositionChanged

	"DON'T pass this message to super, since our children are native relative to us!!"

	(self checkForNativePositionChanging or: [ self isAttached ])
		ifTrue: [ self updateWindowDimensions ]! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'private' !


buildWin32Handle

	self subclassResponsibility!

callOrigWndProc: msgCode <ExternalData> wParam: wParam <ExternalData> lParam: lParam <ExternalData>^<ExternalData>
	"Like callOrigWndProcFor:, but takes all args rather than using a MSG structure"

	"Note that we use the receiver's win32Handle below rather than the one in the message so
	 	 this works even when the event was generated during a grab"
	^{{<user ExternalProxy CallWindowProcA> 
		proc: self originalWndProc
		hwnd: self win32Handle
		msg: msgCode
		wparam: wParam
		lparam: lParam }}!

callOrigWndProcFor: m <MSG> ^<ExternalData>

	"Note that we use the receiver's win32Handle below rather than the one in the message so
	 	 this works even when the event was generated during a grab"
	^{{<user ExternalProxy CallWindowProcA> 
		proc: self originalWndProc
		hwnd: self win32Handle
		msg: m message
		wparam: m wParam
		lparam: m lParam }}!

callOrigWndProcFor: m <MSG> withLParam: lParam <ExternalData>^<ExternalData>
	"Like callOrigWndProcFor:, but overrides the lParam value from the msg"

	"Note that we use the receiver's win32Handle below rather than the one in the message so
	 	 this works even when the event was generated during a grab"
	^{{<user ExternalProxy CallWindowProcA> 
		proc: self originalWndProc
		hwnd: self win32Handle
		msg: m message
		wparam: m wParam
		lparam: lParam }}!

canBeFocusCandidate ^<Boolean>
	"%optional: Subclasses that cannot be the input focus even when they are enabled should override this
	  to return false"

	^true!

checkForNativePositionChanging ^<Boolean>
	"returns true if the native position has been changed"

	
	^self hasWin32Handle
			and: [	| oldpos <Point> |
						oldpos := nativePosition.
						oldpos ~= self nativePosition	]!

cleanUp

	self isFocus
		ifTrue: [	self nativeWindow ignoreNextFocusSet: true.
						self session noInputFocus. ].
	self destroyWin32Handle.
!

controlId ^<Int>

	^controlId!

createNativeWindow

	"we need a critical region to protect the class variable:"
	Win32Control
		critical: [	controlId := self actualClass assignId.
							self actualClass registerControl: self controlId for: self.
							self paintPending: false.
							self buildWin32Handle.
							self palette notNil
								ifTrue: [ self recursiveRealizePaletteForeground: true updateColors: true. ].
							self nativeWindow registerControl: self.
	
							self originalWndProc: (self wndProc).
							self wndProc: self customWndProc.
							self isFocus
								ifTrue: [ self setFocus ].
						].!

createVisible ^<Boolean>

	^true!

customWndProc ^<APICallback>

	^self actualClass customWndProc!

debugTest: msgCode <ExternalData> for: hwnd <ExternalData>

	Win32Control debugEvents
			ifTrue: [	Platform errorStream
									show: 'control winproc event: ';
									show: (MSG descriptionOf: msgCode asExternalProxy);
									show: ' window: ';
									print: hwnd;
									cr. 	].!

destroyWin32Handle

	win32Handle notNil
		ifTrue: [	| hand <ExternalProxy> |
						self actualClass unregisterControl: self controlId.
						self nativeWindow unregisterControl: self.
						hand := self win32Handle.
						win32Handle := nil.		"We nil the handle before destroying so that we can tell
																we are dead if there is a focus shift caused by destroy"
						{{<user ExternalProxy DestroyWindow>
							handle: hand }}.		]!

displayUpwardPopUpMenuAt: loc <Point> ^<Boolean>
	"Look up the parent chain for a popUp menu and display it, if there is one.
		Return true if one was found"

	| m <Menu> t <Timer> |
	m := self parent popUpMenuIfAbsent: [ ^false ].
	self	displayPopUpMenu: m
			at: loc
			forButton: #secondary.
	t := self session atIntervals: 1.0 do:
			[	m release.
				t release. ].
	^true!

extendedWin32Style ^<ExternalData>

	^Win32 WS_EX_NOPARENTNOTIFY!

handleMouseEvent: type <Symbol>
message: msgCode <ExternalData>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>

	| loc <Point> |
	"Translate to be relative to our origin"
	loc := (lParam low @ lParam high) + self allocation enclosingRect origin.
	self handleMouseEvent: type at: loc!

hasWin32Handle ^<Boolean>

	^win32Handle notNil!

invalidate: r <Region>

	self registerPaintTime.
	(self layoutStatus = Visual valid and: [ self hasWin32Handle ])
		ifTrue: [	| rect <Rect> nativerect <RECT> |

						nativerect := RECT new allocate.
						rect := r enclosingRect relativeTo: self allocation origin.
						nativerect
							left: rect left asInteger;
							right: rect right asInteger;
							top: rect top asInteger;
							bottom: rect bottom asInteger.
						{{<user ExternalProxy InvalidateRect>
							hwnd: self win32Handle
							RECT: nativerect
							erase: true}}.
						nativerect free.	]!

nativePosition ^<Point>

	"We have to adjust for the fact that our allocation origin might not be 0@0"
	^nativePosition := self positionInContainingNativeWindow + self allocation enclosingRect origin!

originalWndProc ^<HWND>

	^originalWndProc!

originalWndProc: h <HWND>

	originalWndProc := h!

redraw: flag <Boolean>
	"Tell the widget to start or stop redrawing (temporarily) when necessary.  This is usually used
		with a true arg before a large number of changes, followed by a send with a false arg."

	flag = self redraw
		ifFalse: [	redraw := flag.
						self hasWin32Handle
							ifTrue: [	self	sendMessage: Win32 WM_SETREDRAW
													wparam: flag asExternalData
													lparam: 0	]].!

setEnabled: flag <Boolean>

	enabled := flag.
	win32Handle notNil
		ifTrue: [	{{<user ExternalProxy EnableWindow>
								handle: self win32Handle
								state: self fullyEnabled asExternalData}}.	].
!

setWindowText: t <Str>

	| label <CString> |
	label := CString for: t.
	{{<user ExternalProxy SetWindowText>
		handle: self win32Handle
		str: label}}.
	label free.!

updateWindowDimensions
	"set the control's native size and position"

	| pos <Point> |

	pos := self nativePosition.
	self paintPending: false.
	{{<user ExternalProxy MoveWindow>
		handle: self win32Handle
		x: pos x asInteger
		y: pos y asInteger
		width: self allocation enclosedRect width asInteger
		height: self allocation enclosedRect height asInteger
		repaint: true asExternalData
	 }} asBoolean
			ifFalse: [ Win32 handleError ]!

win32Style ^<ExternalData>

	| s <ExternalData> |
	s := Win32 WS_CHILDWINDOW.
	self createVisible
		ifTrue: [ s := s externalBitOr: Win32 WS_VISIBLE. ].
	self fullyEnabled
		ifFalse: [ s := s externalBitOr: Win32 WS_DISABLED ].
	^s!

wndProc ^<ExternalProxy>

	^Window wndProcOf: self win32Handle!

wndProc: wp <ExternalProxy>

	Window wndProcOf: self win32Handle put: wp! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'private-message handling' !


beforeKillFocus

	(self session hasInputFocus and: [ self session inputFocus nativeWindow = self ])
		ifTrue: [ self session noInputFocus ].!

beforeSetFocus

	ignoreNextFocusSet
		ifTrue: [	"We requested the focus, and have already recorded it, so
							ignore this."
						ignoreNextFocusSet := false.	]
		ifFalse: [	"We didn't request this, so windows must be requesting it, so
							record it"
						"We don't use becomeFocus here because that would cause another
							windows setFocus message"
						self session inputFocus: self.		]!

contextMenuMsg: msg <ExternalData>
hwnd: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<Boolean>

	^self displayUpwardPopUpMenuAt:
			(self localFromGlobalPosition: lParam low @ lParam high)! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'private-testing' !


isFocusCandidate ^<Boolean>

	^self canBeFocusCandidate
		and: [ self hasWin32Handle
		and: [ self enabled ] ]!

isRectangularAndOpaque ^<Boolean>

	^true! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'restricted-to session' !


blinkFocus: shown <Boolean>
	
! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'restricted-win32' !


buttonColorMsg: hdc <ExternalProxy> ^<ExternalData>

	"Should only get sent to buttons, which override this"
	self shouldNotHappen!

commandWith: notifyCode <ExternalData> ^<ExternalData>

	"Subclasses should override to process command msgs"!

drawItemMsg: data <DRAWITEMSTRUCT> ^<ExternalData>

	self shouldNotHappen!

hInstance ^<ExternalProxy>

	^self parent nativeWindow hInstance!

measureItemMsg: data <MEASUREITEMSTRUCT> ^<ExternalData>

	self shouldNotHappen!

message: msgCode <ExternalData>
for: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	self debugTest: msgCode for: hwnd.

	(self session handleIfFocusMsg: msgCode for: self wParam: wParam lParam: lParam) = 0
		ifTrue: [ ^0 ].

	msgCode @= Win32 WM_LBUTTONDOWN 
		ifTrue: [	self handleMouseEvent: #primaryButtonDown
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_LBUTTONUP 
		ifTrue: [	self handleMouseEvent: #primaryButtonUp
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_LBUTTONDBLCLK
		ifTrue: [	self handleMouseEvent: #primaryButtonDoubleClick
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_RBUTTONDOWN 
		ifTrue: [	self handleMouseEvent: #secondaryButtonDown
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_RBUTTONUP 
		ifTrue: [	self handleMouseEvent: #secondaryButtonUp
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_RBUTTONDBLCLK
		ifTrue: [	self handleMouseEvent: #secondaryButtonDoubleClick
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_MOUSEMOVE 
		ifTrue: [	self handleMouseEvent: #mouseMove
								message: msgCode wParam: wParam lParam: lParam.
						^0 ].

	msgCode @= Win32 WM_CTLCOLORBTN
		ifTrue: [ ^Win32Control buttonColorMsg: wParam asExternalProxy for: (Win32Control controlIdFor: lParam) ].

	msgCode @= Win32 WM_DRAWITEM
		ifTrue: [	^Win32Control drawItemMsg: (DRAWITEMSTRUCT forProxy: lParam) for: wParam asSmallInteger ].

	msgCode @= Win32 WM_MEASUREITEM
		ifTrue: [	| data <MEASUREITEMSTRUCT> |
						data := MEASUREITEMSTRUCT forProxy: lParam.
						data CtlType @= Win32 ODT_MENU
							ifFalse: [ ^Win32Control measureItemMsg: data for: data CtlID asSmallInteger ] ].

	(msgCode @= Win32 WM_COMMAND and: [ lParam @~= Win32 NULL ])
		ifTrue: [	"Then this is a control window notification, which should be forwarded back to the
						  smalltalk control object"
						Win32Control notificationMsg: wParam asExternalProxy high for: (Win32Control controlIdFor: lParam).
						^0 ].

	msgCode @= Win32 WM_SETFOCUS
		ifTrue: [ self beforeSetFocus ].
	msgCode @= Win32 WM_KILLFOCUS
		ifTrue: [ self beforeKillFocus ].

	msgCode @= Win32 WM_CONTEXTMENU
		ifTrue: [ (self contextMenuMsg: msgCode hwnd: hwnd wParam: wParam lParam: lParam)
						ifTrue: [ ^0 ]. ].

	msgCode @= Win32 WM_QUERYNEWPALETTE 
		ifTrue: [	self queryPaletteMsg: msgCode hwnd: hwnd
								wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_PALETTECHANGED 
		ifTrue: [	self paletteChangedMsg: msgCode hwnd: hwnd
								wParam: wParam lParam: lParam.
						^0 ].
	msgCode @= Win32 WM_SETCURSOR 
		ifTrue: [	^self setCursorMsg: msgCode hwnd: hwnd
								wParam: wParam lParam: lParam	 ].

	^{{<user ExternalProxy CallWindowProcA> 
		proc: self originalWndProc
		hwnd: hwnd
		msg: msgCode
		wparam: wParam
		lparam: lParam }}!

notificationMsg: notifyCode <ExternalData>

	"Subclasses can extend to process notification msgs"

	Win32Control debugNotifications
			ifTrue: [ Platform errorStream
							show: 'control notification: ';
							print: notifyCode;
							show: ' window: ';
							print: self win32Handle;
							cr ].

	notifyCode @= Win32 BN_KILLFOCUS
		ifTrue: [ "%todo" ].
	notifyCode @= Win32 BN_SETFOCUS
		ifTrue: [ "%todo" ].
!

sendMessage: msg <ExternalData>
wparam: wp <ExternalData>
lparam: lp <ExternalData>
^<ExternalProxy>

	^{{<user ExternalProxy SendMessageA>
			handle: self win32Handle
			msg: msg
			wparam: wp
			lparam: lp}}!

setFocus

	ignoreNextFocusSet := true.
	 self win32Handle @= {{<user ExternalProxy GetFocus> call}}
		ifFalse: [  {{<user ExternalProxy SetFocus> hwnd: self win32Handle}} ]!

win32Handle ^<HWND>

	win32Handle isNil	
		ifTrue: [ self createNativeWindow ].
	^win32Handle! !

! (Delta mirrorFor: #Win32Control) methodsFor: 'testing' !


isFocus ^<Boolean>

	^isFocus! !

