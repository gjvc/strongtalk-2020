Delta define: #Extensible as: (
Generic forAll: 'E ' body: (Protocol superProtocol: '<Cltn[E]>')) !

(Delta mirrorFor: #Extensible) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #Extensible) group: 'base'!

(Delta mirrorFor: #Extensible)
comment: 
'The protocol for collections that can have elements added and removed.
Note that this is essentially the mutable Set
protocol.  Note that the correct way of doing set 
operations is to use #include:, and 
#hasSameElementsAs: instead of #add:, and
#=, respectively.  This will ensure that
you get the identical semantics from Sets, OrderedCollections,
and Bags. 

Limitation: you cannot put nil in an Extensible collection.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #Extensible) methodsFor: 'Unclassified' !


add: <E> ^<E>
"This is like include, but the implementation is free to
add another entry even if the element is already in the
collection.  The only thing you can count on
is that the element will appear in the collection at LEAST
once." !

addAll: another <Collection[E]> ^<Collection[E]> !

include: <E> ^<E> !

include: <E> ifNew: blk <[]> ^<E>
"Add the element to the collection if it is not already
present.  This will never produce duplicate elements." !

includeAll: <Cltn[E]> ^<Cltn[E]> !

remove: element <E> ^<E>
"remove a single occurrence of the element from the set.
Note that if there are multiple occurrences, some will remain.
This is erroneous if the element is not in the set." !

remove: val <E> ifAbsent: <[^X def]> ^<E | X>
   !

removeAll: another <Collection[E]> ^<Collection[E]> !

removeAllSuchThat: <[E,^Boolean]> !

removeEvery: element <E> ^<E>
"make sure that the element does not occur in the set.  Unlike
remove:, this ensures that no matching elements remain.  Do nothing
if the element is not in the set." ! !

