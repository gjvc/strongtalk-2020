Delta define: #HTMLView as: (
(Class subclassOf: 'View[URL]' instanceVariables: 'htmlVisual <HTMLVisual>
html <HTMLNode>
history <OrdCltn[URL]>
forwardURLs <OrdCltn[URL]>
backButton <Button>
urlField <TextView[Str]>
column <Column[Visual]>
showUrl <Boolean>
home <URL>
scaleFactor <Float>
toolBar <ToolBar>')) !

(Delta mirrorFor: #HTMLView) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #HTMLView) group: 'HTML'!

(Delta mirrorFor: #HTMLView)
comment: 
'This is the main class for the HTML browser.

Tags: %User %UI %HTML

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license
'!

! (Delta mirrorFor: #HTMLView) methodsFor: 'private' !


backButton ^<Button>

	backButton := Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/goBack.bmp'))
		action: [ :b <Button> | self goBack ].
	^backButton!

bareModel: abs <URL>
	"sets the model from an absolute URL, without touching the back
		or forward data. "

	self bareModel: abs ifFail: []
!

bareModel: abs <URL> ifFail: blk <AbortBlock>
	"sets the model from an absolute URL, without touching the back
		or forward data.  If the url can't be loaded, blk is called."

	| newHtml <HTMLNode> |

	"Before changing anything, try to read the new page in case there are problems"
	newHtml := abs loadHTMLIfFail:
			[	"Failed!!"
				self visual promptOk: 'Can''t access URL ',abs printString
					title: 'Error'
					type: #exclamation
					action: [].
				^blk value
			].
	
	"--- up to this point, nothing has changed"
	
	self html: newHtml.
	super model: abs.
	self urlField model: self model path.
	self htmlVisual html: self html.
!

buildBareVisualTop: top <Boolean> ^ <Visual>

	| scr <Scroller> |
	scr := Scroller new.
	self htmlVisual notForScroller: false.
	scr viewport: self htmlVisual.
	scr	yScrollState: self htmlVisual yScrollState.
	self htmlVisual constrainX: true.
	scr useContinuousGrid.
	
	"We just ask for this here so that it gets created.  rebuildColumn then
		just gets it via #visual"
	self urlField imbeddedVisual.
	
	^top
			ifFalse: [ scr ]
			ifTrue: [ self column: Column[Visual] new.
							self column add: scr with3DBorder baselined.
							self rebuildColumn.
							self column ]!

checkBack

	self backButton enabled: self hasHistory!

cloneButton ^<Button>

	^Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/clone.bmp'))
		action: [ :b <Button> | self clone ]!

column ^<Column[Visual]>

	^column!

column: c <Column[Visual]>

	column := c!

editButton ^<Button>

	^Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/edit.bmp'))
		action: [ :b <Button> | self editSource ]!

homeButton ^<Button>

	^Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/home.bmp'))
		action: [ :b <Button> | self goHome ]!

html: h <HTMLNode> 

	html := h!

htmlVisual ^<HTMLVisual>

	^htmlVisual!

rebuildColumn

	| scroller <Visual> f <Application> |
	self column isNil
		ifTrue: [ ^self ].

	"remove everything but the scroller (the last thing) from the column first"
	scroller := self column removeAll last.

	"Makes sure all the reused imbedded visuals
		are unparented before reimbedding"
	f := self urlField.
	f hasVisual
		ifTrue: [ f visual noParent ].
	self backButton noParent.

	self showUrl
		ifTrue: [	self column
								add: HorizontalRule new asVisual baselined;
								add: self urlView baselined.	].
	self column add: scroller.!

rebuildPageIfNeeded

	self hasVisual
		ifTrue: [ self htmlVisual html: self html ]!

refreshButton ^<Button>

	^Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/refresh.bmp'))
		action: [ :b <Button> | self model: self model ]!

scaleDownButton ^<Button>

	^Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/smallerText.bmp'))
		action: [ :b <Button> | self scaleDown ]!

scaleUpButton ^<Button>

	^Button
		withImage:
			(Image fromFile: (FilePath for: 'resources/biggerText.bmp'))
		action: [ :b <Button> | self scaleUp ]!

urlField ^<TextView[Str]>

	urlField isNil
		ifTrue: [	urlField := TextView[Str] forString
							doneBlock:
								[ :accept <Boolean> :toContinue <[]> |
									accept
										ifTrue: [ self model: (URL for: self urlField model) ].
									self urlField model: self model path.
									toContinue value
								];
							isMultiLine: false;
							autoAccept: false.
					].
	^urlField!

urlView ^<Visual>

	| locp <Painter> |
	locp := Painter new font: (Font default newSpec boldness: 0.8) font.

	^(Row[Visual] new
		add: (StringGlyph for: 'Location:  '
						painter: locp) asVisual;
		add: (self urlField visual
						withBackdrop: (Painter new paint: Paint white)
					) with3DBorder
	   ) withBorderInset: (5@ 5 corner: 0 @ 5)! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'accessing' !


firstLinkIfAbsent: blk <AbortBlock> ^<URL>

	self html linksDo:
		[ :link <ElementA> |
			^link url	].
	^blk value!

hasHistory ^<Boolean>

	^history notNil and: [ history isEmpty not ]!

hasWinBackdrop ^<Boolean>

	^true!

history ^<OrdCltn[URL]>

	history isNil
		ifTrue: [ history := OrderedCollection[URL] new ].
	^history!

history: h <OrdCltn[URL]>

	history := h!

home ^<URL>

	^home!

home: h <URL>

	home := h!

html ^<HTMLNode>

	html isNil
		ifTrue: [ html := self model loadHTML ].
	^html!

lastLinkIfAbsent: blk <AbortBlock> ^<URL>

	| l <ElementA> |
	self html linksDo:
		[ :link <ElementA> |
			l := link	].
	^l isNil
		ifFalse: [ l url ]
		ifTrue: [ blk value ]!

model: m <URL>

	| abs <URL> newHtml <HTMLNode> oldModel <URL> |
	
	self home isNil
		ifTrue: [ self home: m ].
	
	"If the url is relative, we use the current model as its base url"
	m isRelative
		ifTrue: [	self assert: [ self model notNil ].
						abs := m absoluteURLInContext: self model.	]
		ifFalse: [ abs := m ].
	
	oldModel := self model.

	self bareModel: abs ifFail: [ ^self ].

	self forwardURLs removeAll.

	(oldModel notNil and: [ self model ~= oldModel
				and: [ (self history includes: self model) not ]])
		ifTrue: [	self history addLast: oldModel ].
!

scaleFactor ^<Float>

	^scaleFactor!

scaleFactor: f <Float>

	scaleFactor := f.
	self rebuildPageIfNeeded.!

showToolBar ^<Boolean>

	^self toolBar visible
!

showToolBar: f <Boolean>

	self toolBar visible: f!

showUrl ^<Boolean>

	^showUrl
!

showUrl: f <Boolean>

	showUrl := f.
	self hasVisual
		ifTrue: [ self rebuildColumn ].!

winBackdrop ^<Painter>

	^Painter new paint: Paint backgroundGray! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'menus' !


editMenu ^<Menu>

	^Menu new name: '&Edit';
			add: (MenuAction new
					name: '&HTML source';
					action: [ self editSource ])!

fileMenu ^<Menu>

	^Menu new name: '&File';
			add: (MenuAction new
					name: '&Open...';
					action: [ self open ]);
			add: (MenuAction new
					name: '&Back';
					active: [ self hasHistory ];
					action: [ self goBack ]);
		 addSeparator;
		 add: (MenuAction new
		            name:'Meta';
		            action:[Inspector launchOn: self])!

hasMenu ^<Boolean>

	^true!

menuBar ^<Menu>

	^Menu new 
			add: self fileMenu;
			add: self editMenu;
			add: self viewMenu;
			add: self optionsMenu
!

optionsMenu ^<Menu>

	^Menu new name: '&Options';
			add: (MenuAction new
					name: 'Show Tool Bar';
					checked: [ self showToolBar ];
					action: [ self showToolBar: self showToolBar not ]);
			add: (MenuAction new
					name: 'Show Location';
					checked: [ self showUrl ];
					action: [ self showUrl: self showUrl not ])!

viewMenu ^<Menu>

	^Menu new name: '&View';
			add: (MenuAction new
					name: '&Bigger Text';
					action: [ self scaleUp ]);
			add: (MenuAction new
					name: '&Smaller Text';
					action: [ self scaleDown ]);
			add: (MenuAction new
					name: '&Default Text Size';
					action: [ self scaleFactor: 1.0 ]);
			addSeparator;
			add: (MenuAction new
					name: '&Clone';
					action: [ self clone ])
! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'control' !


clone ^<HTMLView>

	| v <HTMLView> |
	v := HTMLView new model: self model.
	v	history: self history;
		home: self home.
	v  launch.
	^v!

editSource

	self model isLocal
		ifFalse: [	self visual promptOk: 'This URL is not local, and cannot be edited.'
									title: 'Error'
									type: #stop
									action: [].
							^self  ].
	(TextEditor on: self model filePath) launch!

goBack

	| current <URL> |
	self hasHistory
		ifFalse: [ ^self ].
	current := self model.
	self bareModel: self history removeLast.
	self forwardURLs addLast: current.!

goHome

	self model: self home!

open

	| defile <FilePath> |
	self model isLocal
		ifTrue: [ defile := self model filePath ].
	self visual
		userPickOpenFileWithAction:
			[ :f <FilePath> :writeable <Boolean> |
				self model: (URL forFilePath: f)	]
		fileTypes: (Array[Tuple[Str,Str]] with: 'HTML Files' ,, '*.html' )
		defaultFile: defile
		defaultDir: nil
		title: 'Open HTML File'
		allowReadOnly: true
		mustExist: true!

scaleDown

	self scaleFactor: self scaleFactor - 0.1!

scaleUp

	self scaleFactor: self scaleFactor + 0.1! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'link handling' !


activateLink: element <ElementA> at: loc <Point>

	self model: element url!

doitAction: doit <Str>

	Smalltalk evaluate: doit ifError:
		[ :err <Str> :spot <Int> |
			 Transcript show: 'Error in HTML doit: ''',
			 	(doit stringCopyReplaceFrom: spot to: spot with: '<<',err,'>>'), ''''; cr.
			  ]! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'toolbar' !


hasToolBar ^<Boolean>

	^true!

toolBar ^<ToolBar>

	toolBar isNil
		ifTrue: [	toolBar := ToolBar new
							add: self homeButton;
							addSpace;
							add: self backButton;
							add: self refreshButton;
							addSpace;
							add: self cloneButton;
							add: self editButton;
							addSpace;
							add: self scaleUpButton;
							add: self scaleDownButton;
							yourself.
					].
	^toolBar
! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'private-forward' !


forwardURLs ^<OrdCltn[URL]>

	forwardURLs isNil
		ifTrue: [ forwardURLs := OrderedCollection[URL] new. ].
	^forwardURLs!

popNextURLOrIfAbsent: blk <[^X def]>  ^<URL | X>

	^self forwardURLs isEmpty
		ifFalse: [ self forwardURLs removeLast ]
		ifTrue: [ blk value ]! !

! (Delta mirrorFor: #HTMLView) methodsFor: 'private-initialization' !


initialize

	super initialize.
	self scaleFactor: 1.0.
	htmlVisual := HTMLVisual for: self.
	self showUrl: false.
! !

