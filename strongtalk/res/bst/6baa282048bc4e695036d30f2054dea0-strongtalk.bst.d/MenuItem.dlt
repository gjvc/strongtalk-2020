Delta define: #MenuItem as: (
(Class subclassOf: 'ClassCritical |> Object' instanceVariables: 'parent <Menu>
			"parent menu or nil"
id <Int>
		') classVariables: 'MaxId <Int>
			"new items are assigned ids by incrementing this number"
ActiveItems <VarDict[Int,MenuItem]>
			"holds all items currently active"
		') !

(Delta mirrorFor: #MenuItem) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #MenuItem) group: 'base'!

(Delta mirrorFor: #MenuItem)
comment: 
'Tags: %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license
'!

! (Delta mirrorFor: #MenuItem) classSide methodsFor: 'private' !


activeItems ^<VarDict[Int,MenuItem]>

	MenuItem critical:
		[ ActiveItems isNil
			ifTrue: [	ActiveItems := Dictionary[Int,MenuItem] new.
							MaxId := 0.	]].
	^ActiveItems!

register: item <MenuItem> ^<Int>
	^MenuItem critical:
		[	| items <VarDict[Int,MenuItem]> |
			items := self activeItems.	"must ask for this before accessing id"
			MaxId := MaxId + 1.
			items at: MaxId put: item.
			MaxId  ]!

unregister: id <Int>

	MenuItem critical:
		[	self activeItems removeAt: id   ]! !

! (Delta mirrorFor: #MenuItem) classSide methodsFor: 'restricted-win32' !


itemFor: id <ExternalData> ^<MenuItem>

	^MenuItem critical:
		[ self activeItems at: id ]! !

! (Delta mirrorFor: #MenuItem) methodsFor: 'private' !


postCopy

	super postCopy.
	id := nil.
	parent := nil.!

rebuild

	self parent rebuild.!

rebuildIfNeeded

	self isBuilt
		ifTrue: [ self rebuild ]! !

! (Delta mirrorFor: #MenuItem) methodsFor: 'control' !


buildFor: menu <Menu> at: index <Int>

	self subclassResponsibility!

execute

	"Non-actions do nothing"!

release
	"Release any external resources for the menu.  The menu may be reused
		after this if desired"

	id notNil
		ifTrue: [ self class unregister: id ].
	id := nil!

updateFor: menu <Menu> at: index <Int>

	"By default, do nothing"! !

! (Delta mirrorFor: #MenuItem) methodsFor: 'accessing' !


hasParent ^<Boolean>

	^parent notNil!

id ^<Int>

	id isNil
		ifTrue: [ id := self class register: self ].
	^id!

noParent

	parent := nil.!

parent ^<Menu>

	^parent!

parent: p <Menu>

	self assert: [ parent isNil ].
	parent := p! !

! (Delta mirrorFor: #MenuItem) methodsFor: 'testing-restricted' !


isBuilt ^<Boolean>

	^self hasParent and: [ self parent isBuilt ]! !

! (Delta mirrorFor: #MenuItem) methodsFor: 'restricted-win32' !


mergeInto: menu <Menu>
	"double dispatch message used during merging"
	
	self subclassResponsibility!

updateMenuWithHandle: handle <ExternalProxy>

	"By default, do nothing"! !

