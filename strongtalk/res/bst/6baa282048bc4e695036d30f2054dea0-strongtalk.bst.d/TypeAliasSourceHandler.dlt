Delta define: #TypeAliasSourceHandler as: (
(Class subclassOf: 'CommonSourceHandler' instanceVariables: '')) !

(Delta mirrorFor: #TypeAliasSourceHandler) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #TypeAliasSourceHandler) group: 'reflection'!

(Delta mirrorFor: #TypeAliasSourceHandler)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #TypeAliasSourceHandler) methodsFor: 'Unclassified' !


aliasString ^ <Str>

	self isMeta ifTrue: [ ^self dualHandler aliasString ].
	^(self attributeAt: '#aliasString') first
!

aliasString: s <Str>

	self isMeta ifTrue: [ ^self dualHandler aliasString: s ].
	self attributeAt: '#aliasString'  put: (OrderedCollection[Str] with: s).

	self logDefinition.
	self changed: #aliasString!

handlerId ^ <Str>

	^'TypeAlias'
!

hasDualHandler ^ <Boolean>

	^false!

logDefinition ^ <Int>

	self deltaHack.	"Change this once we have constructors in place"
	^self isPersistent
		ifTrue: [		self addSectionToChangeLog: [ :log <WriteStream> |
								(DefinitionWriter for: self mirror) fileOutDefinition: self mirror definitionString on: log ] ] 
		ifFalse: [	nil ] !

typeArgumentString ^ <Str>

	self isMeta ifTrue: [ ^self dualHandler typeArgumentString ].
	^(self attributeAt: '#typeArgumentString') first
!

typeArgumentString: s <Str>

	self isMeta ifTrue: [ ^self dualHandler typeArgumentString: s ].
	self attributeAt: '#typeArgumentString' asSymbol put: (OrderedCollection with: s).

	self logDefinition.
	self changed: #typeArguments
! !

