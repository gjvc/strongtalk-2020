Delta define: #TypeArgumentOutliner as: (
(Class subclassOf: 'DefinitionItemOutliner' instanceVariables: '')) !

(Delta mirrorFor: #TypeArgumentOutliner) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #TypeArgumentOutliner) group: 'outliner'!

(Delta mirrorFor: #TypeArgumentOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #TypeArgumentOutliner) methodsFor: 'private' !


aspectForUpdate ^ <Symbol>

	^#typeArguments!

header ^ <Str>

	^'Type arguments'!

modelAsCharGlyphs ^ <CharGlyphs>

	| painter <Painter> |
	painter := self useRichTextForSources 
		ifTrue: [ 		self typeExpressionPainter ]
		ifFalse: [	self codePainter ].
	^self standardTextForString: self mirror typeArgumentString painter: painter!

storeAndOnSuccess: blk <[]>

	"The right way to do this is to have a #typeArgumentString:ifFail: in the mirrors that will parse and
		update type information accordingly.
		
		In the meantime, we parse an extra time here to check for errors and reevaluate the constructor
		for the entire definition. This should be changed shortly."
		
	| tas <Str> eval <Str> constructor <Mirror> |
	self deltaHack.
	tas := self charGlyphModelAsString: self codeView.
	
	tas isEmpty
		ifTrue: [		eval := self mirror basicDefinitionString ]
		ifFalse: [	DeltaParser new 
								parseTypeArgs: tas
								within: DeltaGlobals
								ifError: [ :msg <Str> :pos <Int> | ^self showParseError: msg at: pos in: self codeView ].
							eval := 'Generic forAll: ', tas asString printString, ' body: (', self mirror basicDefinitionString, ')' ].
							
	constructor := Mirror coerce: (Smalltalk evaluate: eval ifError: [ :msg <Str> :pos <Int> | self shouldNotHappen ]).
	Smalltalk define: self mirror name as: constructor.
	blk value.
! !

! (Delta mirrorFor: #TypeArgumentOutliner) methodsFor: 'typechecking' !


typecheck

self typecheckAction:[self mirror typecheckTypeArguments]
		title: 'Typechecking ', self mirror name, ' type arguments'.
! !

! (Delta mirrorFor: #TypeArgumentOutliner) methodsFor: 'accessing' !


locator ^ <TypeArgumentLocator>

^TypeArgumentLocator ofDefinition: self mirror basicLocator! !

