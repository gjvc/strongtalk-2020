Delta define: #BubbleSortBenchmark as: (
(Class subclassOf: 'QuicksortBenchmark' instanceVariables: 'top') classVariables: 'Sortelements SortElements ') !

(Delta mirrorFor: #BubbleSortBenchmark) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #BubbleSortBenchmark) group: 'benchmark'!

(Delta mirrorFor: #BubbleSortBenchmark)
comment: 
'No comment
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #BubbleSortBenchmark) classSide methodsFor: 'constants' !


initialize Sortelements := 500 "BubbleSortBenchmark initialize"! !

! (Delta mirrorFor: #BubbleSortBenchmark) methodsFor: 'run' !


initarr
	| temp |
	self initrand.
	biggest := -1000000.
	littlest := 1000000.
	sortlist := Array new: Sortelements.
	1 to: Sortelements do: 
		[:i | 
		temp := self rand.
		sortlist at: i put: temp - (temp // 100000 * 100000) - 50000.
		(sortlist at: i)
			> biggest ifTrue: [biggest := sortlist at: i].
		(sortlist at: i)
			< littlest ifTrue: [littlest := sortlist at: i]]!

run   | i  j |
	self initarr.
	top :=    Sortelements.
	[top > 1] whileTrue: [
	    i:= 1.
	    [i < top] whileTrue: [
		(sortlist at: i) > (sortlist at: i + 1) ifTrue: [
		    j:= sortlist at: i.
		    sortlist at: i put: (sortlist at: i + 1).
		    sortlist at: i + 1 put: j.
		].
		i:= i + 1.
	    ].
	    top:= top - 1.
	].
	((sortlist at: 1) ~= littlest or: 
	[(sortlist at: Sortelements) ~= biggest]) ifTrue:
	    [self error: 'Error3 in Bubble'  ]! !

! (Delta mirrorFor: #BubbleSortBenchmark) methodsFor: 'admin' !


digitalkTime
	^339!

factor
	^5!

name
	^#BubbleSort!

parcplaceTime
	^287! !

