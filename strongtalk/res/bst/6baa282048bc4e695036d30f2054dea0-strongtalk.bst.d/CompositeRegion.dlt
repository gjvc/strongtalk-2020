Delta define: #CompositeRegion as: (
(Class subclassOf: 'Collection[Region] mixin |> Region' instanceVariables: '') abstract) !

(Delta mirrorFor: #CompositeRegion) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #CompositeRegion) group: 'ui'!

(Delta mirrorFor: #CompositeRegion)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.1 $
'!

! (Delta mirrorFor: #CompositeRegion) methodsFor: 'private' !


subregionsDo: f <[Region]>
	"Subclasses must implement to iterate over the subregions that form the receiver"

	self subclassResponsibility! !

! (Delta mirrorFor: #CompositeRegion) methodsFor: 'region operations' !


mightIntersect: other <Region> ^<Boolean>

	self subRegionsDo: 
		[ :sub <Region> |
			(sub mightIntersect: other)
				ifTrue: [ ^true ]		].
	^false! !

! (Delta mirrorFor: #CompositeRegion) methodsFor: 'iterating' !


reduceRegions: reduceFn <[RE def,RE,^RE]> ifEmpty: onEmpty <[^X def]>  ^<RE | X>
			{where CONSTRAINER <RE subtypes> is returnType of #aRegion message of receiverType}

	"Like Collection>>reduce:ifEmpty:, but doesn't conflict with collection protocol"

	| current <RE> |
	self do:
		[ :el <E> |
			| rel <RE> |
			rel := guaranteed <RE> el.
			current isNil
				ifTrue: [ current := rel ]
				ifFalse: [ current := reduceFn value: current value: rel ]	].
	^current isNil
		ifFalse: [ current ]
		ifTrue: [ onEmpty value ]! !

! (Delta mirrorFor: #CompositeRegion) methodsFor: 'accessing' !


aRegion ^<Region>

	self subregionsDo:
		[ :r <Region> |
			^r ]!

enclosedRect ^<Rect>

	^self aRegion enclosedRect!

enclosingRect ^<Rect>

	^(self
		reduceRegions: 
			[ :r1 <Region> :r2 <Region> |
				r1 regionEnclosingMerge: r2 ]
	  	ifEmpty: [ 0@0 corner: 0@0 ]
	 ) enclosingRect! !

! (Delta mirrorFor: #CompositeRegion) methodsFor: 'restricted-double dispatching' !


intersectsRect: other <Rect> ^<Boolean>

	^self intersects: other! !

! (Delta mirrorFor: #CompositeRegion) methodsFor: 'testing' !


containsPoint: p <Point> ^<Boolean>

	self subregionsDo: 
		[ :sub <Region> |
			(sub containsPoint: p)
				ifTrue: [ ^true ]		].
	^false! !

