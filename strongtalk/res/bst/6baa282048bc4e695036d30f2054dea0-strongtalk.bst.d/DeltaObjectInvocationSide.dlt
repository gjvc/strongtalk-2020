Delta define: #DeltaObjectInvocationSide as: (
(Class subclassOf: 'DeltaObjectSideBehavior' instanceVariables: 'klass dual mirror selfTV selfPublicTV typeOfInstances scope ')) !

(Delta mirrorFor: #DeltaObjectInvocationSide) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaObjectInvocationSide) group: 'ast'!

(Delta mirrorFor: #DeltaObjectInvocationSide)
comment: 
'Unique invocation of Object mixin.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaObjectInvocationSide) methodsFor: 'Unclassified' !


addBrand ^ <Self>

!

basicLocator
	^self myMixin basicLocator!

brandName ^ <Symbol>

^self myMixin brandName!

branded

^true!

classDecl ^ <DeltaClassUpdate>
    ^self myMixin classDecl!

compositeSubstitute: t <Interface> ^ <Interface>

 ^t substitute: self privateToPublicSubstitution
!

compositeSubstitutePrivate: t <Interface> ^ <Interface>

 ^t !

dual ^ <Protocol>

^dual!

dual: d <Protocol>

dual := d.

!

klass ^ <DeltaClass>
    ^klass!

klass: k <DeltaClass > ^ <Self>

    klass := k.
!

messages ^<Dict[Symbol,Message]>

^self myMixin messages 
!

messages: ms

self deltaHack.!

methods ^ <Dict[Symbol,Method]>
    ^self myMixin methods 
!

methods: ms

self deltaHack.!

mirror ^ <Mirror>

mirror isNil ifTrue:[mirror := super mirror].
^mirror!

myMixin ^<MixinDecl>

^Type forMixin: self  vmMixin !

scope ^<Scope>
    ^scope!

scope: s <Scope>
    scope := s!

secondaryInterface ^ <Interface>
    ^(Type forClass: self mirror class reflectee) primaryInterface.!

selfClassTV ^ <TypeVar>

^self dual selfTV!

selfDualTV ^ <TypeVar>

^self dual selfTV!

selfPublicClassTV ^ <TypeVar>

^self dual selfPublicTV!

selfPublicTV ^ <TypeVar>
    ^self myMixin selfPublicTV!

selfPublicTV: stv <TypeVar>
    selfPublicTV := stv!

selfTV ^ <TypeVar>
    ^self myMixin selfTV!

selfTV: stv <TypeVar>
    selfTV := stv!

superclassType ^ <Class>
    ^nil!

typeOfInstances ^ <ObjectType>
"This method returns and caches the public protocol of the side. The actual 
construction of the value is handled by super's version of the
method. "

^self myMixin typeOfInstances!

typecheck  ^ <Self>

self error: 'Typechecking should not be called for invocations'.!

typecheckDeclaration  ^ <Self>

self error: 'Typechecking should not be called for invocations'.!

typecheckInterface  ^ <Self>

self error: 'Typechecking should not be called for invocations'.!

typecheckMethod: m <Method > ^ <Self>

self error: 'Typechecking should not be called for invocations'.!

varDecls ^ <Dict[Symbol,VarDecl]>
    ^self myMixin varDecls!

vmMixin ^<Mixin>

^self mirror mixin reflectee !

wellTypedAttribute: m <Attribute > ^ <Boolean>

self error: 'Typechecking should not be called for invocations'.!

wellTypedAttributeInterface: m <Attribute > ^ <Boolean>

self error: 'Typechecking should not be called for invocations'.! !

