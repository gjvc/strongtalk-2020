Delta define: #Palette as: (
(Class subclassOf: 'Object' instanceVariables: 'win32Handle <ExternalProxy>
	') classVariables: 'PaletteDebug <Boolean>') !

(Delta mirrorFor: #Palette) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #Palette) group: 'ui'!

(Delta mirrorFor: #Palette)
comment: 
'Tags: %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license
'!

! (Delta mirrorFor: #Palette) classSide methodsFor: 'instance creation' !


for: colors <SeqCltn[SolidPaint]> ^<Instance>

	^self new initFor: colors! !

! (Delta mirrorFor: #Palette) classSide methodsFor: 'restricted-win32' !


select: paletteHandle <Win32Handle>
into: hdc <HDC>
background: b <Boolean>
^<Win32Handle>

	Palette debugging
		ifTrue: [ Platform errorStream show: 'Palette>>select into: '; print: hdc; cr.	].
	^{{<gdi Win32Handle SelectPalette>
			hdc: hdc
			pal: paletteHandle
			background: b asExternalData
		}}! !

! (Delta mirrorFor: #Palette) classSide methodsFor: 'debugging' !


debugging ^<Boolean>

	^PaletteDebug == true!

debugging: f <Boolean>

	PaletteDebug := f! !

! (Delta mirrorFor: #Palette) methodsFor: 'private-initialization' !


initFor: colors <SeqCltn[SolidPaint]>

	| lp <LOGPALETTE> |
	lp := LOGPALETTE new allocate: colors size.
	lp palVersion: 16r300;
		palNumEntries: colors size.
	1 to: colors size do:
		[ :i <Int> |
			| color <SolidPaint> entry <PALETTEENTRY> |
			color := colors at: i.
			entry := lp palPalEntryAt: i - 1.

			entry
				peRed: color red;
				peGreen: color green;
				peBlue: color blue;
				peFlags: Win32 PC_NOCOLLAPSE.	].

	win32Handle := {{<gdi Win32Handle CreatePalette> struct: lp}}.
	win32Handle isNull
		ifTrue: [ Win32 handleError ].! !

! (Delta mirrorFor: #Palette) methodsFor: 'control' !


release

	win32Handle notNil
		ifTrue: [	Palette debugging
							ifTrue: [ Platform errorStream show: 'Palette>>releasing'; cr.	].
						win32Handle win32DeleteObject.
						win32Handle := nil	]! !

! (Delta mirrorFor: #Palette) methodsFor: 'restricted-win32' !


realizeFor: hdc <HDC>

	Palette debugging
		ifTrue: [ Platform errorStream show: 'Palette>>realizing for: '; print: hdc; cr.	].

	{{<gdi ExternalProxy RealizePalette> hdc: hdc }}!

unrealize

	Palette debugging
		ifTrue: [ Platform errorStream show: 'Palette>>unrealizing'; cr.	].

	{{<gdi ExternalProxy UnrealizeObject>
			pal: self  win32Handle
	}} asBoolean
		ifFalse: [ Win32 handleError ].!

win32Handle ^<Win32Handle>

	^win32Handle! !

