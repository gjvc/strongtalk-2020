Delta define: #Session as: (
(Class subclassOf: 'InstanceCritical |> (ClassCritical |> Object)' instanceVariables: 'medium <Medium>
process <Process>
sessionWindow <Window>
			"When this window is closed, the session is terminated."

inputFocus <Visual>		"nil if no focus"
activeWindow <Window> "The window with the focus"

currentMsg <MSG>
			"If non-nil, then is the MSG that is currently being dispatched"

grabStack <Stack[UIEventHandler]>
			"A stack of handlers that should receive all events, or nil"
changing <Set[RelayoutTarget]>
			"The set of relayout targets that need to be checked"
prefs <IdentityDictionary[RelayoutTarget,SeqCltn[Region]]>
			"Dictionary recording for various relayout targets their old
				preferences.  This may hold more entries than changing,
				because it is also used to record the prefs of 
				parents of changing entries that do nott have cached prefs."

pendingForPaint <Set[Window]>
			"All of the windows/win32controls in windows of this session that have an unsatisifed
			  paint request pending.  Needed for frame rate checking."
nextPaintTime <Float>
			"When the next refresh interval comes up for any element of pendingForPaint "

modalWindowStack <Stack[Window]>
			"If there are any windows on this stack, the invariant is: all windows for the session
				other than the top window on this stack are disabled"
sessionActions <OrdCltn[[]]>
			"A collection of one-shot actions to do in the sessions process"
windows <VarDict[HWND,Window]>
windowBeingCreated <Window>
			"A horrible %hack so that the windows procedure can get the window being created, to
			 register it the first time through the event loop."
displayBuffer <HBITMAP>
displayBufferSize <Point>
bufferCanvas <Canvas>
longOpMonitor <Semaphore>
visualMonitor <Semaphore>
timers <VarDict[Win32Handle,Timer]>
blinkTimer <Timer>
blinkState <Boolean>') classVariables: 'GrabMonitor <Semaphore>
		DebugIncrementalLayout <Boolean>
		DebugInvalidation <Boolean>
		DebugEvents <Boolean>
		Sessions <VarDict[Process,Session]>
		LastProcess <Process>
			"key cache to speed up Sessions access"
		LastSession <Session>
			"value cache to speed up Sessions access"
		WndProc <APICallBack>
		') !

(Delta mirrorFor: #Session) revision: '$Revision: 1.13 $'!

(Delta mirrorFor: #Session) group: 'ui'!

(Delta mirrorFor: #Session)
comment: 
'A Session manages the event queue and the process for a group of related windows.
This allows you to have a different process for different groups of windows.
In addition, Sessions are the unit of ''modality''- i.e. modal windows lock
out other windows in their Session.

%todo: need to make more portable; ideally the mediums need to holds this stuff,
and all the win32 stuff in this and the win32control hierarchy should go there.

Tags: %User %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.
'!

! (Delta mirrorFor: #Session) classSide methodsFor: 'instance creation' !


in: med <Medium> do: blk <[Session]> ^<Instance>

	^super new initIn: med do: blk! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'private' !


grabMonitor ^<Semaphore>

"%hack: I think this monitor might be deadlocking and causing the frequent hangs
  we've been having.  So the following line
  disables it by just returning a new semaphore every
  time someone asks for one, so they can never actually wait.  See if this
  gets rid of the hang!!.  Theoretically this is unsafe, but I don't think any two things have
  ever asked for the grab at the same time before anyway"
^Semaphore forMutualExclusion.

	GrabMonitor isNil
		ifTrue: [	Processor uninterruptablyDo:
							[ GrabMonitor isNil
								ifTrue: [ GrabMonitor := Semaphore forMutualExclusion ].
							].
					 ].
	^GrabMonitor! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'debugging' !


debugEvents ^<Boolean>

	DebugEvents isNil
		ifTrue: [ DebugEvents := false. ].
	^DebugEvents
!

debugEvents: f <Boolean>

	DebugEvents := f!

debugIncrementalLayout ^<Boolean>

	DebugIncrementalLayout isNil
		ifTrue: [ DebugIncrementalLayout := false ].
	^DebugIncrementalLayout!

debugIncrementalLayout: f <Boolean>

	DebugIncrementalLayout := f!

debugInvalidation ^<Boolean>

	DebugInvalidation isNil
		ifTrue: [ DebugInvalidation := false. ].
	^DebugInvalidation
!

debugInvalidation: f <Boolean>

	DebugInvalidation := f! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'restricted' !


forProcess: p <Process>  ^<Session>

	"We don't use semaphores around Sessions accesses for speed"
	^Processor uninterruptablyDo:
		[	LastProcess == p
				ifTrue: [ LastSession ]
				ifFalse: [	LastProcess := p.
								LastSession := Sessions at: p	]
		].! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'initialization' !


initialize

	Sessions := Dictionary[Process,Session] new.! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'constants' !


PROCESS_ACTION ^<ExternalData>
	"This is posted when a session process action is queued using inProcessDo: if there are none already
		queued"

	^16r401! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'accessing' !


sessions ^<Cltn[Session]>
	"A collection of the active sessions.  This message and the result are thread-safe."
	
	^Processor uninterruptablyDo: [ Sessions asOrderedCollection ]! !

! (Delta mirrorFor: #Session) classSide methodsFor: 'accessing-restricted' !


sessionsMap ^<VarDict[Process,Session]>
	"The dictionary of active sessions.  Since this is shared across processes, and is
		extremely performance critical, access to it should be done uninterruptably, using
		(Processor uninterruptablyDo: [...]).  This is used rather than critical: because of the
		extreme performance required.   #sessions should be used by user code,
		which returns a copy that does not have to be protected."
	
	^Sessions! !

! (Delta mirrorFor: #Session) methodsFor: 'win32-control' !


aboutToDestroyWindow: w <Window>

	self hasModalWindow
		ifTrue: [	| newTop <Window> |
						self modalWindowStack remove: w
							ifAbsent: [ ^self ].
						self hasModalWindow
							ifTrue: [ self modalWindowStack top enabled: true; makeActive ]
							ifFalse: [ self windowsDo:
												[ :aw <Window> |
													aw enabled: true	].
											(self activeWindow == w and: [ w hasParent ])
												ifTrue: [ w parent makeActive ]].	]
!

creatingWindow: w <Window> do: f <[^Object]> 

	windowBeingCreated := w.
	f value.
	windowBeingCreated notNil
		ifTrue: [	"For some reason, the creation didn't send any messages to the window, so
							we have to register it here"
						self shouldNotHappen.
						self registerWindow: w handle: w win32Handle.	].
	windowBeingCreated := nil.!

debugEvents ^<Boolean>

	^self actualClass debugEvents!

findFocusIfNeededFor: wind <Window>

	self hasInputFocus
		ifFalse: [ wind topWindow findInputFocus ]!

handleIfFocusMsg: msgCode <ExternalData>
for: wind <Window>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	msgCode @= Win32 WM_KEYDOWN
		ifTrue: [	self findFocusIfNeededFor: wind.
						self keyDownEventWithWParam: wParam lParam: lParam 
																	toCancel: [^0].
						^0 ].
	msgCode @= Win32 WM_KEYUP
		ifTrue: [	self findFocusIfNeededFor: wind.
						self keyUpEventWithWParam: wParam lParam: lParam 
																	toCancel: [^0].
						^0 ].
	msgCode @= Win32 WM_CHAR
		ifTrue: [	self findFocusIfNeededFor: wind.
						self charEventWithWParam: wParam lParam: lParam 
																	toCancel: [^0].
						^0 ].
	^1!

lostCapture

	self hasGrab
		ifTrue: [	| old <Stack[UIEventHandler]> |
						old := self grabStack copy.
						self grabStack removeAll.
						old do: [ :grabber <UIEventHandler> |
											grabber addNonLocalCount: -1.
											grabber lostGrab ].
						self class grabMonitor signal.	].!

message: msg <MSG>

	self processSessionActions.

	Session debugEvents
			ifTrue: [ Platform errorStream
							show: 'queue event: ';
							show: (MSG descriptionOf: msg message asExternalProxy);
							show: ' window: ';
							print: msg hwnd;
							cr ].

	msg message @= Win32 WM_TIMER
		ifTrue: [ self timeoutFor: msg wParam.
						self updateLayoutsIfNeeded.
					 	^self ].
	msg message @= Session PROCESS_ACTION
		ifTrue: [ ^self ].		"The actions are processed already on every event"
	self checkPaintTime.

	(self visualMonitor criticalWouldBlock and: [ self msgIsOkDuringVisualCritical: msg message ])
		ifTrue: [	self dispatchMessage: msg.
						"we don't update layouts because that can't be needed (or done)
							here"	]
		ifFalse: [	self visualCritical:
							[ self	dispatchMessage: msg;
										updateLayoutsIfNeeded.	]
					 ]!

message: msgCode <ExternalData>
for: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	"This is where all the win32 messages are delivered to the per-session thread.  We
	  just figure out which window it is for, and then forward the message."

	"We have to treat the first message specially, since we have to register the window"
	windowBeingCreated notNil
		ifTrue: [	self registerWindow: windowBeingCreated handle: hwnd.
						windowBeingCreated := nil. ].

	^(self safeWindowFor: hwnd) message: msgCode for: hwnd wParam: wParam lParam: lParam!

unregisterTimer: t <Timer>

	self critical:
		[ self timers removeKey: t win32Handle ]!

unregisterWindow: w <Window>

	w = self sessionWindow
		ifTrue: [ self windowsDo:
							[ :otherWin <Window> |
								otherWin = self sessionWindow
									ifFalse: [ otherWin close ].
							]
					 ].
	self windows removeKey: w win32Handle.
	self windows isEmpty
		ifTrue: [ self postQuit ].!

withBufferCanvasFor: invalid <Rect> do: f <[Canvas, HBITMAP, ^X def]> ^<X>
	"Evaluate f with an canvas that draws to an off-screen
		bitmap, which is the second argument to the block,
		clipping to the specified invalid region, that is compatible with this medium"

	| can <Canvas> |
	can := self bufferCanvasWithMinimumExtent: invalid extent.

	"We negate the offset relative to the region to be drawn"
	can offset: invalid origin negated.
	can initClippingRectBeforeTranslation: (Point origin corner: invalid extent).


	f value: can value: self displayBuffer.

	"We don't release the canvas, since it is cached"!

wndProc ^<APICallBack>

	WndProc isNil
		ifTrue: [	WndProc := APICallBack
							register:
								[ :hwnd <ExternalProxy> :msg <SmallInteger> :wParam <ExternalData> :lParam <ExternalData> |

									(Session forProcess: Processor activeProcess)
											 message: msg for: hwnd wParam: wParam lParam: lParam ]
							parameters: (OrderedCollection[Class]
								with: ExternalProxy with: SmallInteger with: ExternalProxy with: ExternalProxy).	].
	^WndProc! !

! (Delta mirrorFor: #Session) methodsFor: 'private' !


blinkFocus

	self blinkState: self blinkState not.
	self hasInputFocus
		ifTrue: [ self inputFocus blinkFocus: self blinkState ].
!

blinkInterval ^<Float>

	"half a second"
	^0.5!

blinkState: f <Boolean>

	blinkState := f!

bufferCanvasWithMinimumExtent: p <Point> ^<Canvas>
	"Return a canvas that draws into a bitmap compatible with this medium
	  that is at least as large as p."

	| can <Canvas> |
	(displayBuffer notNil and: [ (displayBufferSize >= p) not ])
		ifTrue: [	bufferCanvas release.
						displayBuffer win32DeleteObject.
						displayBuffer := nil. ].
	displayBuffer isNil
		ifTrue: [	can := self medium newCanvas.
						[	displayBuffer := {{<gdi HBITMAP CreateCompatibleBitmap>
														hdc: can win32Handle
														width: p x asInteger
														height: p y asInteger }}.
							displayBuffer isNull
								ifTrue: [	displayBuffer := nil.
												Win32 handleError.	 ].
							displayBufferSize := p.

							bufferCanvas := HDC bufferingFor: can buffer: displayBuffer.

							] ensure: [ can release ].		].
	^bufferCanvas!

charEventWithWParam: wParam <ExternalData>
lParam: lParam <ExternalData>
toCancel: blk <AbortBlock>
^<ExternalData>

	| char <Character> ev <UIEvent> focus <Visual> repeatCount <Int> result <ExternalData> |
	self hasInputFocus
		ifFalse: [ blk value ].
	focus := self inputFocus.
	char := Character value: wParam asSmallInteger.
	ev := UIEvent
			forMsg: self currentMsg
			dispatch:
				[ :e <UIEvent> :h <UIEventHandler> |
					h	character: char
						focus: focus
						event: e ].
	ev repeatCount: (lParam externalBitAnd: self repeatCountMask) asSmallInteger.
	[ ev repeatCount > 0 ]
		whileTrue:
			[	ev repeatCount: ev repeatCount - 1.
				result := self sendFocusEvent: ev.
				ev repeatCount > 0
					ifTrue: [ Processor yield ].
				self processSessionActions; checkPaintTime. ].
	^result!

checkPaintTime
	"See if it is time yet for the next pending paint"

	| time <Float> |
	time := Time clockValue.
	time >= self nextPaintTime
		ifTrue: [	self resetNextPaintTime.
						self pendingForPaint copy
							do: [ :w <Window> |
									w checkPaintTime: time. ].	]!

createBlinkTimer

	self assert: [ blinkTimer isNil ].
	blinkTimer := self atIntervals: self blinkInterval do: [ self blinkFocus ].!

currentMsg ^<MSG>

	^currentMsg!

destroyBlinkTimer

	self assert: [ blinkTimer notNil ].
	blinkTimer release.
	blinkTimer := nil.!

dispatchMessage: m <MSG>

	{{<user ExternalProxy DispatchMessageA>
			window: m }}.!

displayBuffer ^<HBITMAP>

	^displayBuffer!

dumpIfWindow: w <Window|Win32Control> on: strm <CharOutputStream>

	(Window coerce: w else: [ ^self ]) dumpOn: strm!

getMessage: msg <MSG> ^<Boolean>

	| continue <Boolean> |
	continue := self getMessageWithoutIdling: msg.
	^continue
		onTrue: [  msg initializeSensorInfo ]!

getMessageWithoutIdling: msg <MSG> ^<Boolean>

	^{{<user ExternalProxy GetMessageA async>
			msg: msg arg: Win32 NULL arg: 0 arg: 0
	  }} asBoolean!

grabStack ^<Stack[Visual]>

	^grabStack!

grabStack: g <Stack[UIEventHandler]>

	grabStack := g!

hasModalWindow ^<Boolean>

	^modalWindowStack notNil and: [ modalWindowStack isEmpty not ]!

hasSessionActions ^<Boolean>

	^sessionActions notNil!

idleUntilGetMessage: msg <MSG> ^<Boolean>
"%remove"
	[	self hasIdleActions
			ifFalse: [ ^self getMessageWithoutIdling: msg ].
		{{<user ExternalProxy PeekMessageA>
					msg: msg
					arg: Win32 NULL
					filterMin: 0
					filterMax: 0
					remove: Win32 PM_REMOVE
		}} asBoolean
	 ] whileFalse:
		[	| action <[]> |
			action := self idleActions removeFirst.
			action value		].
	^msg message @~= Win32 WM_QUIT
!

initInProcess

	self register.
!

keyDownEventWithWParam: wParam <ExternalData>
lParam: lParam <ExternalData>
toCancel: blk <AbortBlock>
^<ExternalData>

	| keyValue <Symbol> ev <UIEvent> focus <Visual> repeatCount <Int> result <ExternalData> |
	self hasInputFocus
		ifFalse: [ blk value ].
	focus := self inputFocus.
	keyValue := self keyValueFor: wParam asSmallInteger ifAbsent: blk.
	ev := UIEvent
			forMsg: self currentMsg
			dispatch:
				[ :e <UIEvent> :h <UIEventHandler> |
					h	keyDown: keyValue
						focus: focus
						event: e ].
	ev repeatCount: (lParam externalBitAnd: self repeatCountMask) asSmallInteger.
	[ ev repeatCount > 0 ]
		whileTrue:
			[	ev repeatCount: ev repeatCount - 1.
				result := self sendFocusEvent: ev.
				ev repeatCount > 0
					ifTrue: [ Processor yield ].
				self processSessionActions; checkPaintTime. ].
	^result!

keyUpEventWithWParam: wParam <ExternalData>
lParam: lParam <ExternalData>
toCancel: blk <AbortBlock>
^<ExternalData>

	| keyValue <Symbol> ev <UIEvent> focus <Visual> repeatCount <Int> result <ExternalData> |
	self hasInputFocus
		ifFalse: [ blk value ].
	focus := self inputFocus.
	keyValue := self keyValueFor: wParam asSmallInteger ifAbsent: blk.
	ev := UIEvent
			forMsg: self currentMsg
			dispatch:
				[ :e <UIEvent> :h <UIEventHandler> |
					h	keyUp: keyValue
						focus: focus
						event: e ].
	ev repeatCount: (lParam externalBitAnd: self repeatCountMask) asSmallInteger.
	[ ev repeatCount > 0 ]
		whileTrue:
			[	ev repeatCount: ev repeatCount - 1.
				result := self sendFocusEvent: ev.
				self processSessionActions; checkPaintTime. ].
	^result!

keyValueFor: code <Int> ifAbsent: blk <AbortBlock> ^<Symbol>

	^MSG keyValueFor: code ifAbsent: blk!

longOpMonitor ^<Semaphore>

	^longOpMonitor!

modalWindowStack ^<Stack[Window]>

	modalWindowStack isNil
		ifTrue: [ modalWindowStack := OrderedCollection[Window] new. ].
	^modalWindowStack!

mouseEvent: type <Symbol> at: loc <Point> event: ev <UIEvent> ^<Boolean>

	self grabStack isEmpty
		ifFalse: [	
		ev isGrabbed: true.
						self grabStack bottomToTopDo:
							[ :grabber <UIEventHandler> |
								(grabber mouseEvent: type at: loc - grabber positionInTopWindow event: ev)
									ifTrue: [	ev isGrabbed: false.
													self updateLayoutsIfNeeded.
													^true ].
								self updateLayoutsIfNeeded.	 ].
						ev isGrabbed: false.	].
	^false!

msgIsOkDuringVisualCritical: msg <ExternalProxy>  ^<Boolean>

	^Win32 WM_PAINT @= msg
		or: [ Win32 WM_SETCURSOR @= msg
		or: [ Win32 WM_NCPAINT @= msg
		or: [ Win32 WM_ERASEBKGND @= msg
		or: [ 16r88 @= msg
		or: [ Win32 WM_GETTEXT @= msg	]]]]]!

nextPaintTime ^<Float>

	^nextPaintTime!

nextPaintTime: t <Float>

	nextPaintTime := t!

overflowQueueSize ^<Int>
	"Discard whatever events we can past this size"

	^20!

pendingForPaint ^<Set[Window]>

	^pendingForPaint!

postMessage: msgCode <ExternalData>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>

	{{<user ExternalProxy PostThreadMessageA>
		thread: self process win32Handle
		msg: msgCode
		wParam: wParam
		lParam: lParam
	}} asBoolean
		ifFalse: [ Win32 handleError ]!

postQuit

	{{<user ExternalProxy PostQuitMessage> status: 0}}!

process: p <Process>

	process := p!

processSessionActions

	"Pre check to avoid critical region when can"
	[ self hasSessionActions ]
		whileTrue: 
					[	"nil the actions before processing them to avoid mutation while iterating"
						| actions <Cltn[[]]> |
						self critical:
							[	self hasSessionActions
									ifTrue: [	actions := self sessionActions.  ].
								sessionActions := nil.
							].
						actions notNil
							ifTrue: [	actions
												do: [ :action <[]> |  action value ].
											self updateLayoutsIfNeeded.	 ].
					]!

register

	"We don't use semaphores around sessionsMap accesses for speed
		(This method doesn't have to be fast, but other types of Sessions
		access don't use a semaphore, so we can't here, too)"

	self process: Processor activeProcess.
	Processor uninterruptablyDo:
		[	Session sessionsMap at: self process put: self	]!

registerWindow: w <Window> handle: h <HWND>

	self windows at: h put: w.
!

release

	bufferCanvas notNil
		ifTrue: [	bufferCanvas release.
						bufferCanvas := nil. ].
	displayBuffer notNil
		ifTrue: [	displayBuffer win32DeleteObject.
						displayBuffer := nil. ].
	timers notNil
		ifTrue: [	timers do: [ :t <Timer> |  t release ].
						timers := nil. ].
	self unregister.!

repeatCountMask ^<Int>

	^16rFF!

resetNextPaintTime

	self nextPaintTime: Float maxVal!

run
	"This is the session's event loop"

	| msg <MSG> |
	[ self getMessage: self currentMsg ]
		whileTrue:
			[	self translateMessage: self currentMsg.
				self message: self currentMsg.   ].
	self release.!

safeWindowFor: h <HWND>  ^<Window>
	"Return the window that has or that contains the control that has the specified handle"

	^self topWindowFor: h ifAbsent: [ self shouldNotHappen ]!

sendFocusEvent: ev <UIEvent> ^<ExternalData>

	| result <Boolean> |
	ev isGrabbed: true.
	self grabStack bottomToTopDo:
		[ :grabber <UIEventHandler> |
			(ev dispatchTo: grabber)
				ifTrue: [	ev isGrabbed: false.
								self updateLayoutsIfNeeded.
								^0 ].
			self updateLayoutsIfNeeded.	 ].
	ev isGrabbed: false.
	result := ev dispatchTo: self activeWindow.
	self updateLayoutsIfNeeded.
	^result
		ifTrue: [ 0 ]
		ifFalse: [ 1 ]!

sessionActions ^<OrdCltn[[]]>
	"This must be asked for only in a critical region on the receiver"

	sessionActions isNil
		ifTrue: [ sessionActions := OrderedCollection[[]] new. ].
	^sessionActions!

setNoInputFocus
	"Forget the input focus, and inform it."

	self hasInputFocus
		ifTrue: [	inputFocus isFocus: false.
						inputFocus := nil.
						"We don't remove the active window because we need it
								to know where to look to find a new focus if we need one"		 ]!

timeoutFor: id <Win32Handle>

	| t <Timer> |
	self critical:
		[ t := self timers at: id ifAbsent: [ ^self ] ].
	t execute!

timers ^<VarDict[Win32Handle,Timer]>

	^timers!

topWindowFor: hwnd <HWND> ifAbsent: f <[^X def]>  ^<Window | X>

	^self windows at: hwnd
			ifAbsent: [	| h <HWND> |
								h := Window parentOf: hwnd.
								h isNull
									ifTrue: [ ^f value ]
									ifFalse: [ self topWindowFor: h ifAbsent: f  ] ]!

translateMessage: msg <MSG>

	{{<user ExternalProxy TranslateMessage>
			window: msg }}!

unregister

	"We don't use semaphores around Sessions accesses for speed
		(This method doesn't have to be fast, but other types of Sessions
		access don't use a semaphore, so we can't here, too)"
	self process: Processor activeProcess.
	Processor uninterruptablyDo:
		[	Session sessionsMap removeKey: self process ]!

updateLeaf: next <RelayoutTarget>

	changing remove: next.

	self debugIncrementalLayout
		ifTrue: [ Platform errorStream show: 'checking ', next class name; cr. ].	

	next checkLayout: (self oldPrefsFor: next).
	self assert: [ next prefsStatus = Visual valid ].!

updateLeaves
	"This is a single pass of the incremental layout algorithm.  We compute
		which elements of the changing set do not contain other elements (the leaves),
		and tell them to check their layout."

	| leaves <Set[RelayoutTarget]> checked <Set[RelayoutTarget]> |

	self debugIncrementalLayout
		ifTrue: [ Platform errorStream show: '-------------- pass'; cr. ].

	changing size = 1
		ifTrue: [ ^self updateLeaf: changing anElement ].

	leaves := changing copy.
	checked := Set[RelayoutTarget] new.
 	changing do:
		[ :el <RelayoutTarget> |
			el removeParentsFrom: leaves alreadyChecked: checked ].
	leaves do:
		[ :next <RelayoutTarget> |
			self updateLeaf: next	].!

visualMonitor ^<Semaphore>

	^visualMonitor!

windows ^<VarDict[HWND,Window]>

	^windows! !

! (Delta mirrorFor: #Session) methodsFor: 'window creation' !


newStandardWindow: name <Str>
for: vis <Visual>
^<StandardWindow>
	"Create a standard top-level window"

	^self medium
			newStandardWindow: name
			session: self
			for: vis! !

! (Delta mirrorFor: #Session) methodsFor: 'accessing' !


blinkState ^<Boolean>

	^blinkState!

hasChanging ^<Boolean>

	^changing notNil and: [ changing size > 0 ]!

medium ^<Medium>

	^medium!

oldPrefsFor: t <RelayoutTarget> ^<SeqCltn[Region]>
	"This can be sent by visuals whose layout state = needsRelayout."

	^prefs at: t!

process ^<Process>

	^process!

sessionWindow ^<Window>

	^sessionWindow!

sessionWindow: w <Window>

	sessionWindow := w! !

! (Delta mirrorFor: #Session) methodsFor: 'input focus' !


activeWindow ^<Window>

	^activeWindow!

activeWindow: w <Window>

	activeWindow := w!

hasActiveWindow ^<Boolean>

	^self activeWindow notNil!

hasInputFocus ^<Boolean>

	^inputFocus notNil!

inputFocus ^<Visual>

	^inputFocus!

inputFocus: f <Visual>
	"Record the input focus & do notification.  Callers are responsible for setting
	  the native window focus state."

	self hasInputFocus
		ifTrue: [ self setNoInputFocus ]
		ifFalse: [ self createBlinkTimer ].
	inputFocus := f.
	inputFocus isFocus: true.
	
	f nativeWindow setFocus.!

noInputFocus
	"Remove the input focus."

	self hasInputFocus
		ifTrue: [	self destroyBlinkTimer.
						self setNoInputFocus.		 ]! !

! (Delta mirrorFor: #Session) methodsFor: 'grabbing' !


addGrab: h <UIEventHandler> ^<Boolean>
	"Aquire the grab, which means h will be sent all events for this session
	  until #removeGrab: is sent for it.  There can be any number of grabbers at once; prior
	  grabbers get events first, and subsequent ones get the events they let through.
	  All grabbers must be in the same window; any grab that is not for the active window
	  will be suspended until the existing grabs are done if it is in another session; if it
	  is in the same session, the grab is denied, since it would cause a deadlock.
	  The return value indicates whether the grab was successfully added.

	  The grabber must be very careful to release the grab when it is done; especial care should
	  be taken that the grab is release in unexpected circumstances such as a parent detaching the
	  grabber.  This should be handled by keeping track of whether the grab is owned or not,
	  and releasing it if needed when #detaching.

	  The grabber must also be prepared to receive a #lostGrab message if its window loses the grab
	  involuntarily.  In such a case, the grab is removed automatically.

	  Note: The Session will transparently ensure that the grabber is registered as non-local (i.e. it
		will receive detached messages) while it is grabbing.
	  "

	self grabStack isEmpty
		ifTrue: [	self class grabMonitor wait.
						h topWindow setCapture.  ]
		ifFalse: [	h topWindow = self grabStack top topWindow
							ifFalse: [ ^false ] ].
	(self grabStack includes: h) 
		ifTrue: [ self error: 'Duplicate grabs not allowed' ].

	"Use a copy below in case the grab is being iterated over by a caller"
	self grabStack: (self grabStack copy push: h).
	h addNonLocalCount: 1.
	^true!

hasGrab ^<Visual>

	^self grabStack isEmpty not!

hasGrabFor: v <Visual> ^<Boolean>

	^self grabStack includes: v!

removeGrab: h <UIEventHandler>

	"We test to see if the grab is really held, so that the holder can avoid bookeeping
		for special case handling of lostGrab"
	(self hasGrabFor: h)
		ifFalse: [ ^self ].
		
	"Use a copy below in case the grab is being iterated over by a caller"
	self grabStack: ((self grabStack copy) remove: h; yourself).
	h addNonLocalCount: -1.
	self grabStack isEmpty
		ifTrue: [	h topWindow releaseCapture.
						self actualClass grabMonitor signal. ]! !

! (Delta mirrorFor: #Session) methodsFor: 'input device state' !


altPressed ^<Boolean>

	^self currentMsg altPressed!

ctrlPressed ^<Boolean>

	^self currentMsg ctrlPressed!

mouseButtonPressed: but <Symbol> ^<Boolean>
	"but must be one of #primary, #secondary, #middle"

	^self currentMsg mouseButtonPressed: but!

numLocked ^<Boolean>

	^self currentMsg numLocked!

primaryMouseButtonPressed ^<Boolean>

	^self currentMsg primaryMouseButtonPressed!

secondaryMouseButtonPressed ^<Boolean>

	^self currentMsg secondaryMouseButtonPressed!

shiftPressed ^<Boolean>

	^self currentMsg shiftPressed! !

! (Delta mirrorFor: #Session) methodsFor: 'control' !


addModalWindow: mw <Window>
	"Make w the only active window in this session.  The other windows
		will be re-enabled when w is destroyed"

	"%bug: in both this and addModalWindow:, we should keep track of
		the old enabled state for windows, rather than just enabling everything
		when we are done.  This bug would cause windows that were disabled by other
	    means than this mechanism to be
	    incorrectly enabled after the dialog boxs for the session are destroyed"

	self modalWindowStack push: mw.
	"make sure the modal window is created and active, so that MSWindows will remember
		the previous active window before we disable it"
	mw win32Handle; makeActive.

	self windowsDo:
		[ :w <Window> |
			w = mw
				ifFalse: [	w enabled: false ]	].!

atIntervals: interval <Float> do: blk <[]>  ^<Timer>
	"Register blk to be executed in the session process repeatedly every
		interval seconds, starting at interval seconds in the future.  A Timer object
		is returned that can be used to cancel execution of blk."

	^self critical:
		[	| t <Timer> |
			t := Timer atIntervals: interval do: blk in: self.
			self timers at: t win32Handle put: t.
			t
		]!

changing: t <RelayoutTarget>
	"Schedule t to have its preferences and layout checked by the
	  incremental layout mechanism.  The caller must also register
	  the preferences of t using #recordPrefsFor:"

	self hasChanging
		ifFalse: [ changing := Set[LayoutTarget] new. ].
	changing include: t.!

forkLongOperation: blk <[]>
	"Fork a background process to do a long ui operation.  This will disable
		all the session's windows so that user input is discarded, and will
		display the wait cursor for them.  The Session thread will
		continue, however, so if the
		operation needs to change information needed during painting,
		it should use a visualCritical: call to surround those sections
		within the blk"

	[ self longOpMonitor critical:
		[	| origState <VarDict[Window,Tuple[Boolean,Cursor]]> |
			origState := Dictionary[Window,Tuple[Boolean,Cursor]] new.
			self windowsDo:
				[ :w <Window> |
					origState at: w put: w enabled ,, w cursor.
					w	cursor: Cursor wait;
						enabled: false.	].
			blk value.
			self updateLayoutsIfNeeded.
			origState keysAndValuesDo:
				[ :w <Window> :state <Tuple[Boolean,Cursor]> |
					w cursor = Cursor wait
						ifTrue: [	"Then the op hasn't changed it"
										w cursor: state at2. ].
					w enabled: state at1.
					w processDeferredPainting. 	].
		 ].
	] fork!

inProcessDo: blk <[]>

	self critical:
		[	(self process isNil or: [ self process running ])
				ifTrue: [	self sessionActions add: blk.
								(self sessionActions size = 1 and: [ self process notNil ])
									ifTrue: [ self postMessage: Session PROCESS_ACTION wParam: 0 lParam: 0  ].
							  ].
		]!

modalDo: blk <[]>
	"This disables ALL windows for this session during the execution of blk.
		This is used before calling out to native dialog boxes that use a nested
		event loop, in situations where they only disable the owner window. "

	| oldState <VarDict[Window,Boolean]> |
	oldState := IdentityDictionary[Window,Boolean] new.
	self windowsDo:
		[ :w <Window> |
			oldState at: w put: w enabled.
			w enabled: false ].
	[ blk value ]
		ensure:
			[	self windowsDo:
					[ :w <Window> |
						(oldState includesKey: w)
							ifTrue: [ w enabled: (oldState at: w) ]		 ]].!

recordPrefsFor: t <RelayoutTarget>
	"record the current preferences of t for the incremental layout mechanism."

	prefs isNil
		ifTrue: [ prefs := IdentityDictionary[RelayoutTarget,SeqCltn[Region]] new ].
	(prefs includesKey: t)
		ifFalse: [ prefs at: t put: t prefs ].!

terminate
	"terminate the session.  This will close all remaining open windows unconditionally.
		Closing the session window will terminate the session process."

	self windowsDo:
		[ :w <Window> |
			w = self sessionWindow
				ifFalse: [ w close ].
		].
	self sessionWindow close.
	self unregister.!

updateLayoutsIfNeeded
	"This is the incremental layout/pref recalculation algorithm."

	(self debugIncrementalLayout and: [ self hasChanging ])
		ifTrue: [ Platform errorStream show: '-------------------------------------------------- incr. layout: '; cr. ].

	[ self hasChanging ]
		whileTrue: [	self updateLeaves ].

	"clear the set and preferences cache to clean up for next time"
	changing := nil.
	prefs := nil.!

visualCritical: blk <[]>
	"enter a critical region around access to the visuals contained in
		the session's windows.  This is used to synchronize concurrent
		painting and modification of a session's visuals."

	self visualMonitor critical: blk.!

visualCriticalWouldBlock ^<Boolean>

	^self visualMonitor criticalWouldBlock! !

! (Delta mirrorFor: #Session) methodsFor: 'frame rate control-restricted to window' !


needPaintAtTime: time <Float>
	"This is sent back by a window that already has a paint pending
		when a paint occurs for another window, just so we
		can recompute the smallest next paint time"

	self nextPaintTime: (self nextPaintTime min: time).!

paintOccuredFor: w <Window>

	self pendingForPaint remove: w ifAbsent: [].
!

schedulePaintFor: w <Window> at: time <Float>

	self pendingForPaint include: w.
	self needPaintAtTime: time.! !

! (Delta mirrorFor: #Session) methodsFor: 'debugging' !


debugIncrementalLayout ^<Boolean>

	^self class debugIncrementalLayout!

dumpAllBut: transcript <Window> on: strm <CharOutputStream>

	self windows do:
		[ :w <Window|Win32Control> |
			w ~~ transcript
				ifTrue: [ self dumpIfWindow: w on: strm.]	]!

dumpOn: strm <CharOutputStream>

	self windows do:
		[ :w <Window|Win32Control> |
			self dumpIfWindow: w on: strm.	]! !

! (Delta mirrorFor: #Session) methodsFor: 'iterating' !


windowsDo: blk <[Window]>

	self windows do: blk! !

! (Delta mirrorFor: #Session) methodsFor: 'private initialization' !


initIn: med <Medium> do: blk <[Session]>

	currentMsg := MSG new allocate.
	medium := med.
	grabStack := OrderedCollection[UIEventHandler] new.
	windows := Dictionary[HWND,Window] new.

	pendingForPaint := IdentitySet[Window] new.
	longOpMonitor := Semaphore forMutualExclusion.
	visualMonitor := Semaphore forMutualExclusion.
	timers := CustomDictionary[Win32Handle,Timer]
					withCompareBlock: [ :k1 <Win32Handle> :k2 <Win32Handle> |
														k1 @= k2 ]
					hashBlock: [ :k <Win32Handle> |
											k hash	].
	self blinkState: true.
	self resetNextPaintTime.
	[	self initInProcess.
		blk value: self.
		self run
	] fork.! !

