Delta define: #Interval as: (
(Class subclassOf: 'SequenceableCollection[Number]' instanceVariables: 'start <Number>
stop <Number>
increment <Number>
		')) !

(Delta mirrorFor: #Interval) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #Interval) group: 'base'!

(Delta mirrorFor: #Interval)
comment: 
'Intervals are SequenceableCollections that generate their contents on the fly as a progression
of numbers from a start number to a stop number, separated by a step number.  Usually, the
to:[by:]do: messages defined in the Number subclasses are used instead of Intervals
when just a control structure is needed, since they are much faster.

Note on strong typing issues:

The to:[by:]do: messages in the Number hierarchy are typed restrictively, in such a way that they
can only be used in non-coercive situations (i.e. where the start, stop, and step are all integers,
or all floats, etc.).  This is done to preserve the type of the iteration value passed to the iteration block
in the pure integer form, so that bit operations etc. can be performed etc.  This would not be possible
if Number was the type for the step.  Although this may seem restrictive, the following points should
be noted about this design:

	1) explicit coercions handle the vast majority of these cases;
		for example, use (j asFloat to: k asFloat by: 0.1) rather than
		 (j to: k by: 0.1) when j and k are typed as Numbers or Integers.
	2) this scheme is perfectly compatible with untyped code, since the typed versions will work correctly
	    even if called with arguments of mismatched numeric types, so that things like (1 to: 10 by: 0.1) will 
	    work, even though they don''t typecheck.
	3) If full coercive generality is needed in typesafe code, the Interval class can be used, which has been
	    designed using values of type Number, so that things like (1 to: 10 by: 0.1) are ok.  They cannot, however,
		preserve more detailed information about the kinds of numbers in the Interval.

Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.1 $
'!

! (Delta mirrorFor: #Interval) classSide methodsFor: 'instance creation' !


from: start <Number> to: stop <Number>  ^<Instance>

	^self from: start to: stop by: start unit!

from: start <Number> to: stop <Number> by: step <Number>  ^<Instance>

	^(super new) start: start; stop: stop; increment: step! !

! (Delta mirrorFor: #Interval) classSide methodsFor: 'testing' !


check: interv <Interval> against: seq <SeqCltn[Number]>

	| oc <OrdCltn[Number]> |
	self verify: interv hasSameElementsAndOrderAs: seq.

	oc := OrderedCollection[Number] new.
	interv do: [ :n <Number> | oc add: n ].
	[ oc hasSameElementsAndOrderAs: seq ] verify.

	"do the following just to exercise collection #hasSameElementsAs: a bit"
	[ interv hasSameElementsAs: seq ] verify.!

test

	self check: (1 to: 3) against: #(1 2 3);
			check: (-1 to: -3 by: -1) against: #(-1 -2 -3);
			check: (100 to: 1 by: -20) against: #(100 80 60 40 20);
			check: (100 to: 0 by: -20) against:  #(100 80 60 40 20 0);
			check: (1 to: 2 by: 3) against: #(1);
			check: (1 to: 2 by: 1) against: #(1 2);
			check: (1 to: 1 by: 1) against: #(1);
			check: (1 to: 2 by: 0.5) against: #(1 1.5 2);
			check: (1 to: 2 by: -1) against: #();
			check: (-1 to: -2 by: 1) against: #().!

verify: interv <Interval> hasSameElementsAndOrderAs: other <SeqCltn[Number]>

	| c <Int> |
	[interv size = other size] verify.
	1 to: interv size do:
		[ :i <Int> |
			[(interv at: i) = (other at: i)] verify.	].
	"now test using do:"
	c := 0.
	interv do:
		[ :i <Number> |
			c := c + 1.
			[i = (other at: c) ] verify  ].
	[ c = interv size ] verify.! !

! (Delta mirrorFor: #Interval) methodsFor: 'accessing' !


at: index <Int>  ^<Number>

	(self start - self stop) sign = self increment sign
		ifFalse: [	| value <Number> |
						value := self start + (self increment * (index - 1)).
						self increment positive
							ifTrue: [	( value between: self start and: self stop)
												ifTrue: [ ^value ]	]
							ifFalse: [	(value between: self stop and: self start)
												ifTrue: [ ^value ]	]	].
	self error: 'Index out-of-range'.!

do: fn <[Number]>

	| value <Number> incr <Number> stp <Number> |
	value := self start.
	incr := self increment.
	stp := self stop.
	incr positive
		ifTrue: [	[ value <= stp ]
							whileTrue: [	fn value: value.
												value := value + incr.	]	]
		ifFalse: [	[ value >= stp ]
							whileTrue: [ fn value: value.
												value := value + incr.	]	]!

increment ^<Number>

	^increment!

increment:  v <Number>

	increment := v!

size ^<Int>

	^((self stop - self start) // self increment) + 1 max: 0!

start ^<Number>

	^start!

start:  v <Number>

	start := v!

stop ^<Number>

	^stop!

stop:  v <Number>

	stop := v! !

! (Delta mirrorFor: #Interval) methodsFor: 'copying' !


copyWithSize: s <Int> ^<VarSeqCltn[EX]>
	{where EX is returnType of #anElement message of receiverType}

	self unimplemented! !

