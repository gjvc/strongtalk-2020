Delta define: #Glyph as: (
(Class subclassOf: 'Object' instanceVariables: '')) !

(Delta mirrorFor: #Glyph) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #Glyph) group: 'ui'!

(Delta mirrorFor: #Glyph)
comment: 
'A Glyph is a possibly shareable graphical object.  Visuals are Glyphs that
are NOT shareable; other kinds of Glyphs, such as CharacterGlyphs, are.

Because of this potential shareability, Glyphs need more information passed to
them during rendering, layout, etc, to indicate their context.  For this reason, Glyphs
do not directly support the Visual protocol, which assumes knowledge of context.
To use a Glyph as a visual, it is necessary to wrap it as a VisualGlyph.

Note that our definition of Glyph is slightly different than in systems such as Fresco(TM?):
shareability is an optional property of our Glyphs, which simplifies programming for
unshareable Glyphs like Visuals.

As a practical matter, most subclasses of Glyph (rather than things that simply support
the Glyph protocol) are shareable Glyphs, since otherwise they would be in the Visual
heirarchy. Thus, the methods in this class provide default behavior for shareable Glyphs.

Tags: %User %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.2 $
'!

! (Delta mirrorFor: #Glyph) methodsFor: 'geometry-local' !


allocation: r <Region> at: pos <Point> for: context <VisualGlyph>
	"Sets the allocation for the glyph (and do any layout necessary).  If the glyph desires the context
	  to keep track of the extent, then it is the responsibility of this method
	  to store the extent in the context."

	"By default for shareable Glyphs, do nothing"!

allocationFor: context <VisualGlyph>  ^<Region>

	self subclassResponsibility!

maxIn: m <Medium>  ^<Region>

	"By default, the max is the same as the natural region"
	^self naturalIn: m!

minIn: m <Medium>  ^<Region>

	"By default, the min is the same as the natural region"
	^self naturalIn: m!

naturalIn: m <Medium>  ^<Region>

	self subclassResponsibility!

naturalIn: m <Medium> at: proposedPosition <Point> ^<Region>
	"Like naturalIn:, but allows the receiver to take into
	  account a proposed position."

	^self naturalIn: m! !

! (Delta mirrorFor: #Glyph) methodsFor: 'accessing' !


asVisual ^<Visual>

	^VisualGlyph for: self!

id: i <Int>
	
	"Usually ignored"!

layoutStatus ^<Int>

	"By default, glyphs are always laid out"
	^Visual valid!

noParentFor: context <VisualGlyph>

	"By default do nothing"!

parent: p <VisualParent> id: childId <Int>

	"By default for shareable Glyphs, the parent and id are not stored"!

prefsStatus ^<Int>

	"By default, glyphs act like they have up-to-date preferences"
	^Visual valid!

session: s <Session>
	"Either this message or #parent:id: must be sent before
		asking for geometry preferences.  This is needed because
		if the glyph is a visual, it gets its medium from the session"

	"By default for shareable Glyphs, the session is not stored"! !

! (Delta mirrorFor: #Glyph) methodsFor: 'notification' !


detaching

	"By default, do nothing"! !

! (Delta mirrorFor: #Glyph) methodsFor: 'control' !


release

	"By default, do nothing.  This is sent every time that a containing
		visual is released, so this is NOT the right place to
		free resources for shared glyphs"! !

! (Delta mirrorFor: #Glyph) methodsFor: 'displaying' !


displayOn: can <Canvas> for: context <VisualGlyph>
	"corresponds to Visual>>displayOn:"

	can atOffset: context position
		do: [ self localDisplayOn: can for: context ]!

localDisplayOn: can <Canvas> for: context <VisualGlyph>
	"corresponds to Visual>>localDisplayOn:"

	self subclassResponsiblity! !

! (Delta mirrorFor: #Glyph) methodsFor: 'region ops' !


enclosedRectFor: context <VisualGlyph> ^<Rect>

	"default"
	^(self allocationFor: context) enclosedRect!

enclosingRectFor: context <VisualGlyph> ^<Rect>

	"default"
	^(self allocationFor: context) enclosingRect! !

! (Delta mirrorFor: #Glyph) methodsFor: 'testing' !


isFocusCandidate ^<Boolean>

	"By default, not a focus candidate"
	^false!

isNonLocal ^<Boolean>

	^false!

isRectangularAndOpaque ^<Boolean>

	self subclassResponsibility!

isSurelyRigid ^<Boolean>
	"Subclasses that are always rigid can override this to return true, to optimize some kinds of layouts.
		It is always permissible to return false, however; the caller can only use true for optimization."

	^false! !

! (Delta mirrorFor: #Glyph) methodsFor: 'geometry-nonlocal' !


adjustPositionTo: newPosition <Point>

	"By default, do nothing"!

nativePositionChanged

	"By default, do nothing"! !

! (Delta mirrorFor: #Glyph) methodsFor: 'event handling' !


character: c <Character> focus: focus <Visual> event: ev <UIEvent> for: context <VisualGlyph> ^<Boolean>

	"By default, do nothing"
	^false!

keyDown: key <Symbol> focus: focus <Visual> event: ev <UIEvent> for: context <VisualGlyph> ^<Boolean>

	"By default, do nothing"
	^false!

keyUp: key <Symbol> focus: focus <Visual> event: ev <UIEvent> for: context <VisualGlyph> ^<Boolean>

	"By default, do nothing"
	^false!

mouseEvent: type <Symbol> at: loc <Point>  event: ev <UIEvent> for: context <VisualGlyph> ^<Boolean>

	"By default, do nothing"
	^false! !

! (Delta mirrorFor: #Glyph) methodsFor: 'input focus' !


focusCandidatesDo: blk <[Visual]>

	"Only visuals can be the input focus"! !

! (Delta mirrorFor: #Glyph) methodsFor: 'copying' !


copy ^<Instance>

	"Subclasses of Glyph are shareable, and should also probably be immutable"
	^self! !

! (Delta mirrorFor: #Glyph) methodsFor: 'debugging' !


dumpOn: strm <CharOutputStream> indent: level <Int>

	level timesRepeat: [ strm show: '    ' ].
	strm show: self class name.
	strm cr.! !

! (Delta mirrorFor: #Glyph) methodsFor: 'core sampler' !


drillAt: loc <Point> for: sampler <CoreSampler>
	| child <Visual> |

	sampler record: self! !

