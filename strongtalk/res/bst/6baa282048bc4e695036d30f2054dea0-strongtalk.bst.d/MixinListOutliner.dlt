Delta define: #MixinListOutliner as: (
(Class subclassOf: 'MirrorListOutliner[MixinDeclMirror]' instanceVariables: '')) !

(Delta mirrorFor: #MixinListOutliner) revision: '$Revision: 1.4 $'!

(Delta mirrorFor: #MixinListOutliner) group: 'outliner'!

(Delta mirrorFor: #MixinListOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #MixinListOutliner) methodsFor: 'private' !


computeWorldList ^ <OrdCltn[MixinDeclMirror]>

	| result <SortedCollection[MixinDeclMirror]> |
	result := SortedCollection[MixinDeclMirror] 
					sortBlock: [ :m1 <MixinDeclMirror> :m2 <MixinDeclMirror> | m1 name <= m2 name ].
	Smalltalk mixinsDo: [ :m <Mixin> | result add: (MixinDeclMirror on: m) ].
	^result asOrderedCollection!

labelPainter ^<Painter>

	^self mixinPainter! !

! (Delta mirrorFor: #MixinListOutliner) methodsFor: 'accessing' !


entryName ^ <Str>

	^'mixin'!

windowTitle ^ <Str>

	^'Mixins'! !

! (Delta mirrorFor: #MixinListOutliner) methodsFor: 'menus' !


fileMenu ^ <Menu>

	^super fileMenu
		add: (MenuAction new
					name: '&Add new mixin';
					action: [ self addNewMixin ] )!

hasMenu ^<Boolean>

	^true!

menuBar ^ <Menu>

	^Menu new
		add: self fileMenu;
		add: self typecheckingMenu!

typecheckingMenu ^ <Menu>

^Menu new name: 'Typecheck';
    add: (MenuAction new
                  name: 'Typecheck all mixins';
                  action: [self typecheckAll]);
    add: (MenuAction new
                  name: 'Typecheck interfaces of all mixins';
                  action: [self typecheckAllInterfaces]);
    add: (MenuAction new
                  name: 'Typecheck definitions of all mixins';
                  action: [self typecheckAllDefs])
! !

! (Delta mirrorFor: #MixinListOutliner) methodsFor: 'control' !


addNewMixin

	self
		launchDefinitionDialogWithPainter: self mixinPainter
		title: 'Add new mixin'
		constructor: [ :name <Symbol> |
			Smalltalk define: name as:  (Mixin superclassType: 'Object' body: Class delta) ]
!

typecheckAll

self typecheckAction:[
											self list do:[: m <MixinDeclMirror> |
											 					m typecheck.
																m classSide typecheck.
																].
											]
title: 'Typechecking all mixins'.!

typecheckAllInterfaces

self typecheckAction:[
											self list do:[: m <MixinDeclMirror> |
											 					m typecheckInterface.
																m classSide typecheckInterface.
																].
											]
title: 'Typechecking all mixin interfaces'.! !

! (Delta mirrorFor: #MixinListOutliner) methodsFor: 'dependencies' !


update: aspect <Object> with: value <Object>

	self inSessionProcessDo: [
		((aspect = #addGlobal or: [aspect = #removeGlobal]) and: [ ClassMixin = value at2 class ])
			ifTrue: [	self update ] ]! !

