Delta define: #DeltaDLLCall as: (
(Class subclassOf: 'DeltaSend' instanceVariables: 'dll function proxy async ')) !

(Delta mirrorFor: #DeltaDLLCall) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #DeltaDLLCall) group: 'ast'!

(Delta mirrorFor: #DeltaDLLCall)
comment: 
'Generated by the rewriter.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaDLLCall) methodsFor: 'Unclassified' !


apply: aTool <DeltaTool > ^ <Self>
    aTool dllCallNode: self!

async
	^ async!

checkArgsAgainstSignature
"Private"
"Since we don't have a declaration to check against, we check all arguments against
the type ExternalProxy | Integer"

    | i <Int>    formal <ObjectType>  |

i := 0.
formal := DeltaUnionType new type1: (DeltaTypeId new setId: #ExternalProxy; scope: DeltaGlobals)
                                                             type2: (DeltaTypeId new setId: #Integer; scope: DeltaGlobals).
self args do:
 [:actual <ObjectType>  |
 i := i + 1.
 (actual type subtypeOf: formal assuming: DeltaGlobalTrail)
	ifFalse:[self reportError: (DeltaSendArgumentNotSubtypesError new argument: i; actualName: actual type name; formalName:  formal name)]
 ].


!

dll ^ <Symbol>
    ^ dll!

function ^ <Symbol>
    ^ function!

isDLLCallNode ^ <Boolean>
    ^ true!

komment
    "Generated by the rewriter."!

msg
    ^ msg!

proxy ^ <DeltaVariable|DeltaLiteral>
    ^ proxy!

recv ^ <Self>
    "locate some object representing the DLL decl?"!

to: dllName <Symbol >send: aMsg <DeltaMessage >called: functionName <Symbol >return: proxyClass <DeltaVariable|DeltaLiteral > async: asyncCall  ^ <Self>
	self assert: [ dllName isSymbol ].
	self assert: [ aMsg isMessageNode ].
	self assert: [ functionName isSymbol ].
	self assert: [ asyncCall isBoolean ].
	dll := dllName.
	msg := aMsg.
	function := functionName.
	proxy := proxyClass.
	async := asyncCall!

type ^ <ObjectType>
" 
Check the arguments, then return the type defined by the name of  the proxy. 
"
   self checkArgsAgainstSignature.
    ^DeltaTypeId new setId: proxy name; scope: DeltaGlobals! !

