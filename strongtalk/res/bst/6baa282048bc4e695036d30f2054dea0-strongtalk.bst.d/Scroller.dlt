Delta define: #Scroller as: (
(Class subclassOf: 'OverlappingVisual' instanceVariables: 'xScrollState <ScrollState>
			"If nil, then do not show x scrollbar"
yScrollState <ScrollState>
			"If nil, then do not show y scrollbar"
			useContinuousScroll <Boolean>
			"If true, then scroll continuously while the thumb is being tracked"
viewport <Viewport>
			"If this is non-nil, then the part is a viewport, and this is it"
		') classVariables: 'HScrollbarHeight <Int>
VScrollbarWidth <Int>
		') !

(Delta mirrorFor: #Scroller) revision: '$Revision: 1.4 $'!

(Delta mirrorFor: #Scroller) group: 'ui'!

(Delta mirrorFor: #Scroller)
comment: 
'A Scroller displays scrollbars around its optional part.  Because scrolling is accomplished
differently for different applications, scrolling is accomplished indirectly, using instances
of ScrollState, which syncronize the scrolled view (usually a Viewport) with the Scroller.
In other words, the Scroller is very simple: it allocates its part to be the same size as itself,
and simply syncronizes (both ways) the scrollbars with the vertical and horizontal ScrollStates.
It is up to some other dependent of the ScrollState to actually accomplish the scrolling (see
Viewport).

Tags: %User %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.4 
'!

! (Delta mirrorFor: #Scroller) classSide methodsFor: 'instance creation' !


horizontalViewportFor: v <Visual>^<Scroller>
	"This is a convenience method that creates a Scroller on a Viewport containing v, with
		a horizontal scrollbar"

	^self viewportFor: v vertical: false horizontal: true!

verticalViewportFor: v <Visual>^<Scroller>
	"This is a convenience method that creates a Scroller on a Viewport containing v, with
		a vertical scrollbar"

	^self viewportFor: v vertical: true horizontal: false!

viewportFor: v <Visual> ^<Scroller>
	"This is a convenience method that creates a Scroller on a Viewport containing v, with
		both vertical and horizontal scrollbars"

	^self viewportFor: v vertical: true horizontal: true!

viewportFor: v <Visual> vertical: vert <Boolean> horizontal: horiz <Boolean>^<Scroller>
	"This is a convenience method that creates a Scroller on a Viewport containing v."

	| vp <Viewport> inst <Scroller[Viewport]> |

	inst := Scroller new.
	vp := Viewport new.
	vp notForScroller: false.
	vp client: v.
	inst viewport: vp.

	vert
		ifTrue: [ inst yScrollState: vp yScrollState ]
		ifFalse: [ vp constrainY: true ].
	horiz
		ifTrue: [ inst xScrollState: vp xScrollState ]
		ifFalse: [ vp constrainX: true ].

	^inst! !

! (Delta mirrorFor: #Scroller) classSide methodsFor: 'constants' !


horizontalScrollBarDefaultHeight ^<Int>

	HScrollbarHeight isNil
		ifTrue: [ HScrollbarHeight := {{<user ExternalProxy GetSystemMetrics>
						metric: Win32 SM_CYHSCROLL}} asSmallInteger	].
	^HScrollbarHeight!

verticalScrollBarDefaultWidth ^<Int>

	VScrollbarWidth isNil
		ifTrue: [ VScrollbarWidth := {{<user ExternalProxy GetSystemMetrics>
						metric: Win32 SM_CXVSCROLL}} asSmallInteger	].
	^VScrollbarWidth! !

! (Delta mirrorFor: #Scroller) methodsFor: 'initialization' !


initialize

	super initialize.
	self useContinuousScroll: true.
	"self cursor: Cursor arrow."!

useContinuousScroll: f <Boolean>

	useContinuousScroll := f!

viewport: v <Viewport>

	viewport := v.
	self part: v!

xScrollState: sc <ScrollState>

	xScrollState notNil
		ifTrue: [ xScrollState removeDependent: self ].
	xScrollState := sc.
	sc addDependent: self.!

yScrollState: sc <ScrollState>

	yScrollState notNil
		ifTrue: [ yScrollState removeDependent: self ].
	yScrollState := sc.
	sc addDependent: self.! !

! (Delta mirrorFor: #Scroller) methodsFor: 'accessing' !


hasXScrollState ^<ScrollState>

		^xScrollState notNil!

hasYScrollState ^<ScrollState>

		^yScrollState notNil!

useContinuousGrid

	self xScrollState notNil
		ifTrue: [ self xScrollState useContinuousGrid ].
	self yScrollState notNil
		ifTrue: [ self yScrollState useContinuousGrid ].!

useContinuousScroll ^<Boolean>

	^useContinuousScroll!

viewport ^<Viewport>

	^viewport!

xScrollBarShown ^<Boolean>
	"true if the x scrollbar is visible"

	^self hasXScrollState and: [ self xScrollState shown < self xScrollState range ]!

xScrollState ^<ScrollState>

		^xScrollState!

yScrollBarShown ^<Boolean>
	"true if the x scrollbar is visible"

	^self hasYScrollState and: [ self yScrollState shown < self yScrollState range ]!

yScrollState ^<ScrollState>

		^yScrollState! !

! (Delta mirrorFor: #Scroller) methodsFor: 'private' !


buildWin32Handle

	super buildWin32Handle.

	#(range scrollPosition shown)
		do: [ :aspect <Symbol> |
				self hasXScrollState
					ifTrue: [ self update: aspect forScroller: self xScrollState redraw: false ]
					ifFalse: [ self hideScrollBar: Win32 SB_HORZ ].
				self hasYScrollState
					ifTrue: [ self update: aspect forScroller: self yScrollState redraw: false ]
					ifFalse: [ self hideScrollBar: Win32 SB_VERT ].	].

	self visible: true.!

checkShown
	"Make sure the scroll state shown value has been adjusted for any reduced visibility due to 
	  visible scrollbars"

	| shown <Int> adjusted <Boolean> |
	"We compute a fixed point below, since the x and y computations affect each other.  There is probably a
		faster algorithm, but this is easy, correct, and not in a performance critical spot"

	[	adjusted := false.
		(self hasYScrollState and: [  (shown := self computedYShown) ~= self yScrollState shown ])
			ifTrue: [	adjusted := true.
							self yScrollState shown: shown ].
		(self hasXScrollState and: [  (shown := self computedXShown) ~= self xScrollState shown ])
			ifTrue: [	adjusted := true.
							self xScrollState shown: shown  ].
		adjusted ] whileTrue.!

computedXShown ^<Int>

	^self yScrollBarShown
		ifFalse: [ self allocation enclosedRect width ]
		ifTrue: [ self allocation enclosedRect width - self actualClass verticalScrollBarDefaultWidth ]!

computedYShown ^<Int>

	^self xScrollBarShown
		ifFalse: [ self allocation enclosedRect height ]
		ifTrue: [ self allocation enclosedRect height - self actualClass horizontalScrollBarDefaultHeight ]!

createVisible ^<Boolean>

	^false!

hideScrollBar: which <ExternalData> 

	{{<user ExternalProxy ShowScrollBar>
		hwnd: self win32Handle
		which: which
		show: false asExternalData}} asBoolean
	 ifFalse: [ Win32 handleError ]!

oldcheckShown
	"Make sure the scroll state shown value has been adjusted for any reduced visibility due to 
	  visible scrollbars"

	| shown <Int> adjusted <Boolean> |
	"We have to do a fixed point here, since these two computations affect each other"

	[	adjusted := false.
		(self hasYScrollState and: [  (shown := self computedYShown) < self yScrollState shown ])
			ifTrue: [	Transcript show: 'computed y shown = '; print: shown; show: ' recorded shown = '; 
								print: self yScrollState shown; cr.
							adjusted := true.
							self yScrollState shown: shown ].
		(self hasXScrollState and: [  (shown := self computedXShown) < self xScrollState shown ])
			ifTrue: [	Transcript show: 'computed x shown = '; print: shown; show: ' recorded shown = '; 
								print: self xScrollState shown; cr.
							adjusted := true.
							self xScrollState shown: shown  ].
		adjusted ] whileTrue.!

showState

	self showStateFor: Win32 SB_HORZ; showStateFor: Win32 SB_VERT.!

showStateFor: which <ExternalData>

	| info <SCROLLINFO> |

	self layoutStatus = Visual valid
		ifFalse: [ ^self ].

	info := SCROLLINFO new allocateZeroed.
	info cbSize: info structureSize.
	info fMask: 16rFFFF.

	"["
{{<user ExternalProxy GetScrollInfo>
		hwnd: self win32Handle
		fnBar: which
		lpsi: info }} "asBoolean] test".

	
	Transcript show: (which = Win32 SB_HORZ ifTrue: [ ' horiz ' ] ifFalse: [ ' vert ' ]);
		show: ' min = '; print: info nMin;
		show: ' max = '; print: info nMax;
		show: ' pos = '; print: info nPos;
		show: ' page = '; print: info nPage; cr.

	info free.!

update: aspect <Symbol> forScroller: s <Object> redraw: redraw <Boolean>

	| info <SCROLLINFO> which <ExternalData> scroller <ScrollState> |

	self hasWin32Handle
		ifFalse: [ ^self ].

	s == self xScrollState
		ifTrue: [	which := Win32 SB_HORZ. 
						scroller := self xScrollState. ]
		ifFalse: [	which := Win32 SB_VERT. 
						scroller := self yScrollState. ].

	aspect ~= #scrollPosition
		ifTrue: [	self checkShown.
						"%hack: we try to avoid having scrollbars temporarily appear pending
							the scroller growing, by trying to detect when this is happening because
							of a containing viewport in the process of incremental layout
							"
						(scroller isFullyVisible not
									and: [ self viewport notNil
									and: [ self viewport layoutStatus = Visual needsRelayout ]])
							ifTrue: [	"force later incr. layout of self, which will cause the
												scroller to be updated then"
											self changing.
											^self	].
						].

	info := SCROLLINFO new allocateZeroed.
	info cbSize: info structureSize.

	info fMask: ((Win32 SIF_RANGE externalBitOr: Win32 SIF_POS)
						externalBitOr: Win32 SIF_PAGE);
			nMin: 0;
			nMax: scroller range - 1;
			nPage: scroller shown;
			nPos: scroller scrollPosition.

	{{<user ExternalProxy SetScrollInfo>
		hwnd: self win32Handle
		fnBar: which
		lpsi: info
		fRedraw: true asExternalData }}.
	info free.!

updateWindowDimensions
	"set the control's native size and position"

	self hasWin32Handle
		ifTrue: [	self visible: false.
						super updateWindowDimensions.
						self visible: true ]
		ifFalse: [ super updateWindowDimensions ]!

win32Style ^<ExternalData>

	| s <ExternalData> |
	s := super win32Style.
	self hasXScrollState
		ifTrue: [ s := s externalBitOr: Win32 WS_HSCROLL. ].
	self hasYScrollState
		ifFalse: [ s := s externalBitOr: Win32 WS_VSCROLL ].
	^s! !

! (Delta mirrorFor: #Scroller) methodsFor: 'restricted-win32' !


handleMouseWheelWithWParam: wParam <ExternalData>    ^<ExternalData>

	| wheelDist <Int> dist <Int> state <ScrollState> startpos <Int> 
	  candidate <Int> |
	wheelDist := wParam asExternalProxy highSigned.
	
	"The dist is in bogus units of 120 per wheel increment on current mice, so let's do something	  that would be equivalent to moving about 1 text line for each click.  Let's guestimate for
	  now that 1 wheel increment is about 40 pixels, so 120/40=3."
	dist := wheelDist negated // 3.
	self scrollMeOrAParentBy: dist vertical: true.
	^0
	!

handleScrollVertical: flag <Boolean>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	| state <ScrollState> op <Int> |
	op := wParam asExternalProxy low.
	state := flag ifTrue: [ self yScrollState ] ifFalse: [ self xScrollState ].
	"((self continuousScroll not and: [ op = Win32 SB_THUMBPOSITION ])
			or: [ self continuousScroll and: [" op = Win32 SB_THUMBTRACK" ] ])"
		ifTrue: [	| pos <Int> |
						pos := wParam asExternalProxy high.
						state scrollPosition: pos.
						^0	].
	op = Win32 SB_LINEUP
		ifTrue: [	state lineBack.
						^0 ].
	op = Win32 SB_LINEDOWN
		ifTrue: [	state lineForward.
						^0 ].
	op = Win32 SB_PAGEUP
		ifTrue: [	state pageBack.
						^0 ].
	op = Win32 SB_PAGEDOWN
		ifTrue: [	state pageForward.
						^0 ].
	"Ignore all others"
	^0!

message: msgCode <ExternalData>
for: hwnd <HWND>
wParam: wParam <ExternalData>
lParam: lParam <ExternalData>
^<ExternalData>

	msgCode @= Win32 WM_VSCROLL
		ifTrue: [	self debugTest: msgCode for: hwnd.
						^self handleScrollVertical: true wParam: wParam lParam: lParam ].
	msgCode @= Win32 WM_MOUSEWHEEL
		ifTrue: [	self debugTest: msgCode for: hwnd.
						^self handleMouseWheelWithWParam: wParam ].
	msgCode @= Win32 WM_HSCROLL
		ifTrue: [	self debugTest: msgCode for: hwnd.
						^self handleScrollVertical: false wParam: wParam lParam: lParam ].

	^super message: msgCode for: hwnd wParam: wParam lParam: lParam! !

! (Delta mirrorFor: #Scroller) methodsFor: 'updating' !


update: aspect <Symbol> with: value <Object>

	| which <ExternalData> |
	super update: aspect with: value.
	
	(aspect = #range
			or: [aspect = #scrollPosition
			or: [aspect = #shown
			or: [ aspect = #all ]]])
		ifTrue: [ self update: aspect forScroller: value redraw: true ]! !

! (Delta mirrorFor: #Scroller) methodsFor: 'displaying' !


localDisplayOn: can <Canvas>

	self viewport notNil
		ifTrue: [ can subwindowsToDisplay add: self viewport ]
		ifFalse: [ super localDisplayOn: can ]! !

! (Delta mirrorFor: #Scroller) methodsFor: 'control' !


scrollMeOrAParentBy: distance <Int> vertical: vertical <Boolean>

	self yScrollState isFullyVisible
		ifFalse: [	| state <ScrollState> startpos <Int> candidate <Int> |
						vertical ifFalse: [ self unimplemented ].  "support only scrollwheels right now"
						state := self yScrollState.
						candidate := startpos := state scrollPosition.

						candidate := candidate + distance.
						state scrollPosition: candidate.
						state scrollPosition = startpos
							ifTrue: [ distance negative
											ifTrue: [ state lineBack ]
											ifFalse: [ state lineForward ].	].	]
		ifTrue: [ super scrollMeOrAParentBy: distance vertical: vertical ]
! !

