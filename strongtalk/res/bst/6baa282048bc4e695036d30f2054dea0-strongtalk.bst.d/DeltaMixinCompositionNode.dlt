Delta define: #DeltaMixinCompositionNode as: (
(Class subclassOf: 'DeltaMixinNode' instanceVariables: '')) !

(Delta mirrorFor: #DeltaMixinCompositionNode) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaMixinCompositionNode) group: 'ast'!

(Delta mirrorFor: #DeltaMixinCompositionNode)
comment: 
'This node represents the AST for a mixin composition
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaMixinCompositionNode) methodsFor: 'Unclassified' !


abstract ^ <Boolean>
    ^self oMixin abstract!

apply: tool <DeltaASTTool>

tool mixinCompositionNode: self!

asSide ^ <Side>
    self subclassResponsibility!

branded ^ <Boolean>
    ^self oMixin branded!

declaredType ^ <MixinType>
    | mt1 <MixinType>  mt2 <MixinType>  |

mt1 := self oMixin declaredType.
mt2 := self iMixin declaredType.
^DeltaMixinType new bound: mt2 bound delta: (mt1 delta override: mt2 delta)!

extensionsAreSubtypes ^ <Boolean>
    ^self oMixin extensionsAreSubtypes!

firstClassRepType  ^ <ObjectType>

   self subclassResponsibility!

iMixin ^ <Mixin>
    ^self filteree iMixin substitute: self substitution!

inputMixin: im <Mixin >outputMixin: om <Mixin > ^ <Self>

self filter:(BasicMixinCompositionData new inputMixin: im outputMixin: om)
         using: DeltaSubstitution new initialize.!

komment

"This node represents the AST for a mixin composition"!

messages ^ <Dict[Symbol,Message]>

   ^self oMixin messages!

methods ^ <Dict[Symbol,Method]>
   ^self oMixin methods!

mixinObj ^ <MixinComposition>

"Return the mixin I denote"

^MixinComposition new inputMixin: self iMixin mixinObj
                                                         outputMixin: self oMixin mixinObj!

monotonic ^ <Boolean>
    ^self oMixin monotonic!

name

^(self iMixin name, '*', self oMixin name) asSymbol!

oMixin ^ <Mixin>
    ^self filteree oMixin substitute: self substitution!

protocolForInvocation: i <MixinInvocationNode> ^ <Protocol>

"Still unimplemented"
self deltaHack.!

subtype ^ <Boolean>
    ^self oMixin subtype!

superclassType ^ <ClassType>
    ^self iMixin superclassType!

supportedProtocol ^ <Protocol>
    ^self oMixin supportedProtocol!

type ^ <MixinType>
    | mt1 <MixinType>  mt2 <MixinType>   |

mt1 := self oMixin type.
mt2 := self iMixin type.
(self oMixin |> (self iMixin |> (DeltaClassTypeDecl new type: mt2 bound))) type.
^DeltaMixinType new bound: mt2 bound delta: (mt1 delta override: mt2 delta)!

typecheck ^ <MixinType>
    | mt2 <MixinType>   |

mt2 := self iMixin declaredType.
(self oMixin |> (self iMixin |> (DeltaClassTypeDecl new type: mt2 bound))) type.!

untypedName  ^ <Symbol>

self halt.!

varDecls ^ <Dict[Symbol,VarDecl]>
     ^self oMixin varDecls!

wellFormed ^ <Boolean>

"should test if myMixin is a mixin and myClass is a class"

^self myMixin wellFormed and:[self myClass wellFormed].! !

