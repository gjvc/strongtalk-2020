Delta define: #UIEvent as: (
(Class subclassOf: 'Object' instanceVariables: 'dispatch <[UIEvent, UIEventHandler]>
msg <MSG>
isGrabbed <Boolean>
			"true when the event is being delivered to a grabber"

repeatCount <Int>
			"The number of additional times this event needs to be delivered.  This is usually used
			  for key repeat on focus events.  Repeat keystrokes can be absorbed by the input
				focus by setting this count to 0 when an event is received."
		')) !

(Delta mirrorFor: #UIEvent) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #UIEvent) group: 'ui'!

(Delta mirrorFor: #UIEvent)
comment: 
'User interface events.

Tags: %UI %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #UIEvent) classSide methodsFor: 'instance creation' !


forMsg: m <MSG> dispatch: d <[UIEvent, UIEventHandler]> ^<Instance>

	^super new initialize msg: m; dispatch: d! !

! (Delta mirrorFor: #UIEvent) methodsFor: 'accessing' !


dispatch ^<[UIEvent, UIEventHandler]>

	^dispatch!

isGrabbed ^<Boolean>

	^isGrabbed!

isGrabbed: f <Boolean>

	isGrabbed := f!

msg ^<MSG>

	^msg!

repeatCount ^<Int>

	^repeatCount!

repeatCount: c ^<Int>

	repeatCount := c!

time ^<Int>

	^self msg time asInteger! !

! (Delta mirrorFor: #UIEvent) methodsFor: 'control' !


dispatchTo: h <UIEventHandler> ^<Boolean>

	^self dispatch value: self value: h! !

! (Delta mirrorFor: #UIEvent) methodsFor: 'initialization' !


dispatch: d <[UIEvent, UIEventHandler]>
	dispatch := d!

initialize

	isGrabbed := false.
	repeatCount := 1.!

msg: m <MSG>

	msg := m! !

! (Delta mirrorFor: #UIEvent) methodsFor: 'input device state' !


altPressed ^<Boolean>

	^self msg altPressed!

ctrlPressed ^<Boolean>

	^self msg ctrlPressed!

mouseButtonPressed: but <Symbol> ^<Boolean>
	"but must be one of #primary, #secondary, #middle"

	^self msg mouseButtonPressed: but!

numLocked ^<Boolean>

	^self msg numLocked!

primaryMouseButtonPressed ^<Boolean>

	^self msg primaryMouseButtonPressed!

secondaryMouseButtonPressed ^<Boolean>

	^self msg secondaryMouseButtonPressed!

shiftPressed ^<Boolean>

	^self msg shiftPressed! !

