Delta define: #Strength as: (
(Class subclassOf: 'DeltaBlue' instanceVariables: 'symbolicValue arithmeticValue') classVariables: 'AbsoluteStrongest AbsoluteWeakest Required StrengthConstants StrengthTable') !

(Delta mirrorFor: #Strength) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #Strength) group: 'benchmark'!

(Delta mirrorFor: #Strength)
comment: 
'Strengths are used to measure the relative importance of constraints. The hierarchy of available strengths is determined by the class variable StrengthTable (see my class initialization method). Because Strengths are invariant, references to Strength instances are shared (i.e. all references to "Strength of: #required" point to a single, shared instance). New strengths may be inserted in the strength hierarchy without disrupting current constraints.

Instance variables:
	symbolicValue		symbolic strength name (e.g. #required) <Symbol>
	arithmeticValue		index of the constraint in the hierarchy, used for comparisons <Number>
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #Strength) classSide methodsFor: 'class initialization' !


initialize
	"Initialize the symbolic strength table. Fix the internally caches values of all existing instances."
	"Strength initialize"

	StrengthTable := Dictionary new.
	StrengthTable at: #absoluteStrongest put: -1000.
	StrengthTable at: #required put: 0.
	StrengthTable at: #strongPreferred put: 1.
	StrengthTable at: #preferred put: 2.
	StrengthTable at: #strongDefault put: 3.
	StrengthTable at: #default put: 4.
	StrengthTable at: #weakDefault put: 5.
	StrengthTable at: #absoluteWeakest put: 1000.

	StrengthConstants := Dictionary new.
	StrengthTable keysAndValuesDo: [: strengthSymbol :foo |
			StrengthConstants
				at: strengthSymbol
				put: ((super new) initializeWith: strengthSymbol)].

	"Fix arithmetic values stored in all instances."
	"Strength allInstancesDo:
		[: strength | strength resetValue]."

	AbsoluteStrongest := Strength of: #absoluteStrongest.
	AbsoluteWeakest := Strength of: #absoluteWeakest.
	Required := Strength of: #required.! !

! (Delta mirrorFor: #Strength) classSide methodsFor: 'constants' !


absoluteStrongest

	^AbsoluteStrongest!

absoluteWeakest

	^AbsoluteWeakest!

required

	^Required! !

! (Delta mirrorFor: #Strength) classSide methodsFor: 'instance creation' !


of: aSymbol
	"Answer an instance with the specified strength."

	^StrengthConstants at: aSymbol! !

! (Delta mirrorFor: #Strength) methodsFor: 'comparing' !


sameAs: aStrength
	"Answer true if I am the same strength as the given Strength."

	^arithmeticValue = aStrength arithmeticValue!

stronger: aStrength
	"Answer true if I am stronger than the given Strength."

	^arithmeticValue < aStrength arithmeticValue!

weaker: aStrength
	"Answer true if I am weaker than the given Strength."

	^arithmeticValue > aStrength arithmeticValue! !

! (Delta mirrorFor: #Strength) methodsFor: 'max/min' !


strongest: aStrength
	"Answer the stronger of myself and aStrength."

	(aStrength stronger: self)
		ifTrue: [^aStrength]
		ifFalse: [^self].!

weakest: aStrength
	"Answer the weaker of myself and aStrength."

	(aStrength weaker: self)
		ifTrue: [^aStrength]
		ifFalse: [^self].! !

! (Delta mirrorFor: #Strength) methodsFor: 'printing' !


printOn: aStream
	"Append a string which represents my strength onto aStream."

	aStream nextPutAll: '%', symbolicValue, '%'.! !

! (Delta mirrorFor: #Strength) methodsFor: 'private' !


arithmeticValue
	"Answer my arithmetic value. Used for comparisons. Note that STRONGER constraints have SMALLER arithmetic values."

	^arithmeticValue!

initializeWith: symVal
	"Record my symbolic value and reset my arithmetic value."

	symbolicValue := symVal.
	self resetValue.!

resetValue
	"Lookup my symbolic value in the StrengthTable and reset my internal value."

	arithmeticValue := StrengthTable at: symbolicValue.! !

