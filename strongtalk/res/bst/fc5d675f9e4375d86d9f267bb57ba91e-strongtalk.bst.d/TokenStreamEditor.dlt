Delta define: #TokenStreamEditor as: (
(Class subclassOf: 'Object' instanceVariables: 'tokenTransformer <[Symbol, Object, Str, ^Str]>
 "A block that takes a token symbol, its value and its string representation, and produces a new string"
')) !

(Delta mirrorFor: #TokenStreamEditor) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #TokenStreamEditor) group: 'ast'!

(Delta mirrorFor: #TokenStreamEditor)
comment: 
'I map a string into another, with tokens transformed according to a given transformation.
A token here consists of a symbol, identifying what kind of token we have; an object that is the token''s value; and
a read string that is th etoken''s string representation in the input.
Specifically, given an input string that can be tokenized (by default using the Strongtalk scanner),
and a block mapping tokens to read strings, I produce an output string. This output string
will have all tokens transformed according to the specification in the block.
Whitespace/comments will be preserved.




 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #TokenStreamEditor) classSide methodsFor: 'instance creation' !


using: blk <[Symbol, Object, Str,  ^Str]> ^ <Instance> 

^self new tokenTransformer: blk

! !

! (Delta mirrorFor: #TokenStreamEditor) classSide methodsFor: 'private' !


tokenizerClass ^ <DeltaScanner class>

^DeltaScanner! !

! (Delta mirrorFor: #TokenStreamEditor) classSide methodsFor: 'service' !


transform: tokenString <Str> using: blk <[Symbol, Object, Str, ^Str]> ifFail: fb <[Str, Int, ^DoesNotMatter]> ^ <Str>

^(self using: blk) transform: tokenString ifFail: fb! !

! (Delta mirrorFor: #TokenStreamEditor) classSide methodsFor: 'testing' !


test ^ <Str>

^self transform: 'Jo seeks  "Jo" (Jo) for: fun + travel'
		using:[: s <Symbol> :v <Object> :str <Str> | s  = #identifier  ifTrue:[v = #Jo ifTrue:[#Joe] ifFalse:[str]] ifFalse:[str]]
		ifFail:[:s <Str>  :i <Int> | self error: s].! !

! (Delta mirrorFor: #TokenStreamEditor) methodsFor: 'private -accessing' !


tokenTransformer ^ <[Symbol, Object, Str, ^Str]>

^tokenTransformer
!

tokenTransformer: t <[Symbol, Object, Str, ^Str]>

tokenTransformer := t
! !

! (Delta mirrorFor: #TokenStreamEditor) methodsFor: 'transforming' !


transform: tokenString <Str> ifFail: fb <[Str, Int, ^DoesNotMatter]> ^ <Str>

| 
prevTokenEnd <Int> 
currentTokenStart <Int> 
currentTokenEnd <Int> 
currentToken <Symbol>  
oStream <CharReadWriteStream>
scanner <DeltaScanner>
|

prevTokenEnd := 1.
oStream :=  String new readWriteStream.
scanner := self actualClass tokenizerClass new open: tokenString ifError: fb.
[(currentToken := scanner  token) = #eos] 	
	whileFalse:	[
							currentTokenStart := scanner tokenBeg.
							currentTokenEnd := scanner tokenEnd.
							oStream	nextPutAll: (tokenString copyFrom: prevTokenEnd to: currentTokenStart - 1 );
											nextPutAll: (self tokenTransformer 	value: currentToken 
																												value: scanner tokenVal
																												value: 	(tokenString		copyFrom: currentTokenStart 
																																							to: currentTokenEnd - 1
																																)
																	).
							prevTokenEnd := currentTokenEnd.
							].
^oStream contentsWritten
! !

