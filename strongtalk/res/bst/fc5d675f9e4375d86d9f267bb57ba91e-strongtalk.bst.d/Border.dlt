Delta define: #Border as: (
(Class subclassOf: 'Object' instanceVariables: 'naturalBlock <[Visual,Region,^Region]>
minBlock <[Visual,Region,^Region]>
maxBlock <[Visual,Region,^Region]>
layoutBlock <[Visual,Region]>
displayBlock <[Canvas,Region]>
	') classVariables: 'ThinBlack <Border>
		') !

(Delta mirrorFor: #Border) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #Border) group: 'base'!

(Delta mirrorFor: #Border)
comment: 
'Frames add visual decoration behind and around a visual.  Instances can
hold a Border to describe the edge decoration.  A Painter can be
used to describe how to draw the backdrop behind the visual.

Tags: %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.2 
'!

! (Delta mirrorFor: #Border) classSide methodsFor: '3D' !


whiteInterior3DRaised: raised <Boolean> ^<Instance>
	"Like #standard3DRaised:, except colors are contrast tuned for situations
		where the interior will be white"

	"only the raised case is different"
	^raised
		ifFalse: [ self standard3DRaised: raised ]
		ifTrue: [ 	| p <Point> |
						p := 2@2.
						self new
							rigidInset: (p corner: p);
							displayBlock: (self displayBlockFor3DRaisedForWhiteInterior)
					 ]
! !

! (Delta mirrorFor: #Border) classSide methodsFor: 'instance creation' !


new ^<Instance>

	^super new initialize!

withRigidInset: inset <Number | Point | Rect> ^<Instance>

	^self new rigidInset: inset
! !

! (Delta mirrorFor: #Border) classSide methodsFor: 'private' !


displayBlockFor3DRaisedForWhiteInterior ^<[Canvas,Region]>

	|	p <Painter>
		lightened <SolidPaint>
		ulOuter <Paint>
		ulInner <Paint>
		lrOuter <Paint>
		lrInner <Paint>
		color <SolidPaint>
		|
	color := Paint gray.
	p := Painter new.

	"The lightened shade is the average of color and white"
	lightened := SolidPaint
		red: (color red + 255) // 2
		green: (color green + 255) // 2
		blue: (color blue + 255) // 2.

	ulOuter := Paint white.
	ulInner := lightened.
	lrOuter := Paint black.
	lrInner := color.

	^[ :can <Canvas> :alloc <Region> |
		|	inner <Rect>
			outer <Rect>
			innerBottomLeft <Point>
			outerBottomLeft <Point>
			innerTopRight <Point>
			outerTopRight <Point>
			|
		outer := alloc enclosingRect.
		"Remember the lower right edges of alloc are outside the region"
		outer := outer origin corner: ((outer corner x - 1) @ (outer corner y - 1)).
		inner := outer insetBy: 1.
		innerBottomLeft := inner bottomLeft.
		outerBottomLeft := outer bottomLeft.
		innerTopRight := inner topRight.
		outerTopRight := outer topRight.

		can withPainter: p
			do: [	p paint: ulOuter.
					can	displayLineFrom: outerBottomLeft to: outer topLeft;
							displayLineFrom: outer topLeft to: outerTopRight.
					p paint: ulInner.
					can	displayLineFrom: innerBottomLeft to: inner topLeft;
							displayLineFrom: inner topLeft to: innerTopRight.

					p paint: lrOuter.
					can	displayLineFrom: outerTopRight to: outer bottomRight;
							displayLineFrom: outer bottomRight to: outer bottomLeft.
					p paint: lrInner.
					can	displayLineFrom: innerTopRight to: inner bottomRight;
							displayLineFrom: inner bottomRight to: inner bottomLeft.		].	]!

displayBlockForStandard3DColor: paint <Paint>
raised: raised <Boolean>
^<[Canvas,Region]>

	|	p <Painter>
		lightened <SolidPaint>
		ulOuter <Paint>
		ulInner <Paint>
		lrOuter <Paint>
		lrInner <Paint>
		color <SolidPaint>
		|
	color := SolidPaint coerce: paint.
	p := Painter new.

	"The lightened shade is the average of color and white"
	lightened := SolidPaint
		red: (color red + 255) // 2
		green: (color green + 255) // 2
		blue: (color blue + 255) // 2.

	raised
		ifTrue: [	ulOuter := lightened.
						ulInner := Paint white.
						lrOuter := Paint black.
						lrInner := color.	]
		ifFalse: [	ulOuter := color.
						ulInner := Paint black.
						lrOuter := Paint white.
						lrInner := lightened.	].

	^[ :can <Canvas> :alloc <Region> |
		|	inner <Rect>
			outer <Rect>
			innerBottomLeft <Point>
			outerBottomLeft <Point>
			innerTopRight <Point>
			outerTopRight <Point>
			|
		outer := alloc enclosingRect.
		"Remember the lower right edges of alloc are outside the region"
		outer := outer origin corner: ((outer corner x - 1) @ (outer corner y - 1)).
		inner := outer insetBy: 1.
		innerBottomLeft := inner bottomLeft.
		outerBottomLeft := outer bottomLeft.
		innerTopRight := inner topRight.
		outerTopRight := outer topRight.

		can withPainter: p
			do: [	p paint: ulOuter.
					can	displayLineFrom: outerBottomLeft to: outer topLeft;
							displayLineFrom: outer topLeft to: outerTopRight.
					p paint: ulInner.
					can	displayLineFrom: innerBottomLeft to: inner topLeft;
							displayLineFrom: inner topLeft to: innerTopRight.

					p paint: lrOuter.
					can	displayLineFrom: outerTopRight to: outer bottomRight;
							displayLineFrom: outer bottomRight to: outer bottomLeft.
					p paint: lrInner.
					can	displayLineFrom: innerTopRight to: inner bottomRight;
							displayLineFrom: inner bottomRight to: inner bottomLeft.		].	]! !

! (Delta mirrorFor: #Border) classSide methodsFor: 'standard-3D' !


standard3DRaised: raised <Boolean>
^<Instance>

	^self standard3DWithExtraInteriorSpace: 0
			raised: raised!

standard3DWithColor: paint <Paint>
extraInteriorSpace: width <Int>
raised: flag <Boolean>
^<Instance>

	| p <Point> |
	p := (2 + width) @ (2 + width).
	^self new
		rigidInset: (p corner: p);
		displayBlock: (self displayBlockForStandard3DColor: paint raised: flag)
!

standard3DWithColor: p <Paint>
raised: flag <Boolean>
^<Instance>

	^self standard3DWithColor: p extraInteriorSpace: 0 raised: flag

!

standard3DWithExtraInteriorSpace: width <Int>
raised: raised <Boolean>
^<Instance>

	^self standard3DWithColor: Paint gray
			extraInteriorSpace: width
			raised: raised!

thin3DRaised: raised <Boolean> ^<Instance>

	^self thin3DWithExtraInteriorSpace: 0 raised: raised!

thin3DWithColor: paint <SolidPaint>
extraInteriorSpace: width <Int>
raised: flag <Boolean>
^<Instance>

	| p <Point> |
	p := (1 + width) @ (1 + width).
	^self new
		rigidInset: ((p corner: p) expandBy: width);
		displayBlock: (self displayBlockForThin3DColor: paint raised: flag)
!

thin3DWithExtraInteriorSpace: width <Int>
raised: raised <Boolean>
^<Instance>

	| p <Painter> |
	p := Painter new.

	^self new
		rigidInset: width + 1;
		displayBlock:	
			[ :can <Canvas> :alloc <Region> |
				|	r <Rect>
					bottomLeft <Point>
					topRight <Point>
					ul <Paint>
					lr <Paint>
					|
				r := alloc enclosingRect.
				"Remember the lower right edges of alloc are outside the region"
				r := r origin corner: ((r corner x - 1) @ (r corner y - 1)).
				bottomLeft := r bottomLeft.
				topRight := r topRight.
				raised
					ifTrue: [	ul := Paint white.
							lr := Paint gray.	]
					ifFalse: [	ul := Paint gray.
									lr := Paint white ].

				can withPainter: p
					do: [	p paint: ul.
							can	displayLineFrom: bottomLeft to: r topLeft;
									displayLineFrom: r topLeft to: topRight.

							p paint: lr.
							can	displayLineFrom: topRight to: r bottomRight;
									displayLineFrom: r bottomRight to: bottomLeft.		].  ].! !

! (Delta mirrorFor: #Border) classSide methodsFor: 'standard-lines' !


lineWithColor: p <Paint> ^<Instance>

	^self lineWithColor: p extraInset: 0 extraOutset: 0
!

lineWithColor: p <Paint>
extraInset: innerSpace <Int>
extraOutset: outerSpace
^<Instance>

	^self lineWithPainter: (Painter new paint: p) extraInset: innerSpace extraOutset: outerSpace
!

lineWithPainter: p <Painter>
extraInset: innerSpace <Int>
extraOutset: outerSpace
^<Instance>

	^self new
		rigidInset: innerSpace + 1 + outerSpace;
		displayBlock:
			[ :can <Canvas> :alloc <Region> |
				can withPainter: p
					do: [ can displayRectangle: (alloc enclosingRect insetBy: outerSpace) ] ]
!

thinBlack ^<Border>

	ThinBlack isNil
		ifTrue: [	ThinBlack := self lineWithPainter: Painter default
													extraInset: 0
													extraOutset: 0.	].

	^ThinBlack! !

! (Delta mirrorFor: #Border) classSide methodsFor: 'unusual' !


leftBracket ^<Border>

	^self new
		rigidInset: (25 @ 0 corner: 0@0);
		displayBlock:
			[ :can <Canvas> :alloc <Region> |
				can withPainter: Painter default
					do: [	| rect <Rect> left <Int> top <Int> bottom <Int> right <Int> |
							rect := alloc enclosedRect.
							top := rect top + 2.
							bottom := rect bottom - 3.
							left := rect left + 18.
							right := left + 4.
							can	displayLineFrom: left @ top to: right @ top;
									displayLineFrom: left @ top to: left @ bottom;
									displayLineFrom: left @ bottom to: right @ bottom.	] ]! !

! (Delta mirrorFor: #Border) methodsFor: 'accessing' !


displayBlock ^<[Canvas,Region]>

	^displayBlock!

displayBlock: b <[Canvas,Region]>

	displayBlock := b!

layoutBlock ^<[Visual,Region]>

	^layoutBlock!

layoutBlock: b <[Visual,Region]>

	layoutBlock := b!

maxBlock ^<[Visual,Region,^Region]>

	^maxBlock!

maxBlock: b <[Visual,Region,^Region]>

	maxBlock := b!

minBlock ^<[Visual,Region,^Region]>

	^minBlock!

minBlock: b <[Visual,Region,^Region]>

	minBlock := b!

naturalBlock ^<[Visual,Region,^Region]>

	^naturalBlock!

naturalBlock: b <[Visual,Region,^Region]>

	naturalBlock := b! !

! (Delta mirrorFor: #Border) methodsFor: 'displaying' !


displayOn: can <Canvas> allocation: a <Region>

	self displayBlock value: can value: a! !

! (Delta mirrorFor: #Border) methodsFor: 'initialization' !


initialize

	self displayBlock: [ :can <Canvas> :a <Region> | "By default, draw nothing" ]! !

! (Delta mirrorFor: #Border) methodsFor: 'layout' !


layout: v <Visual> given: alloc <Region>

	self layoutBlock value: v value: alloc! !

! (Delta mirrorFor: #Border) methodsFor: 'preferences' !


maxFor: v <Visual> ^<Region>

	^self maxBlock value: v value: v max!

minFor: v <Visual> ^<Region>

	^self minBlock value: v value: v min!

naturalFor: v <Visual> ^<Region>

	^self naturalBlock value: v value: v natural! !

! (Delta mirrorFor: #Border) methodsFor: 'utility' !


rigidInset: inset <Number | Point | Rect>

	| blk <[Visual,^Region]> |
	blk := [ :v <Visual> :pref <Region> |
				  pref expandBy: inset ].
	self naturalBlock: blk; minBlock: blk; maxBlock: blk.
	self layoutBlock:
		[ :v <Visual> :alloc <Region> |
			v allocation: (alloc insetBy: inset) at: Point origin ].! !

