Delta define: #DeltaIf as: (
(Class subclassOf: 'DeltaExpression' instanceVariables: 'cond ifTrue then else ')) !

(Delta mirrorFor: #DeltaIf) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #DeltaIf) group: 'ast'!

(Delta mirrorFor: #DeltaIf)
comment: 
'Generated by the rewriter.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaIf) methodsFor: 'Unclassified' !


apply: aTool
    aTool ifNode: self!

cond
    ^ cond!

else
	^ else!

if: expr is: val then: block
    self assert: [expr isExpressionNode].
    self assert: [val isBoolean].
    self assert: [block isBlockNode].
    cond := expr.
    ifTrue := val.
    then := block body.
    else := nil!

if: expr is: val then: block1 else: block2
    self assert: [expr isExpressionNode].
    self assert: [val isBoolean].
    self assert: [block1 isBlockNode].
    self assert: [block2 isBlockNode].
    cond := expr.
    ifTrue := val.
    then := block1 body.
    else := block2 body!

ifTrue
    ^ ifTrue!

isIfNode
    ^ true!

komment
    "Generated by the rewriter."!

then
    ^ then! !

