Delta define: #IndexedDoubleByteInstanceVariables as: (
Mixin superclassType: 'Object' body: ((Class subclassOf: 'Object' instanceVariables: ''))) !

(Delta mirrorFor: #IndexedDoubleByteInstanceVariables) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #IndexedDoubleByteInstanceVariables) group: 'base'!

(Delta mirrorFor: #IndexedDoubleByteInstanceVariables)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.2 $
'!

! (Delta mirrorFor: #IndexedDoubleByteInstanceVariables) classSide methodsFor: 'file out' !


fileOutSignature ^<Integer>
    ^69! !

! (Delta mirrorFor: #IndexedDoubleByteInstanceVariables) classSide methodsFor: 'private' !


primitiveNew: size <Int> ^<Instance>

	^VM newDoubleBytes: self size: size! !

! (Delta mirrorFor: #IndexedDoubleByteInstanceVariables) methodsFor: 'file out' !


fileOutBodyOn: d <Dumper>
    super fileOutBodyOn: d.
    self primitiveSize fileOutOn: d.
    self indexedDoubleBytesDo: [ :b <Int> | d putByte: b ].!

fileOutSignature ^<Integer>
    ^101! !

! (Delta mirrorFor: #IndexedDoubleByteInstanceVariables) methodsFor: 'private' !


indexedDoubleBytesDo: blk <[Int]>

	1 to: self primitiveSize do:
		[ :i <Int> |
			blk value: (self primitiveAt: i)	].!

primitiveAt: index <Int> ^<Int>
	^{{self primitiveIndexedDoubleByteAt: index
		ifFail: [ :err <Symbol> |  self error: err ]}}!

primitiveAt: index <Int>  ifAbsent: fail <[^X def]>  ^<Int | X>

	^{{self primitiveIndexedDoubleByteAt: index
		ifFail: [ :err <Symbol> |
						err == #OutOfBounds
							ifTrue: [ fail value ]
							ifFalse: [ self error: err ]	]}}!

primitiveAt: index <Int> put: byte <Int> ^<Int>

	^{{self primitiveIndexedDoubleByteAt: index put: byte ifFail: [ :err <Symbol> | self error: err ]}}!

primitiveSize ^<Int>

	^{{self primitiveIndexedDoubleByteSize}}! !

