Delta define: #CharacterInput as: (
Mixin superclassType: 'BasicInputStream[Character]' body: ((Class subclassOf: 'BasicInputStream[Character]' instanceVariables: '') protocols: 'CharInputStream')) !

(Delta mirrorFor: #CharacterInput) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #CharacterInput) group: 'base'!

(Delta mirrorFor: #CharacterInput)
comment: 
'This mixin add character specific messages to an InputStream class.

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #CharacterInput) methodsFor: 'accessing' !


contentsRemaining ^<Str>

	| con <SeqCltn[Character]> |
	con := super contentsRemaining.

	"%todo use Str below when have first class protocols"
	^con Str
		ifTrue: [ guaranteed <Str> con ]
		ifFalse: [ String withAll: con ]!

next: nElements <Int> ^<Str>

	| con <SeqCltn[Character]> |
	con := super next: nElements.
	"%todo use Str below when have first class protocols"
	
	^con Str
		ifTrue: [ guaranteed <Str> con ]
		ifFalse: [ String withAll: con ]!

nextChunk

    | result <String> |
    result := self upTo: $!! . 
    [ self atEnd or: [ ( self peekFor: $!! ) not ] ] whileFalse: [
        result := result, ( String with: $!! ), ( self upTo: $!! ) ].
    [ self atEnd not and: [ self peek isSeparator ] ]
        whileTrue: [ self next ].
    ^result !

upTo: o <Object> ^<Str>

	| con <SeqCltn[Character]> |
	con := super upTo: o.
	"%todo use Str below when have first class protocols"
	^con Str
		ifTrue: [ guaranteed <Str> con ]
		ifFalse: [ String withAll: con ]! !

! (Delta mirrorFor: #CharacterInput) methodsFor: 'private' !


newCollectionOfSize: n <Int> ^<String>

	^String[E] new: n! !

! (Delta mirrorFor: #CharacterInput) methodsFor: 'smalltalk filein' !


fileIn

	| eval <Str> evalResult <Object> chunkStartsWithBang <Boolean> |
	[self atEnd or: [self peek isSeparator not]] 
		whileFalse: [self next].
	[self atEnd]
		whileFalse: [
			chunkStartsWithBang := self peekFor: $!!.
			eval := self nextChunk.
			BootStrapping 
				ifTrue: [ evalResult :=Smalltalk evaluate: eval ifError: [ :msg <Str> :pos <Int> | 
								Transcript 
									show: '"<< Chunk filein error"'; cr;
									show: (eval copyFrom: 1 to: pos); cr;
									show: '"<< ';
									show: msg;
									show: ' <<"'; cr;
									show: (eval copyFrom: pos + 1 to: eval size); cr ] ]
				ifFalse: [ evalResult :=CompilerInterface evaluate: eval ].
			chunkStartsWithBang 
				ifTrue: [ (DefinitionReader coerce: evalResult) fileInFrom: self]]
! !

