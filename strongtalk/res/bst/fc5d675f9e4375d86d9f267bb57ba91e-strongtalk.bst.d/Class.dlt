Delta define: #Class as: (
(Class subclassOf: 'ClassDescription' instanceVariables: 'name')) !

(Delta mirrorFor: #Class) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #Class) group: 'base'!

(Delta mirrorFor: #Class)
comment: 
'Tags: %BlueBook

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #Class) classSide methodsFor: 'constructors' !


delta ^ <ClassMirror>
    "Creation of a Delta class constructor"
^ClassMirror delta!

subclassOf: superRef  <Str> ^ <ClassMirror>
    "Creation of a Delta class constructor"
	^self subclassOf: superRef instanceVariables: ''!

subclassOf: superRef  <Str>  instanceVariables: instVarsString <Str> ^ <ClassMirror> 
    "Creation of a Delta class constructor"

	^self subclassOf: superRef
			instanceVariables: instVarsString
			classInstanceVariables: ''!

subclassOf: superRef  <Str> 
instanceVariables: instVarsString <Str>
classInstanceVariables: classInstVarsString <Str> ^ <ClassMirror> 
    "Creation of a Delta class constructor"
| c <ClassMirror> |

c := ClassMirror
			subclassOf: superRef
			instanceVariables: instVarsString
			classInstanceVariables: classInstVarsString.
AbstractClassMirror flushSubclassHierarchyCache.
^c! !

! (Delta mirrorFor: #Class) methodsFor: 'Camp Smalltalk' !


allSubclasses

	^((ClassMirror on: self) subclasses
		collect: [:mirror| mirror reflectee])
		remove: self;
		yourself!

sunitName
 
        ^self name! !

! (Delta mirrorFor: #Class) methodsFor: 'accessing' !


instanceClass ^ <Class>
	^self!

name ^ <Symbol>
	^name !

name: n <Symbol> ifFail: fb <[]>
	name := n! !

! (Delta mirrorFor: #Class) methodsFor: 'file out' !


fileOutSignature ^<Integer>
    ^67! !

! (Delta mirrorFor: #Class) methodsFor: 'file-in compatibility' !


comment:  aString

	(ClassMirror on: self) comment: aString!

commentStamp: ignore prior: ignore2

	^(CommentReader for: (ClassMirror on: self))!

subclass: clsName <Symbol>
instanceVariableNames: iVars <Str>
classVariableNames: cVars <Str>
poolDictionaries: pVars <Str>
^<Class>

	^self subclass: clsName
		instanceVariableNames: iVars
		classVariableNames: cVars
		poolDictionaries: pVars
		category: ''!

subclass: clsName <Symbol>
instanceVariableNames: iVars <Str>
classVariableNames: cVars <Str>
poolDictionaries: pVars <Str>
category: cat <Str>
^<Class>

	| mirror <ClassMirror> |
	[ pVars isEmpty ] verify.
	mirror := Class subclassOf: self name instanceVariables: iVars.
	mirror classVariables: cVars.
	Delta define: clsName as: mirror.
	^mirror reflectee! !

