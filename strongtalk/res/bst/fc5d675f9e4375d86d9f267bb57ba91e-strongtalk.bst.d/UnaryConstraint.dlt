Delta define: #UnaryConstraint as: (
(Class subclassOf: 'AbstractConstraint' instanceVariables: 'output satisfied')) !

(Delta mirrorFor: #UnaryConstraint) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #UnaryConstraint) group: 'benchmark'!

(Delta mirrorFor: #UnaryConstraint)
comment: 
'I am an abstract superclass for constraints having a single possible output variable.

Instance variables:
	output		possible output variable <Variable>
	satisfied		true if I am currently satisfied <Boolean>
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #UnaryConstraint) methodsFor: 'add/remove' !


addToGraph
	"Add myself to the constraint graph."

	output addConstraint: self.
	satisfied := false.!

removeFromGraph
	"Remove myself from the constraint graph."

	(output == nil) ifFalse: [output removeConstraint: self].
	satisfied := false.! !

! (Delta mirrorFor: #UnaryConstraint) methodsFor: 'initialize-release' !


release

	strength := nil.
	output := nil.
	satisfied := nil.!

var: aVariable strength: strengthSymbol
	"Initialize myself with the given variable and strength."

	strength := Strength of: strengthSymbol.
	output := aVariable.
	satisfied := false.
	self addConstraint.! !

! (Delta mirrorFor: #UnaryConstraint) methodsFor: 'planning' !


chooseMethod: mark
	"Decide if I can be satisfied and record that decision."

	satisfied :=
		(output mark ~= mark) and:
		[strength stronger: output walkStrength].!

execute
	"Enforce this constraint. Assume that it is satisfied."

	self subclassResponsibility!

inputsDo: aBlock
	"I have no input variables."!

markUnsatisfied
	"Record the fact that I am unsatisfied."

	satisfied := false.!

output
	"Answer my current output variable."

	^output!

recalculate
	"Calculate the walkabout strength, the stay flag, and, if it is 'stay', the value for the current output of this constraint. Assume this constraint is satisfied."

	output walkStrength: strength.
	output stay: (self isInput not).
	(output stay) ifTrue: [self execute].	"stay optimization"! !

! (Delta mirrorFor: #UnaryConstraint) methodsFor: 'queries' !


isSatisfied
	"Answer true if this constraint is satisfied in the current solution."

	^satisfied! !

