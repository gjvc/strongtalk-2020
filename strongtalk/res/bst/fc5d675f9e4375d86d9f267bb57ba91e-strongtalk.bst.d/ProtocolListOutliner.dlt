Delta define: #ProtocolListOutliner as: (
(Class subclassOf: 'MirrorListOutliner[ProtocolMirror]' instanceVariables: '')) !

(Delta mirrorFor: #ProtocolListOutliner) revision: '$Revision: 1.4 $'!

(Delta mirrorFor: #ProtocolListOutliner) group: 'outliner'!

(Delta mirrorFor: #ProtocolListOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #ProtocolListOutliner) methodsFor: 'accessing' !


entryName ^ <Str>

	^'protocol'!

windowTitle ^ <Str>

	^'Protocols'! !

! (Delta mirrorFor: #ProtocolListOutliner) methodsFor: 'control' !


addNewProtocol

	self
		launchDefinitionDialogWithPainter: self protocolPainter
		title: 'Add new protocol'
		constructor: [ :name <Symbol> |
			Smalltalk define: name as:  (Protocol superProtocol: '<Object>') ]!

typecheckAll

self typecheckAction:[
											self list do:[: m <ProtocolMirror> |
											 					m typecheck.
																m classSide typecheck.
																].
											]
title: 'Typechecking all protocols'.! !

! (Delta mirrorFor: #ProtocolListOutliner) methodsFor: 'dependencies' !


update: aspect <Object> with: value <Object>

	self inSessionProcessDo: [
		((aspect = #addGlobal or: [aspect = #removeGlobal]) and: [ Protocol = value at2 class ])
			ifTrue: [	self update ] ]! !

! (Delta mirrorFor: #ProtocolListOutliner) methodsFor: 'menus' !


fileMenu ^ <Menu>

	^super fileMenu
		add: (MenuAction new
					name: '&Add new protocol';
					action: [ self addNewProtocol ] )!

hasMenu ^<Boolean>

	^true!

menuBar ^ <Menu>

	^Menu new
		add: self fileMenu;
		add: self typecheckingMenu!

typecheckingMenu ^ <Menu>

^Menu new name: 'Typecheck';
    add: (MenuAction new
                  name: 'Typecheck all protocols';
                  action: [self typecheckAll]);
    add: (MenuAction new
                  name: 'Typecheck definitions of all protocols';
                  action: [self typecheckAllDefs])
! !

! (Delta mirrorFor: #ProtocolListOutliner) methodsFor: 'private' !


computeWorldList ^ <OrdCltn[ProtocolMirror]>

	| result <SortedCollection[ProtocolMirror]> |
	result := SortedCollection[ProtocolMirror] 
					sortBlock: [ :m1 <ProtocolMirror> :m2 <ProtocolMirror> | m1 name <= m2 name ].
	Smalltalk protocolsDo: [ :m <Protocol> | result add: (ProtocolMirror on: m) ].
	^result asOrderedCollection!

labelPainter ^<Painter>

	^self protocolPainter! !

