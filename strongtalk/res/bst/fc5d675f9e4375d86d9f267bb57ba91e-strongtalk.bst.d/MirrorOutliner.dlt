Delta define: #MirrorOutliner as: (
Generic forAll: 'M <Mirror> ' body: ((Class subclassOf: 'CommonProgEnvOutliner' instanceVariables: 'mirror <M>
	') abstract)) !

(Delta mirrorFor: #MirrorOutliner) revision: '$Revision: 1.7 $'!

(Delta mirrorFor: #MirrorOutliner) group: 'outliner'!

(Delta mirrorFor: #MirrorOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #MirrorOutliner) classSide methodsFor: 'instance creation' !


for: mirror <M> ^ <Instance>

	^self new initializeForMirror: mirror
! !

! (Delta mirrorFor: #MirrorOutliner) methodsFor: 'accessing' !


mirror ^ <M>

	^mirror!

outlinerForLocator: loc <DeltaLocator> ^ <CommonProgEnvOutliner>

	self subclassResponsibility!

visualForLocator: loc <DeltaLocator> ^ <Visual>

^(self outlinerForLocator: loc) visual! !

! (Delta mirrorFor: #MirrorOutliner) methodsFor: 'control' !


closeRequest: toClose <[]>

	self mirror sourceInfo removeDependent: self.
	super closeRequest: toClose!

typecheck

self typecheckAction: [self mirror typecheck]
 		title: 'Typechecking ', mirror name.
 				
! !

! (Delta mirrorFor: #MirrorOutliner) methodsFor: 'menus' !


typecheckingMenu ^ <Menu>

^Menu new name: 'Typechecking';
    add: (MenuAction new
                  name: 'Typecheck';
                  action: [self typecheck])
 ! !

! (Delta mirrorFor: #MirrorOutliner) methodsFor: 'private-initialization' !


initializeForMirror: m <M>

	mirror := m.
	m sourceInfo addDependent: self.
! !

! (Delta mirrorFor: #MirrorOutliner) methodsFor: 'type errors' !


displayLocalErrorBatch: es <OrdCltn[TypeError]> title: t <Str>


! !

