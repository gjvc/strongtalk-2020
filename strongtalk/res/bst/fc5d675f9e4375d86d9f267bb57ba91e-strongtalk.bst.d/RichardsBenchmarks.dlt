Delta define: #RichardsBenchmarks as: (
(Class subclassOf: 'RBObject' instanceVariables: 'taskList currentTask currentTaskIdentity taskTable tracing layout queuePacketCount holdCount')) !

(Delta mirrorFor: #RichardsBenchmarks) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #RichardsBenchmarks) group: 'benchmark'!

(Delta mirrorFor: #RichardsBenchmarks)
comment: 
'No comment
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #RichardsBenchmarks) classSide methodsFor: 'instance creation' !


loop

	|start elapsed count|
start := Time millisecondClockValue.
count := 0.
[(elapsed := Time millisecondClockValue - start) < 1000]
	whileTrue: [
		self new run.
		count := count + 1].
elapsed * 1000.0/ count printOn: Transcript cr; yourself!

start
    super new start
! !

! (Delta mirrorFor: #RichardsBenchmarks) methodsFor: 'admin' !


digitalkSchedulerTime
	^625!

digitalkTime
	^626!

digitalkTotalTime
	^626!

factor
	^1!

name
	^'Richards'!

parcplaceSchedulerTime
	^1014!

parcplaceTime
	^1015!

parcplaceTotalTime
	^1015! !

! (Delta mirrorFor: #RichardsBenchmarks) methodsFor: 'creation' !


createDevice: identity priority: priority work: work state: state

    | t |
    t := DeviceTask
                link: taskList
                create: identity
                priority: priority
                initialWorkQueue: work
                initialState: state
                function: nil
                privateData:  (DeviceTaskDataRecord create).
    taskList := t.
    taskTable at: identity put: t!

createHandler: identity priority: priority work: work state: state
    | t |
    t := HandlerTask
                link: taskList
                create: identity
                priority: priority
                initialWorkQueue: work
                initialState: state
                function: nil
                privateData:  (HandlerTaskDataRecord create).
    taskList := t.
    taskTable at: identity put: t
!

createIdler: identity priority: priority work: work state: state
    | t |
    t := IdleTask
                link: taskList
                create: identity
                priority: priority
                initialWorkQueue: work
                initialState: state
                function: nil
                privateData:  (IdleTaskDataRecord create).
    taskList := t.
    taskTable at: identity put: t
"
    self
        createTask: identity
        priority: priority
        work: work
        state: state
        function:
            [:work :data |
            data count: data count - 1.
            0 = data count
                ifTrue: [TheBench holdSelf]
                ifFalse:
                    [0 = (data control bitAnd: 1)
                        ifTrue:
                            [data control: data control // 2.
                            TheBench release: DeviceA]
                        ifFalse:
                            [data control: (data control // 2 bitXor: 53256).
                            TheBench release: DeviceB]]]
        data: (IdleTaskDataRecord create)
"
!

createPacket: link identity: identity kind: kind
    ^Packet
        create: link
        identity: identity
        kind: kind
!

createTask: identity priority: priority work: work state: state function: aBlock data: data
    | t |
    t := TaskControlBlock
                link: taskList
                create: identity
                priority: priority
                initialWorkQueue: work
                initialState: state
                function: aBlock
                privateData: data.
    taskList := t.
    taskTable at: identity put: t
!

createWorker: identity priority: priority work: work state: state
    | t |
    t := WorkerTask
                link: taskList
                create: identity
                priority: priority
                initialWorkQueue: work
                initialState: state
                function: nil
                privateData:   (WorkerTaskDataRecord create).
    taskList := t.
    taskTable at: identity put: t! !

! (Delta mirrorFor: #RichardsBenchmarks) methodsFor: 'initialize' !


run
    | workQ mark1 mark2 mark3 mark4 |
    RBObject initialize: self.
    self initTrace; initScheduler.
    mark1 := Time millisecondClockValue.
    self
        createIdler: Idler
        priority: 0
        work: NoWork
        state: TaskState running.
    workQ := self
                createPacket: NoWork
                identity: Worker
                kind: WorkPacketKind.
    workQ := self
                createPacket: workQ
                identity: Worker
                kind: WorkPacketKind.
    self
        createWorker: Worker
        priority: 1000
        work: workQ
        state: TaskState waitingWithPacket.
    workQ := self
                createPacket: NoWork
                identity: DeviceA
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceA
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceA
                kind: DevicePacketKind.
    self
        createHandler: HandlerA
        priority: 2000
        work: workQ
        state: TaskState waitingWithPacket.
    workQ := self
                createPacket: NoWork
                identity: DeviceB
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceB
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceB
                kind: DevicePacketKind.
    self
        createHandler: HandlerB
        priority: 3000
        work: workQ
        state: TaskState waitingWithPacket.
    self
        createDevice: DeviceA
        priority: 4000
        work: NoWork
        state: TaskState waiting.
    self
        createDevice: DeviceB
        priority: 5000
        work: NoWork
        state: TaskState waiting.
    mark2 := Time millisecondClockValue.
    self schedule.
    mark3 := Time millisecondClockValue.
    mark4 := Time millisecondClockValue.
   ^mark4 - mark1
!

start
    | workQ mark1 mark2 mark3 mark4 |
    RBObject initialize: self.
    self initTrace; initScheduler.
    mark1 := Time millisecondClockValue.
    Transcript show: 'Bench mark starting'; cr.
    self
        createIdler: Idler
        priority: 0
        work: NoWork
        state: TaskState running.
    workQ := self
                createPacket: NoWork
                identity: Worker
                kind: WorkPacketKind.
    workQ := self
                createPacket: workQ
                identity: Worker
                kind: WorkPacketKind.
    self
        createWorker: Worker
        priority: 1000
        work: workQ
        state: TaskState waitingWithPacket.
    workQ := self
                createPacket: NoWork
                identity: DeviceA
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceA
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceA
                kind: DevicePacketKind.
    self
        createHandler: HandlerA
        priority: 2000
        work: workQ
        state: TaskState waitingWithPacket.
    workQ := self
                createPacket: NoWork
                identity: DeviceB
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceB
                kind: DevicePacketKind.
    workQ := self
                createPacket: workQ
                identity: DeviceB
                kind: DevicePacketKind.
    self
        createHandler: HandlerB
        priority: 3000
        work: workQ
        state: TaskState waitingWithPacket.
    self
        createDevice: DeviceA
        priority: 4000
        work: NoWork
        state: TaskState waiting.
    self
        createDevice: DeviceB
        priority: 5000
        work: NoWork
        state: TaskState waiting.
    Transcript show: 'Starting'; cr.
    mark2 := Time millisecondClockValue.
    self schedule.
    mark3 := Time millisecondClockValue.

    Transcript show: 'Finished'; cr.
    Transcript show: 'QueuePacket count = ' , queuePacketCount printString , ' HoldCount = ' , holdCount printString; cr; show: 'These results are' , (queuePacketCount = 23246 & (holdCount = 9297)
                ifTrue: ['correct']
                ifFalse: ['wrong']) printString.
    Transcript cr; show: 'End of run'; cr.
    mark4 := Time millisecondClockValue.

	Transcript
					showBenchmarkLine: 	'Scheduler time' 
					delta:							mark3 - mark2 
					digitalk:						self digitalkSchedulerTime 
					parcplace: 					self parcplaceSchedulerTime.

	Transcript
					showBenchmarkLine:	'Total time' 
					delta: 							mark4 - mark1
					digitalk:						self digitalkTotalTime 
					parcplace: 					self parcplaceTotalTime.
! !

! (Delta mirrorFor: #RichardsBenchmarks) methodsFor: 'private' !


findTask: identity
    | t |
    t := taskTable at: identity.
    NoTask == t ifTrue: [self error: 'findTask failed'].
    ^t
!

holdSelf
    holdCount := holdCount + 1.
    currentTask taskHolding: true.
    ^currentTask link
!

initScheduler
    queuePacketCount := holdCount := 0.
    taskTable := Array new: 6 withAll: NoTask.
    taskList := NoTask
!

initTrace
    tracing := false.
    layout := 0
!

queuePacket: packet
    | t |
    t := self findTask: packet identity.
    NoTask == t ifTrue: [^NoTask].
    queuePacketCount := queuePacketCount + 1.
    packet link: NoWork.
    packet identity: currentTaskIdentity.
    ^t addInput: packet checkPriority: currentTask
!

release: identity
    | t |
    t := self findTask: identity.
    NoTask == t ifTrue: [^NoTask].
    t taskHolding: false.
    t priority > currentTask priority
        ifTrue: [^t]
        ifFalse: [^currentTask]
!

trace: id
    layout := layout - 1.
    0 >= layout
        ifTrue:
            [Transcript cr.
            layout := 50].
    Transcript show: id printString
!

tracing
	^tracing!

wait
    currentTask taskWaiting: true.
    ^currentTask
! !

! (Delta mirrorFor: #RichardsBenchmarks) methodsFor: 'scheduling' !


schedule
    currentTask := taskList.
    [NoTask == currentTask]
        whileFalse:
            [currentTask isTaskHoldingOrWaiting
                ifTrue: [currentTask := currentTask link]
                ifFalse:
                    [currentTaskIdentity := currentTask identity.
                    tracing ifTrue: [self trace: currentTaskIdentity].
                    currentTask := currentTask runTask]]
! !

