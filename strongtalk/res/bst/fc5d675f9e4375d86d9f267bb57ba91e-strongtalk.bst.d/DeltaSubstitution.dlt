Delta define: #DeltaSubstitution as: (
(Class subclassOf: 'IdentityDictionary[TypeVar, ObjectType]' instanceVariables: '')) !

(Delta mirrorFor: #DeltaSubstitution) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaSubstitution) group: 'ast'!

(Delta mirrorFor: #DeltaSubstitution)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaSubstitution) methodsFor: 'initialize' !


initialize ^ <Self>! !

! (Delta mirrorFor: #DeltaSubstitution) methodsFor: 'operations' !


* s  <Substitution>

self compose: s!

compose: s <Substitution>
"Functional composition of two substitutions - myself and s. The resulting
substitution has the same effect as first applying s and then applying myself."

|composition <Substitution> |

composition := self class new initialize.
s keysAndValuesDo:[:k <TypeVar>  :v <ObjectType> |
                                         composition at: k put: (v substitute: self).
                                         ].
self keysAndValuesDo:[:k <TypeVar>  :v <ObjectType> |
                                               (s includesKey: k) ifFalse:[composition at: k put: v].
                                               ].
^composition.! !

