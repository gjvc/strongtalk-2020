Delta define: #HTMLBuilder as: (
(Class subclassOf: 'Object' instanceVariables: 'medium <Medium>
topWindow <Window>
rows <OrdCltn[GlyphRow]>
current <OrdCltn[Glyph]>
previous <OrdCltn[Glyph]>
	"The glyphs on the previous line, or nil"
currentWidth <Int>
pageWidth <Int>
lastBreak <Int>
	"Index of last glyph that is a good place to break.  If the break is taken,
		that glyph is removed"
scaledLeftMargin <Int>
leftMargin <Int>
scaledRightMargin <Int>
defaultLineHeight <Int>
	"The height of an empty line"
painter <Painter>
scaledPainter <Painter>
alignment <Symbol>
	"one of (self alignLeft, self alignRight,  self alignCenter)"
app <HTMLView>
glyphTransformer <[Glyph,^Glyph]>
	"Every glyph that is added is processed by this
		block"
backdrop <Painter>
visualRegistry <VarDict[HTMLElement,Visual]>
	"any visuals in this mapping will be reused for
		their corresponding element.. This is used to
		maintain visual state across relayouts"
textPaint <Paint>
linkPaint <Paint>
scaleFactor <Float>	"By default is 1.0; is used to scale all fonts"
atParagraphStart <Boolean> "true if we are not in the middle of an (effective) paragraph"
lineHasNothingSubstantial <Boolean>
previousLineHadNothingSubstantial <Boolean>')) !

(Delta mirrorFor: #HTMLBuilder) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #HTMLBuilder) group: 'HTML'!

(Delta mirrorFor: #HTMLBuilder)
comment: 
'Maintains layout state during page building.

Tags: %HTML %UI

 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license
'!

! (Delta mirrorFor: #HTMLBuilder) classSide methodsFor: 'constants' !


alignCenter ^<Symbol>

	^#alignCenter!

alignLeft ^<Symbol>

	^#alignLeft!

alignRight ^<Symbol>

	^#alignRight! !

! (Delta mirrorFor: #HTMLBuilder) classSide methodsFor: 'instance creation' !


for: app <HTMLView>
rows: rs <OrdCltn[GlyphRow]>
pageWidth: width <Int>
topWindow: win <Window>
visualRegistry: reg <VarDict[HTMLElement,Visual]>
scaleFactor: s <Float>
^<Instance>

	^self new initFor: app rows: rs pageWidth: width topWindow: win visualRegistry: reg scaleFactor: s! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'accessing' !


alignment ^<Symbol>

	^alignment!

alignment: a <Symbol>

	alignment := a!

app ^<HTMLView>

	^app!

atParagraphStart ^<Boolean>

	^atParagraphStart!

atParagraphStart: flag <Boolean>

	atParagraphStart := flag!

backdrop ^<Painter>

	^backdrop!

backdrop: b <Painter>

	backdrop := b!

context ^<URL>

	^self app model!

currentWidth ^<Int>

	^currentWidth!

leftMargin ^<Int>

	^self unscale: self scaledLeftMargin!

leftMargin: m <Int>

	self scaledLeftMargin: (self scale: m)!

lineHasNothingSubstantial ^<Boolean>

	^lineHasNothingSubstantial!

lineHasNothingSubstantial: f <Boolean>

	lineHasNothingSubstantial := f!

linkPaint ^<Paint>

	^linkPaint!

linkPaint: p <Paint>

	linkPaint := p!

medium ^<Medium>

	^self topWindow medium!

pageWidth ^<Int>

	^pageWidth!

painter ^<Painter>

	^painter!

painter: p <Painter>

	painter := p.
	self scaledPainter: (self scalePainter: p)!

previousLineHadNothingSubstantial ^<Boolean>

	^previousLineHadNothingSubstantial!

previousLineHadNothingSubstantial: f <Boolean>

	previousLineHadNothingSubstantial := f!

remainingWidth ^<Int>

	^self pageWidth - self scaledRightMargin - self currentWidth!

rightMargin ^<Int>

	^self initialLeftMargin!

scale: input <Int>  ^<Int>
	"scale the input and return it"

	^(self scaleFactor * input asFloat) asInteger!

scaleFactor ^<Float>

	^scaleFactor!

scaleFactor: s <Float>

	scaleFactor := s.!

textPaint ^<Paint>

	^textPaint!

textPaint: p <Paint>

	textPaint := p.
	self painter: (self painter copy paint: p)!

title: t <Str>

	"%todo: need a protocol for windows with titles"
	StandardWindow coerce: self topWindow
		do: [ :stdw <StandardWindow> |
					stdw name: t	]
		else: [ ]!

visualRegistry ^<VarDict[HTMLElement,Visual]>

	^visualRegistry
!

visualRegistry: r <VarDict[HTMLElement,Visual]>

	visualRegistry := r
! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'accessing-private' !


current ^<OrdCltn[Glyph]>

	^current!

currentWidth: w <Int>

	currentWidth := w!

defaultLineHeight ^<Int>

	^defaultLineHeight!

glyphTransformer ^<[Glyph,^Glyph]>

	^glyphTransformer!

glyphTransformer: t <[Glyph,^Glyph]>

	glyphTransformer := t!

lastBreak ^<Int>

	^lastBreak!

lastBreak: b <Int>

	lastBreak := b!

previous ^<OrdCltn[Glyph]>

	^previous!

previous: p <OrdCltn[Glyph]>

	previous := p!

rows ^<OrdCltn[GlyphRow]>

	^rows!

topWindow ^<Window>

	^topWindow! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'adding-private' !


doAdd: g <Glyph>
	"Add a glyph, breaking the line if needed."

	| w <Int> afterBreak <SeqCltn[Glyph]> |
	self insertLeftMarginIfNeeded.
	w := self widthOf: g.
	self atParagraphStart: false.
	(self wouldBreak: w)
		ifFalse: [	self current addLast: g.
							self currentWidth: self currentWidth + w.
							^self ].
	"must break line"
	self lastBreak isNil
		ifTrue: [	self enterCurrent.
						"recursively add, since the line is now empty"
						self doAdd: g.
						^self ].

	"Use the previous break point"
	afterBreak := self current copyFrom: self lastBreak + 1 to: self current size.
	"subtract the width of the break"
	self currentWidth: self currentWidth - (self widthOf: (self current at: self lastBreak)).
	"subtract the widths of the things after the break"
	afterBreak do:
		[ :gl <Glyph> |
			self currentWidth: self currentWidth - (self widthOf: gl).	].

	self current remove: (self current size - self  lastBreak) + 1 at: self lastBreak.
	
	self enterCurrent.

	"now put the remaining ones on the next line, and then add g recursively"
	afterBreak
		do: [ :el <Glyph> |
					self doAdd: el ].
	self doAdd: g.!

doAddBreak: g <Glyph>
	"Add a glyph that is a good place to break a line, and which can be
		removed if the break is  taken.  Break chars are discarded if they
		are at the beginning or end of a line.  Also, consecutive ones are
		collapsed to one."

	| w <Int> |
	self atLeftMargin
		ifTrue: [ ^self ].
	"We don't check to see if we must insert a left margin because if we 
		were at the start of a line, we would have not inserted this anyway"
	w := self widthOf: g.
	(self wouldBreak: w)
		ifTrue: [	"must break line.  Is easy since this is a break glyph; just discard it."
						self enterCurrent.
						^self ].

	"See if it is redundant"
	self lastBreak = self current size
		ifTrue: [ ^self ].

	self current addLast: g.
	self currentWidth: self currentWidth + w.
	self lastBreak: self current size.!

doAddWithoutBreaking: g <Glyph>
	"Add a glyph, without breaking the line regardless of margins.  Everything
			past the right margin is just discarded. "

	| w <Int> afterBreak <SeqCltn[Glyph]> |
	self insertLeftMarginIfNeeded.
	w := (g naturalIn: self medium) enclosingRect width.
	(self wouldBreak: w)
		ifFalse: [	self current addLast: g.
							self currentWidth: self currentWidth + w.
							^self ].
	^self! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'constants' !


alignCenter ^<Symbol>

	^HTMLBuilder alignCenter!

alignLeft ^<Symbol>

	^HTMLBuilder alignLeft!

alignRight ^<Symbol>

	^HTMLBuilder alignRight!

defaultPainter ^<Painter>

	^Painter new
			font: (Font default newSpec
							typeface: 'Times New Roman';
							points: 12
						) font!

initialLeftMargin ^<Int>

	^30! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'control' !


add: g <Glyph>
	"Add a glyph, breaking the line if needed."

	"Make sure the glyph has a session, since
		we are going to compute preferences before
		it is put in any heirarchy"
	
	self doAdd: (self transform: g)!

addBreak: g <Glyph>
	"Add a glyph that is a good place to break a line, and which can be
		removed if the break is  taken.  Break chars are discarded if they
		are at the beginning or end of a line.  Also, consecutive ones are
		collapsed to one."

	self doAddBreak: (self transform: g)!

addBreakChar: c <Character>

	self addBreak: (self scaledPainter charGlyphFor: c)!

addChar: c <Character>

	self add: (self scaledPainter charGlyphFor: c).
	self lineHasNothingSubstantial: false.!

addCharWithoutBreaking: c <Character>

	self addWithoutBreaking: (self scaledPainter charGlyphFor: c).
	self lineHasNothingSubstantial: false.!

addVisual: visualBlock <[^Visual]> for: element <HTMLElement>
	"This should be used rather than add: to insert imbedded visuals
		that have state, or that might change their preferences, so
		that they can be associated with their element and reused
		across relayouts"
	
	self add:
		(self visualRegistry
			at: element
			ifPresent: [ :e <Visual> |
										e noParent	]
			ifAbsentPut: [ visualBlock value ]
		).
	self lineHasNothingSubstantial: false.!

addWithoutBreaking: g <Glyph>
	"Add a glyph, without breaking the line regardless of margins.  Everything
			past the right margin is just discarded. "

	self doAddWithoutBreaking: (self transform: g)!

breakLine
	"Break if necessary to ensure that we are at the start of a new line."
	
	self atLeftMargin
		ifFalse: [ self enterCurrent ].!

build: n <HTMLNode>
	"This is the entry point for page building"

	n buildFor: self.

	"flush last line if it has anything on it"
	self lineIsEmpty
		ifFalse: [	self enterCurrent ]!

emptyLine
	"enter an empty line"
	
	self breakLine; enterCurrent.!

forceBreakLine
	"Break to the beginning of the next line regardless of whether
	  the current line is empty"
	
	self atLeftMargin
		ifTrue: [ self current addLast: self lineSpacer. ].
	self enterCurrent.!

indented: width <Int> do: blk <[]>
	"evaluate blk with the left margin indented width pixels, and restore
		the left margin when done"

	self indentedAfterScaling: (self scale: width) do: blk!

verticalWhitespace
	"enter a blank line if needed to make sure that we are on a line that has
		nothing on the previous line"

	| needSpace <Boolean> |
	needSpace := self previousLineHadNothingSubstantial.
	self breakLine.
	needSpace
		ifFalse: [	"The previous line is not whitespace, so we need white space.
								Insert a vertical spacer so the line
								has some height"
							self current addLast: self lineSpacer.
							self enterCurrent.	]!

withGlyphTransformer: t <[Glyph,^Glyph]> do: blk <[]>

	| old <[Glyph,^Glyph]> |
	old := self glyphTransformer.
	self glyphTransformer: t.
	blk ensure: [ self glyphTransformer: old ]!

withPaint: p <Paint> do: blk <[]>

	| old <Painter> |
	old := self painter.
	self painter: (old copy paint: p).
	blk ensure: [ self painter: old ]!

withPainter: p <Painter> do: blk <[]>

	| old <Painter> |
	old := self painter.
	self painter: p.
	blk ensure: [ self painter: old ]! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'initialization-private' !


initFor: a <HTMLView>
rows: rs <OrdCltn[GlyphRow]>
pageWidth: w <Int>
topWindow: win <Window>
visualRegistry: reg <VarDict[HTMLElement,Visual]>
scaleFactor: s <Float>

	app := a.
	topWindow := win.
	rows := rs.
	self atParagraphStart: true.
	self previousLineHadNothingSubstantial: true.
	self lineHasNothingSubstantial: true.
	self scaleFactor: s.
	pageWidth := w.		"Don't scale the page width!!"
	self glyphTransformer: [ :gl <Glyph> | gl ].
	self leftMargin: self initialLeftMargin.
	self setupCurrent.
	self painter: self defaultPainter.
	self textPaint: Paint black.
	self linkPaint: Paint blue.
	self alignment: self alignLeft.
	self backdrop: (Painter new paint: Paint white).
	self visualRegistry: reg! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'private' !


alignCurrent

	| excess <Int> adjustment <Int> |
	self alignment = self alignLeft
		ifTrue: [ ^self ].
	excess := self pageWidth - self scaledRightMargin - self currentWidth.
	excess <= 0
		ifTrue: [ ^self ].

	adjustment := 
		self alignment = self alignRight
			ifTrue: [ excess ]
			ifFalse: [ excess // 2 ].
	self current add: (Glue xRigid: adjustment) beforeIndex: 1.
!

enterCurrent

	self removeEndBreaks.
	self alignCurrent.
	self rows addLast: (GlyphRow holding: self current).
	self previousLineHadNothingSubstantial: self lineHasNothingSubstantial.
	self setupCurrent.!

indentedAfterScaling: scaledWidth <Int> do: blk <[]>
	"evaluate blk with the left margin indented width pixels, and restore
		the left margin when done"

	| old <Int> diff <Int> newMargin <Int> |
	old := self scaledLeftMargin.
	newMargin := old + scaledWidth.

	self lineIsEmpty
		ifTrue: [	self currentWidth: newMargin.		]
		ifFalse: [	"if we are to the left of the new margin, add enough whitespace"
							diff := self currentWidth - newMargin.
							diff < 0
								ifTrue: [ self add: (Glue xRigid: diff negated) ].
							self lastBreak: nil.	].
	self scaledLeftMargin: newMargin.
	self atParagraphStart: true.
	blk ensure: [ self scaledLeftMargin: old ]!

insertLeftMarginIfNeeded

	self current size == 0
		ifTrue: [ self current addLast: self leftMarginGlyph.
						"We don't adjust the current width because the margin
							was already accounted for when the line was set up"		]
	!

leftMarginGlyph ^<Glyph>

	^Glue xRigid: self scaledLeftMargin!

lineSpacer ^<Glyph>
	"A glyph used to give an empty line some height"

	^(self scalePainter: Painter default) charGlyphFor: Character space!

removeEndBreaks

	self lastBreak = self current size
		ifTrue: [ | last <Glyph> |
						last := self current removeLast.
						"we must correct the width so that alignment ops work right later"
						self currentWidth: self currentWidth - (self widthOf: last). 	]!

scalePainter: p <Painter> ^<Painter>

	| scaled <Painter> |
	scaled := p copy.
	scaled font: (p font newSpec points: (self scale: p font points)) findFont.
	^scaled!

scaledLeftMargin ^<Int>

	^scaledLeftMargin!

scaledLeftMargin: m <Int>

	scaledLeftMargin := m!

scaledPainter ^<Painter>

	^scaledPainter!

scaledPainter: p <Painter>

	scaledPainter := p!

scaledRightMargin ^<Int>

	scaledRightMargin isNil
			ifTrue: [ scaledRightMargin := self scale: self rightMargin ].
	^scaledRightMargin!

setupCurrent

	current := OrderedCollection[Glyph] new.
	self currentWidth: self scaledLeftMargin.
	self lineHasNothingSubstantial: true.
	self lastBreak: nil.		"no break yet"
	"We put the left margin glyph in lazily when the first non-margin glyph
		is put on the line (even though we count its width now)
		so that if we are about to 'unindent', the margin will get the new width."!

transform: g <Glyph>  ^<Glyph>

	"We must set the session, since
		we are going to compute preferences before
		it is put in any heirarchy"
	^(self glyphTransformer value: g)
			session: self app session!

unscale: input <Int>  ^<Int>
	"unscale the input and return it"

	^(input asFloat / self scaleFactor) asInteger!

widthOf: g <Glyph> ^<Int>

	^(g naturalIn: self medium) enclosingRect width.!

wouldBreak: glyphWidth <Int>	 ^<Boolean>
	"return true if adding a glyph with this width would go past the right margin and is not the
		left margin or the first thing on the line (to prevent endless breaking)"

	^((self currentWidth + glyphWidth + self scaledRightMargin) > self pageWidth)
			and: [ self atLeftMargin not ]! !

! (Delta mirrorFor: #HTMLBuilder) methodsFor: 'testing' !


atLeftMargin ^<Boolean>

	^self currentWidth <= self scaledLeftMargin!

lineIsEmpty ^<Boolean>

	^self current size <= 1! !

