Delta define: #Smalltalk as: (
(Class subclassOf: 'Object' instanceVariables: '') classVariables: 'InitializingTypeInfo <Boolean>
	ClassesWithSubclasses <IdentitySet[Class]> 
	Cache <IdentityDict[Symbol, GlobalAssociation]>
	DependencyObject <NotifyingObject>
		"We have an explicit dependency object since one has to mix in
			NotifyingObject mixin to get dependency behavior. Smalltalk is
			currently just a class, so this is not possible."
	FileInDirectory <FilePath>') !

(Delta mirrorFor: #Smalltalk) revision: '$Revision: 1.25 $'!

(Delta mirrorFor: #Smalltalk) group: 'base'!

(Delta mirrorFor: #Smalltalk)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'accessing' !


assocAt: key <Str> ^ <GlobalAssociation>

^self assocAt: key ifAbsent:[self error: key, ' not found in System Dictionary'].!

assocAt: key <Str>  ifAbsent: blk <[]> ^ <GlobalAssociation>

^self cache at: key ifAbsent: blk!

at: key <Str> ^ <Object>

^self at: key ifAbsent: [self error: key, ' not found in System Dictionary']!

at: key <Str> ifAbsent: blk <[^Object]> ^ <Object>

	^(self cache at: key ifAbsent: [^blk value]) value!

at: key <Str> put: value <Object> ^ <Object>

| assoc <GlobalAssociation> |
self flushCache.
(assoc := self assocAt: key ifAbsent: [nil]) isNil
	ifTrue: [		{{primitiveSmalltalkAt: key Put: value ifFail: [ :err <Symbol> |  self error: err ]}}.
						self cache at: key put: (self uncachedAssocAt: key) ]
	ifFalse: [	self changedRemoveKey: key value: assoc value.
						assoc value: value ].
self changedAddKey: key value: value.
^value!

removeKey: key <Str> ^ <Object>

^self removeKey: key ifAbsent: [self error: key, ' not found in System Dictionary']!

removeKey: key <Str> ifAbsent: blk <[^Object]> ^ <Object>

| assoc <GlobalAssociation> |

self flushCache.
1 to: self size do: [ :index <Int> |
	assoc := {{primitiveSmalltalkAt: index ifFail: [ :err <Symbol> |  self error: err ]}}.
	assoc key = key ifTrue: [
		{{primitiveSmalltalkRemoveAt: index ifFail: [ :err <Symbol> |  self error: err ]}}.
		self changedRemoveKey: key  value: assoc value.
		^key ].
].
^blk value!

size ^ <SmallInteger>

^{{primitiveSmalltalkSize}}! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'binding' !


declareGlobal: name <Symbol> type: type <Str>

^self declareGlobal: name type: type initialValue:self nilObj
   !

declareGlobal: name <Symbol>  type: type <Str> ifFail: blk <[Str, ^DoesNotMatter]>

^self declareGlobal: name type: type initialValue:self nilObj ifFail: blk
   !

declareGlobal: name <Symbol>  type: type <Str> ifThere: blk <[Str, ^DoesNotMatter]>

^self declareGlobal: name type: type initialValue:self nilObj ifThere: blk
   !

declareGlobal: name <Symbol> type: type <Str>  initialValue: initVal <Object>

self declareGlobal: name type: type initialValue: initVal ifThere:[ :msg <Str>  | Transcript show: msg; cr].
   !

declareGlobal: name <Symbol> type: type <Str> initialValue: initVal <Object> ifFail: blk <[Str, ^BottomType]>

self assert:[type isString].
self assert:[name isString or:[name isSymbol]].
(self includesKey: name) ifTrue: [ ^blk value: 'already defined'].
self at: name asSymbol put: initVal.
(GlobalVariableMirror on: (self assocAt: name)) declaredType: type ifFail: [: s <Str> :i <Int> | blk value: s].
!

declareGlobal: name <Symbol> type: type <Str> initialValue: initVal <Object> ifThere: blk <[Str, ^BottomType]>

self assert:[type isString].
self assert:[name isString or:[name isSymbol]].
(self includesKey: name) ifTrue: [ blk value: 'already defined'].
self at: name asSymbol put: initVal.
(GlobalVariableMirror on: (self assocAt: name)) declaredType: type ifFail: [: s <Str> :i <Int> | blk value: s].!

define: name <Symbol>  as: constructor <Mirror>
    self define: name as: constructor category: nil!

define: name <Symbol> as: constructor <Mirror> category: cat <Symbol>

	"Define or change entry based on the constructor"

	self at: name
		ifAbsent: [DeltaGlobals at: name put: (constructor placeHolderFor: name).].
                 
	constructor name: name ifFail:[: e <Str> | self error: 'Could not install ', name, ' : ', e.].   
	(self assocAt: name) makeConstant.            

	DeltaGlobals removeKey: name ifAbsent:[].
	ClassesWithSubclasses := nil		"Potential class hierarchy change occurred, clear cached info"
!

let: aSymbol <Symbol> be: aString <Str>
	"Define type alias based on aString"

self let: aSymbol be: aString ifFail: [:e <Str> | self error: e]
!

let: aSymbol <Symbol> be: aString <Str> ifFail: fb <[Str, ^DoesNotMatter]>
	"Define type alias based on aString"

	| entry <Object> |

     entry := self at: aSymbol ifAbsent: [
		self at: aSymbol put:  ((TypeAliasMirror on: (TypeAlias new name: aSymbol)) alias: aString) reflectee].
     entry class = TypeAlias 
            ifFalse:[
                           (self assocAt: aSymbol) isConstant 
                                    ifTrue:[fb value: 'Cannot define type alias ', aSymbol, ' . Remove ', entry class name, ' ', aSymbol, ' first. '].
                           self at: aSymbol put: entry
                           ].  
	"Existing entry will be overridden"
	(self assocAt: aSymbol) makeConstant.
	(TypeAliasMirror on: entry) alias: aString.

	"This version parses and sets source twice if code is legal."
	self deltaHack.
	"There no handling of dependencies. Also, only aliases for types are allowed. 
	Also, this should probably work as part of the general scheme for converting among entities"
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'dependencies' !


addDependent: o <Object>

	DependencyObject addDependent: o !

changedAddKey: key <Object> value: value <Object>

	DependencyObject changed: #addGlobal with: key ,, value!

changedRemoveKey: key <Object> value: oldValue <Object>

	DependencyObject changed: #removeGlobal with: key ,, oldValue!

removeDependent: o <Object>

	DependencyObject removeDependent: o ! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'evaluation' !


blockToEvaluateFor: src <Str> ifError: blk <[Str,Int,^X def]> ^<[] | X>
	"Build and return a block that when evaluated executes src, which is a piece of top-level smalltalk source code"

	^self blockToEvaluateFor: src receiver: nil ifError: blk
!

blockToEvaluateFor: src <Str> receiver: oop <Object> ifError: blk <[Str,Int,^X def]> ^<[] | X>
	"Build and return a block that when evaluated executes src,  which is a piece of smalltalk source code in scope of oop"

	| scope <DeltaScope> ast <DeltaMethod> method <Method> |
	scope := DeltaUntypedClassScope for: (AbstractClassMirror on: oop class).
	ast := (DeltaParser new parseDoitExpr: src within: scope ifError: [ :m <Str> :p <Int> | ^blk value: m value: p ]) body.
	ast := DeltaRewriter new rewrite: ast.
	method := (DeltaCompiler forClass: nil optimize: false ifError: [self error: 'Compilation error']) compileDoit: ast.
	^method convertToClosure: oop
!

evaluate: src <Str> ifError: blk <[Str,Int,^X def]> ^<Object | X>
	"Execute src which is a piece of top-level smalltalk source code"
	
	^(self blockToEvaluateFor: src ifError: [ :err <Str> :spot <Int> |	^blk value: err value: spot ]) value
!

evaluate: src <Str> receiver: oop <Object> ifError: blk <[Str,Int,^X def]> ^<Object | X>
	"Execute src which is a piece of smalltalk source code in the scope of oop"
	
	^(self blockToEvaluateFor: src receiver: oop ifError: [ :err <Str> :spot <Int> | ^blk value: err value: spot ]) value
!

recompileAllMethods

	| counter <Int> |
	counter := 0.
	self classesAndMixinsReflectiveDo: [ :mirror <ClassMirror|MixinMirror> |
		Platform errorStream show: 'Recompiling ', mirror name; cr.
		mirror recompileAllMethodsIfFail: [ self shouldNotHappen ].
		"(counter := counter + 1) = 20
			ifTrue: [	counter := 0. VM collectGarbage ]"
	]

! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'file in - temporary' !


fileIn: fileName <String>

self fileInFromFile: (FilePath for: fileName)!

fileInDirectory ^ <FilePath>

	FileInDirectory isNil
		ifTrue: [FileInDirectory := FilePath currentDirectory].
	^FileInDirectory!

fileInDirectory: directory <FilePath>

	FileInDirectory := directory!

fileInFromAbsFile: file <FilePath>

	| stream <CharInputStream> savedDirectory <FilePath> |
	Transcript cr; show: 'Filing in from file ', file name.
	savedDirectory := self fileInDirectory.
	self fileInDirectory: file containingDirectory.
	[stream := file charInputStream.
	[ stream fileIn ] ensure: [ stream close ]]
		ensure: [self fileInDirectory: savedDirectory]!

fileInFromFile: file <FilePath>

	| absFile <FilePath> |
	absFile := file isAbsolute
						ifTrue: [file]
						ifFalse: [self fileInDirectory, file].
	
	self fileInFromAbsFile: absFile!

fileInWorld
"Temporary hack to build clean source base. Use this only if you know
what you are doing!!"
| i <Integer>  pc <OrderedCollection[Str]> |
i := 0.
self classesDo:[:c <Class> | 
                           self fileInFromFile: (FilePath for: 'world\', c name,'.dlt').
                           i > 99 ifTrue:[ i := 0.
                           Type zapAllTypes.
                            VM collectGarbage.] ifFalse:[i := i + 1.].
                           ].                                                    
                           Transcript show: 'Done with classes'; cr.
self mixinsDo:[:m <Mixin> | 
                           m isMeta ifFalse:[self fileInFromFile: (FilePath for: 'world\',m name,'.dlt')].
                           ].
 self typeAliasesDo:[:t <TypeAlias> | 
                           self fileInFromFile: (FilePath for: 'world\', t name,'.str').
                           ].
                           
 pc := OrderedCollection[Str] new.
self protocolsDo:[:p <Protocol> | pc add: p name].
pc do:[:n <Str> | self removeKey: n].

pc do:[:pn <Str> | 
                           self fileInFromFile: (FilePath for: 'world\', pn,'.str').
                           ].! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'file out' !


fileOutWorldToFile: file <FilePath>

	| 	openGroups <Dictionary[Str,CharOutputStream]> 
		worldDir <FilePath> 
		worldName <Str> 
		ap <IdentitySet[Object]>
		sortedClasses <SortedCollection[Class]>
		sortedMixins <SortedCollection[Mixin]>
		sortedProtocols <SortedCollection[Protocol]>
		sortedTypeAliases <SortedCollection[TypeAlias]>
		sortedGlobalVariables <SortedCollection[GlobalAssociation]>
		|

	sortedClasses := SortedCollection[Class] sortBlock: [ :e1 <Class> :e2 <Class> | e1 name <= e2 name ].
	Smalltalk classesDo: [ :class <Class> | sortedClasses add: class ].
	sortedMixins := SortedCollection[Mixin] sortBlock: [ :e1 <Mixin> :e2 <Mixin> | e1 name <= e2 name ].
	Smalltalk mixinsDo: [ :mixin <Mixin> | sortedMixins add: mixin ].	
	sortedProtocols := SortedCollection[Protocol] sortBlock: [ :e1 <Protocol> :e2 <Protocol> | e1 name <= e2 name ].
	Smalltalk protocolsDo: [ :protocol <Protocol> | sortedProtocols add: protocol ].	
	sortedTypeAliases := SortedCollection[TypeAlias] sortBlock: [ :e1 <TypeAlias> :e2 <TypeAlias> | e1 name <= e2 name ].
	Smalltalk typeAliasesDo: [ :alias <TypeAlias> | sortedTypeAliases add: alias  ].
	sortedGlobalVariables := SortedCollection[GlobalAssociation] 
															sortBlock: [ :e1 <GlobalAssociation> :e2 <GlobalAssociation> | 
																					e1 key <= e2 key ].
	Smalltalk globalVariablesDo: [ :global <GlobalAssociation> | sortedGlobalVariables add: global  ].

	openGroups := Dictionary[Str,CharOutputStream] new.
	worldName := file elements last name readStream upTo: $. .
	worldDir := file containingDirectory.
	ap := IdentitySet[Object] new.
	[	
		sortedClasses do: [ :class <Class> |
			self traverseClass: class alreadyProcessed: ap do: [ :e <Class|Mixin> | 
				self fileOutDefinition: (Mirror on: e) directory: worldDir world: worldName openGroups: openGroups ] ].
		sortedMixins do: [ :mixin <Mixin> |
			self traverseMixin: mixin alreadyProcessed: ap do: [ :e <Class|Mixin> | 
				self fileOutDefinition: (Mirror on: e) directory: worldDir world: worldName openGroups: openGroups ] ].
		sortedProtocols do: [ :e <Protocol> | 
			self fileOutDefinition: (ProtocolMirror on: e) directory: worldDir world: worldName openGroups: openGroups ].
		sortedTypeAliases do: [ :e <TypeAlias> | 
			self fileOutDefinition: (TypeAliasMirror on: e) directory: worldDir world: worldName openGroups: openGroups ].
		sortedGlobalVariables do: [ :e <GlobalAssociation> | | g <GlobalVariableMirror> |
			g := GlobalVariableMirror on: e.
			g declaredTypeString isEmpty 
				ifFalse:[self fileOutDefinition: g directory: worldDir world: worldName openGroups: openGroups ]].
	] ensure: [
		openGroups do: [ :stream <CharOutputStream> | stream close ]
	].
	(Workspace coerce: Transcript) visual
		promptOk: 'File out world done'
		title: 'Information'
		type: #exclamation
		action: []
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'file out-private' !


defaultFileoutRevision ^ <Str>

	^'"$Revi', 'sion:$"'			"Protect string from RCS !!"!

fileOutDefinition: m <Mirror> directory: dir <FilePath> world: w <Str> openGroups: ogs <Dictionary[Str, CharOutputStream]>

	| defStream <CharOutputStream> |
	defStream := CharacterInputOutputConverter on: (dir, (FilePath for: m fileName)) writeStream.
	[ (DefinitionWriter for: m) fileOutOn: defStream ] ensure: [ defStream close ].
	(self groupFor: w directory: dir openGroups: ogs)
		nextPutAll: 'Delta fileInFromFile: (FilePath for: ', m fileName printString, ') !!'; cr; flush.
	(self groupFor: m group directory: dir openGroups: ogs)
		nextPutAll: 'Delta fileInFromFile: (FilePath for: ', m fileName printString, ') !!'; cr; flush.
!

groupFileExtension ^ <Str>

	^'.gr'!

groupFor: name <Str>  directory: dir <FilePath> openGroups: ogs <Dictionary[Str, CharOutputStream]> ^ <CharOutputStream>

	| file <FilePath> rs <CharInputStream> ws <CharOutputStream> revision <Str> |
	(ws := ogs at: name ifAbsent: [ nil ]) notNil
		ifTrue: [	^ws ].
	file := dir, (FilePath for: (name, self groupFileExtension)).
	file exists
		ifTrue: 	[	rs := file charInputStream.
							[ revision := rs nextChunk ] ensure: [ rs close ] ]
		ifFalse: 	[	revision := self defaultFileoutRevision ].
	ws := file charOutputStream.
	ws nextChunkPut: revision; cr.
	^ogs at: name put: ws!

traverseClass: class <Class> alreadyProcessed: ap <IdentitySet[Object]> do: blk <[Class|Mixin]>

	| sc <Behavior> mvm <MixinVMMirror> master <Class> |
	(ap includes: class) 
		ifTrue: [	^self ].
	sc := class superclassIfAbsent: [ nil ].
	sc notNil
		ifTrue: [	self traverseClass: sc alreadyProcessed: ap do: blk ].
	mvm := (ClassVMMirror on: class) mixin.
	master := mvm masterInvocation.
	master == class
		ifTrue: [		blk value: class ]
		ifFalse: [	master isNil
								ifTrue: [		self traverseMixin: mvm reflectee alreadyProcessed: ap do: blk ]
								ifFalse: [	self traverseClass: master alreadyProcessed: ap do: blk ] ].
    ap add: class
!

traverseMixin: mixin <Mixin> alreadyProcessed: ap <IdentitySet[Object]> do: blk <[Class|Mixin]>

	| sct <Type> |
	(ap includes: mixin) 
		ifTrue: [	^self ].
	sct := (Type for: mixin) superclassType.
	sct notNil
		ifTrue: [	self traverseClass: sct classObj alreadyProcessed: ap do: blk ].
	blk value: mixin.
    ap add: mixin
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'initialization' !


initialize
	DeltaCache := Dictionary new.
	BootStrapping := true.
	Delta := Smalltalk.
	DeltaGlobals := DeltaGlobalScope new initialize: Delta.
	Type := DeltaType.
	Type init.
	DeltaCopyDownMethods := false.
	DeltaTracePrimitiveCalls := false.
	DeltaHCodeGenerator initializeBCTable.
	DeltaScanner initialize.
	MixinDeclMirror init.
	self initializeUpdateInfo.
	EnableFloatValues := true.
	AutoFloatConversion := false.
	ReportTypeLoading := false.
	DependencyObject := NotifyingObject new.
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'initializing type info - temporary' !


addBasicTypeStructureForClass: class

self addBasicTypeStructureForInvocation: class.
self addBasicTypeStructureForMixin: class mixin.
!

addBasicTypeStructureForInvocation: class

class typeInfo: (DeltaMixinInvocationSide new initialize klass: class).
class klass typeInfo: (DeltaMixinInvocationSide new initialize klass: class klass).
class typeInfo dual: class klass typeInfo.
class klass typeInfo dual: class typeInfo.

!

addBasicTypeStructureForMixin: mixin

| cDecl mixinTypeInfo classSideTypeInfo mirror i |

Type typeData at: mixin ifAbsent: [ 
	cDecl := DeltaClassUpdate new  abstract: false; 
                                                       branded: true; 
                                                       monotonic: true; 
                                                       subtype: true.
	mixinTypeInfo :=  DeltaSideUpdate new initialize.
	cDecl instanceSide: mixinTypeInfo.

	classSideTypeInfo := DeltaSideUpdate new initialize classDecl: cDecl.

	mixin typeInfo: mixinTypeInfo.
	mixin classMixin typeInfo: classSideTypeInfo.

	"Add instvar and classvar decls to scopes"

	mirror := MixinVMMirror on: mixin.

	i := 1.
	mirror instVarNamesDo: [ :n | 
		mixinTypeInfo scope at: n put: ((DeltaInstVar new name: n type: nil) ordinalNumber: i). i := i + 1].
	mirror classVarNamesDo: [ :n |
		| var |
		var := DeltaClassVar new name: n type: nil.
		mixinTypeInfo scope at: n put: var.
		classSideTypeInfo scope at: n put: var]
]!

addBasicTypeStructureToObject

| class cDecl mixinTypeInfo |


class := self at: #Object.
class typeInfo: (DeltaObjectInvocationSide new initialize klass: class).
class klass typeInfo: (DeltaObjectClassInvocationSide new initialize klass: class klass).
class typeInfo dual: class klass typeInfo.
class klass typeInfo dual: class typeInfo.


cDecl := DeltaClassUpdate new abstract: false; 
                                                       branded: true; 
                                                       monotonic: true; 
                                                       subtype: true.
mixinTypeInfo :=  DeltaSide new initialize.
cDecl instanceSide: mixinTypeInfo.

class mixin typeInfo: mixinTypeInfo.
class mixin classMixin typeInfo: (DeltaObjectClassSide new initialize classDecl: cDecl).
!

addSuperclassTypeStructureForClass: class

self addSuperclassTypeStructureForInvocation: class.
class isMixinInvocation ifFalse: [
	class mixin typeInfo superclassType:(self classReferenceTo: class superclass).
	class klass mixin typeInfo superclassType: (self metaclassReferenceTo: class superclass)].
!

addSuperclassTypeStructureForInvocation: class

class typeInfo superclassType: (self classReferenceTo: class superclass).
class klass typeInfo superclassType: (self metaclassReferenceTo: class superclass).
!

addSuperclassTypeStructureToObject

| class  object |

object := self at: #Object.
class := self at: #Class.

"set up Object superclass type info on class side, at invocation and at mixin"
self addBasicTypeStructureForClass: class.

class typeInfo mixinType: class mixin typeInfo.
class klass typeInfo mixinType: class klass mixin typeInfo.

object klass typeInfo superclassType:(self classReferenceTo: class).
object klass mixin typeInfo superclassType: (self classReferenceTo: class).
!

addTypeStructureForClass: class
| sc mi currentStatus |
Type typeData at: class ifAbsent: [
	currentStatus := self initializingTypeInfo.
	self initializingTypeInfo: true.
	sc := class superclassIfAbsent: [nil].
	sc notNil ifTrue: [
		self addTypeStructureForClass: sc.
		sc isMixinInvocation ifTrue: [
			mi := (MixinVMMirror on: sc mixin) masterInvocation.
			mi notNil ifTrue: [
				self addTypeStructureForClass: mi ]]].

	self addBasicTypeStructureForClass: class.
	class typeInfo mixinType: class mixin typeInfo.
	class klass typeInfo mixinType: class klass mixin typeInfo.
	self addSuperclassTypeStructureForClass: class.
	self initializingTypeInfo: currentStatus.
 ].
!

addTypeStructureForMixin: mixin

| currentStatus |
currentStatus := self initializingTypeInfo.
self initializingTypeInfo: true.
self addBasicTypeStructureForMixin: mixin.
self initializingTypeInfo: currentStatus
!

addTypeStructureToAllClasses

self addTypeStructureToObject.
self klassesDo:[:c |                            
                          c name = #Class
                               ifFalse:[c name = #Object ifFalse:[self addTypeStructureForClass: c]]
                               ifTrue:[self addSuperclassTypeStructureForClass: c].                                                               
                               ].!

addTypeStructureToAllNamedMixins

self mixinsDo: [ :m | self addTypeStructureForMixin: m ].
!

addTypeStructureToObject

| class |

self addBasicTypeStructureToObject.
class := self at: #Object.
class klass typeInfo mixinType: class klass mixin typeInfo.
self addSuperclassTypeStructureToObject.



!

classReferenceTo: class <Class> ^ <DeltaClassId | DeltaMixinInvocationNode>
| node <DeltaMixinInvocationNode> |

^class isMixinInvocation
	ifTrue: [
		node := DeltaMixinInvocationNode new mix: (self mixinReferenceTo: class mixin) on: (self classReferenceTo: class 

superclass).
		node classObj: class.
		node]
	ifFalse: [
		DeltaClassId new setId: class name; scope: DeltaGlobals]
!

initializeTypeInfo

	self initializingTypeInfo: true.
	self updateInvocationInfo.
	self initializingTypeInfo: false.

!

initializeUpdateInfo

	self initializingTypeInfo: true.
	self updateInvocationInfo.
	self initializingTypeInfo: false.

!

initializingTypeInfo ^ <Boolean>
	^InitializingTypeInfo!

initializingTypeInfo: b
	InitializingTypeInfo := b!

klassesDo: aBlock
	| sc |
	self initializingTypeInfo ifFalse: [self error: 'Should not be called'].
	self do: [ :e | e class class = Metaclass ifTrue: [
		aBlock value: e.
		sc := e superclassIfAbsent: [nil].
		[sc notNil] whileTrue: [
			sc isMixinInvocation
				ifTrue: [ 
					aBlock value: sc.
					sc := sc superclassIfAbsent: [nil]]
				ifFalse: [
					sc := nil]]]].
!

metaclassReferenceTo: class

^(self classReferenceTo: class) dualClassType!

mixinReferenceTo: mixin
| id |
id := DeltaClassId new setId: mixin name; scope: DeltaGlobals.
(MixinVMMirror on: mixin) masterInvocation isNil
	ifTrue: [^id]
	ifFalse: [^DeltaMixinDerivationNode new class: id selector: #mixin]
!

updateInvocationInfo

	self klassesDo: [ :class | (MixinDeclMirror on: class mixin) addInvocation: class ].
	! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'iterating' !


associationsDo: blk <[GlobalAssociation]>

	| assoc <GlobalAssociation> |
	1 to: self size do: [ :index <Int> |
		assoc := {{primitiveSmalltalkAt: index ifFail: [ :err <Symbol> |  self error: err ]}}.
		blk value: assoc.
	]
!

classesAndMixinsReflectiveDo: blk <[ClassMirror|MixinMirror]>

	self classesReflectiveDo: blk.
	self mixinsReflectiveDo: blk.
!

classesDo: aBlock <[Class]>

	self constantsDo: [ :e <Object> | Metaclass = (Reflection classOf: (Reflection classOf: e)) ifTrue: [aBlock value: e]].!

classesReflectiveDo: blk <[ClassMirror]>

	self classesDo: [ :class <Class> |
		blk value: (ClassMirror on: class).
		blk value: (ClassMirror on: class) classSide ].

!

constantsDo: blk <[Object]>

	self associationsDo: [ :assoc <GlobalAssociation> | 
		assoc isConstant
			ifTrue: [ blk value: assoc value ] 
	]
!

definitionsDo: blk <[Class | Mixin | Protocol | TypeAlias]>

	self classesDo: blk.
	self mixinsDo: blk.
	self protocolsDo: blk.
	self typeAliasesDo: blk.
!

definitionsReflectiveDo: blk <[ClassMirror | MixinMirror | ProtocolMirror | TypeAliasMirror]>

	self classesReflectiveDo: blk.
	self mixinsReflectiveDo: blk.
	self protocolsReflectiveDo: blk.
	self typeAliasesReflectiveDo: blk.
!

do: blk <[Object]>

	self associationsDo: [ :assoc <GlobalAssociation> | 
		blk value: assoc value ]
!

globalVariablesDo: blk <[GlobalAssociation]>

self associationsDo:
	[: a <GlobalAssociation> |
		(Reflection isGlobalVariable: a)
			ifTrue: [blk value: a]
	].!

globalVariablesReflectiveDo: blk <[GlobalVariableMirror]>

Smalltalk globalVariablesDo:
	[: a <GlobalAssociation> |
		blk value: (GlobalVariableMirror on: a)
	].!

keysDo: blk <[Symbol]>

	self associationsDo: [ :assoc <GlobalAssociation> | 
		blk value: assoc key
	]
!

mixinsDo: blk <[Mixin]>

	self constantsDo: [ :e  <Object> | ClassMixin = (Reflection classOf: e) ifTrue: [blk value: e]].!

mixinsReflectiveDo: blk <[MixinMirror]>

	self mixinsDo: [ :mixin <Mixin> |
		blk value: (MixinMirror on: mixin).
		blk value: (MixinMirror on: mixin) classSide ].
!

protocolsDo: blk <[Protocol]>

	self constantsDo: [ :e <Object>  | Protocol = (Reflection classOf: e) ifTrue: [blk value: e]].
!

protocolsReflectiveDo: blk <[ProtocolMirror]>

	self protocolsDo: [ :protocol <Protocol> |
		blk value: (ProtocolMirror on: protocol).
		blk value: (ProtocolMirror on: protocol) classSide ].

!

typeAliasesDo: blk <[TypeAlias]>

	self constantsDo: [ :e <Object> | TypeAlias = (Reflection classOf: e)  ifTrue: [blk value: e]].
!

typeAliasesReflectiveDo: blk <[TypeAliasMirror]>

	self typeAliasesDo: [ :alias <TypeAlias> |
		blk value: (TypeAliasMirror on: alias) ].

! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'licensing and credits' !


credits

Transcript cr;
  show: 'Lars Bak'; cr;
  show: 'Gilad Bracha'; cr;
  show: 'Steffen Grarup'; cr;
  show: 'Robert Griesemer'; cr;
  show: 'David Griswold'; cr;
  show: 'Urs Hoelzle'; cr.!

license

	(HTMLView new model: (URL forFilePath: self sourceLicensePath)) launch
!

sourceLicensePath ^ <FilePath>

^FilePath currentDirectory, (FilePath for: 'sourceLicense.html')! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'oop creation - temporary' !


createLiteral: value <Object> ^ <Object>

	"Called from the bytecode compiler for literal nodes"
	"Eventually, the scanner/parser should create literals
	directly, thus createLiteral doesn't have to do anything anymore - gri 4/10/96"
	value == true ifTrue: [ ^ true ].
	value == false ifTrue: [ ^ false ].
	value == nil ifTrue: [ ^ nil ].

     value isCharacter ifTrue:[^value]. "Literal characters"
	value isSymbol ifTrue: [ ^value ].						"Literal symbols"
	value isString ifTrue: [ ^value asSymbol ].			"Literal strings"
	value isCollection ifTrue: [								"Literal arrays"
		| a <Array[Object]> |
		a := Array new: value size.
		1 to: value size do: [ :i | a at: i put: (self createLiteral: (value at: i) value) ].
		^a shallowCopyTenured ].
	^value shallowCopyTenured							"Other literals (tenuring actually only needed 

for floats)"
!

createMethod: sel code: code nofArgs: nofArgs flags: flags debugInfo: info

	| bytes <ByteArray> oops <Array> oopIndex <Int> |

	self assert: [code size \\ 4 = 0].
	bytes := ByteArray new: code size.
	oops := Array new: code size // 4.
	oopIndex := 1.
	[oopIndex <= oops size] whileTrue: [
		| e <Object> bcIndex <Int> |
		bcIndex := ((oopIndex - 1) * 4) + 1.
		e := code at: bcIndex.
		(code holdsOopAt: bcIndex)
			ifFalse: [
				oops at: oopIndex put: 0.					"Add void entry (void entries are smi 0)"
				bytes at: bcIndex put: e.					"Add byte code"
				1 to: 3 do: [ :i <Int> | 							"Add next 3 byte codes"
					e := code at: bcIndex + i.
					self assert: [e isSmallInteger].
					bytes at:  bcIndex + i put: e]]				
			ifTrue: [
				oops at: oopIndex put: e.					"Add oop to object array"
				bytes at: bcIndex put: 0.					"Add zero to byte array"
				1 to: 3 do: [ :i <Int> | 							"Fill byte array with 4 zeroes"
					| ee <Object> |
					ee := code at: bcIndex + i.
					self assert: [e == ee].
					bytes at:  bcIndex + i put: 0]].
		oopIndex := oopIndex + 1].

	^{{primitiveConstructMethod: sel flags: flags nofArgs: nofArgs debugInfo: info scopeInfo shallowCopyTenured bytes: bytes oops: oops ifFail: [:e <CompressedSymbol> | self error: 'Method creation failed: ', e]}}.!

createObjArray: c <Cltn[Object]> ^ <Array[Object]>

	^c asArray!

createSymbol: str <String> ^ <Symbol>

	^str asSymbol!

falseObj
	^false!

nilObj
	^nil!

trueObj
	^true! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'private' !


buildCache

	Cache := Dictionary[Symbol, GlobalAssociation] new: self size.
	self vmAssociationsDo:
			[ :assoc <GlobalAssociation> |
				Cache at: assoc key put: assoc]!

cache ^<VarDict[Symbol,Object]>

	Cache == nil
		ifTrue: [ self buildCache ].
	^Cache!

computeClassesWithSubclasses ^<IdentitySet[Class]>

	"Computes a set of all classes (including anonymous mixin invocations) that have at least one subclass"

	| set <IdentitySet[Class]> sc <Class> |

	set := IdentitySet[Class] new.
	Smalltalk classesDo: [ :e <Object> |
		e class class == Metaclass 
			ifTrue: [	sc := (guaranteed <Behavior> e) superclassIfAbsent: [nil].
							[ sc notNil ] 
								whileTrue: [	set add: sc.
													(ClassVMMirror on: sc) isMixinInvocation 
														ifTrue: [ 	sc := sc superclassIfAbsent: [nil] ]
														ifFalse: [	sc := nil ] ] ] ].
     ^set
!

flushCache

	Cache := nil.
	ClassesWithSubclasses := nil.!

uncachedAssocAt: key <Object> ^ <GlobalAssociation>

^self uncachedAssocAt: key ifAbsent: [self error: key, ' not found'].!

uncachedAssocAt: key <Object> ifAbsent: blk <[^GlobalAssociation]> ^ <GlobalAssociation>

self associationsDo:[:a <GlobalAssociation> | a key = key ifTrue:[^a]].
^blk value.!

vmAssociationsDo: blk <[GlobalAssociation]>

| assoc <GlobalAssociation> |
1 to: self size do: [ :index <Int> |
	assoc := {{primitiveSmalltalkAt: index ifFail: [ :err <Symbol> |  self error: err ]}}.
	blk value: assoc
].! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'typechecker-needs' !


behaviorHierarchy ^ <Array[Symbol]>
" Returns an array of names of the superclasses of Object class"
^#(Object Behavior Class)!

includesKey: k <Symbol> ^ <Boolean>

self at: k ifAbsent: [^false].
^true
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'typechecking' !


typecheckWorld

	Type  doChecks: 
		[	Smalltalk classesDo: [: e <Class> | self typecheckMirror: (Mirror on: e)].
			Smalltalk mixinsDo: [: e <Mixin> | self typecheckMirror: (Mirror on: e)].
			Smalltalk protocolsDo: [: e <Protocol> | self typecheckMirror: (Mirror on: e)].
			Smalltalk typeAliasesDo: [: e <TypeAlias> | (Mirror on: e) typecheck].
			DeltaGlobals globalVariablesDo:
				[: e <DeltaGlobalVar> | 
					| ga <GlobalAssociation> |
					ga := Smalltalk 	assocAt: e name 
									ifAbsent: [		Transcript show: e name, ' missing from global scope'; cr.  
															nil ].
					nil = ga ifFalse:[(Mirror on: ga) typecheck].
				].																			
        ].
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'typechecking private' !


typecheckMirror: m <Mirror>

	m typecheck. 
	m classSide typecheck
! !

! (Delta mirrorFor: #Smalltalk) classSide methodsFor: 'utility' !


classesWithSubclasses ^<IdentitySet[Class]>

	"Answers a set of all classes (including anonymous mixin invocations) that have at least one subclass"

	ClassesWithSubclasses isNil
		ifTrue: [	ClassesWithSubclasses := self computeClassesWithSubclasses ].
	^ClassesWithSubclasses!

implementorsMatching: pattern <Str> ^ <SeqCltn[Tuple[Mirror, Symbol]]>

	| result <OrderedCollection[Tuple[Mirror, Symbol]]> |
	result := OrderedCollection[Tuple[Mirror, Symbol]] new.
	self classesAndMixinsReflectiveDo: [ :m <ClassMirror|MixinMirror> |
		(m selectorsMatching: pattern) do: [ :selector <Symbol> | result add: m,,selector ] ].
	self protocolsReflectiveDo: [ :m <ProtocolMirror> |
		(m selectorsMatching: pattern) do: [ :selector <Symbol> | result add: m,,selector ] ].
	^result asSortedCollection: [ :t1 <Tuple[Mirror, Symbol]> :t2 <Tuple[Mirror, Symbol]> | t1 at1 name < t2 at1 name or: [ t1 at1 name = t2 at1 name and: [ t1 at2 <= t2 at2 ] ] ].
	!

implementorsOf: selector <Symbol> ^ <SeqCltn[Tuple[Mirror, Symbol]]>

	| result <OrderedCollection[Tuple[Mirror, Symbol]]> |
	result := OrderedCollection[Tuple[Mirror, Symbol]] new.
	self classesAndMixinsReflectiveDo: [ :m <ClassMirror|MixinMirror> |
		(m hasSelector: selector)
			ifTrue: [	result add: m,,selector ] ].
	self protocolsReflectiveDo: [ :m <ProtocolMirror> |
		(m hasSelector: selector)
			ifTrue: [	result add: m,,selector ] ].
	^result asSortedCollection: [ :t1 <Tuple[Mirror, Symbol]> :t2 <Tuple[Mirror, Symbol]> | t1 at1 name < t2 at1 name or: [ t1 at1 name = t2 at1 name and: [ t1 at2 <= t2 at2 ] ] ].
!

mirrorFor: key <Symbol> ^ <Mirror>

	^self mirrorFor: key ifAbsent: [ self error: key, ' not found in System Dictionary' ]!

mirrorFor: key <Symbol> ifAbsent: blk <[^X def]> ^ <Mirror | X>

	| assoc <GlobalAssociation> |
	assoc := self assocAt: key ifAbsent: [ ^blk value ].
	^(Reflection isGlobalVariable: assoc)
		ifTrue: [		Mirror on: assoc ]
		ifFalse: [	Mirror on: assoc value ]!

referencesToGlobalName: name <Symbol> ^ <SeqCltn[Tuple[Mirror, Symbol]]>

	| result <OrderedCollection[Tuple[Mirror, Symbol]]> |
	result := OrderedCollection[Tuple[Mirror, Symbol]] new.
	self classesAndMixinsReflectiveDo: [ :m <ClassMirror|MixinMirror> |
		m compiledMethodsDo: [ :method <Method> | 		"We use compiled methods here since otherwise type info will have to be loaded"
			(method referencesGlobalName: name)
				ifTrue: [	result add: m,,method selector ] ] ].
	^result asSortedCollection: [ :t1 <Tuple[Mirror, Symbol]> :t2 <Tuple[Mirror, Symbol]> | t1 at1 name < t2 at1 name or: [ t1 at1 name = t2 at1 name and: [ t1 at2 <= t2 at2 ] ] ].!

referencesToInstVarName: name <Symbol> for: holder <Mixin> ^ <SeqCltn[Tuple[Mirror, Symbol]]>

	| result <OrderedCollection[Tuple[Mirror, Symbol]]> |
	result := OrderedCollection[Tuple[Mirror, Symbol]] new.
	self classesAndMixinsReflectiveDo: [ :m <ClassMirror|MixinMirror> |
		(m inheritsFrom: holder)
			ifTrue: [m compiledMethodsDo: [ :method <Method> | 		"We use compiled methods here since otherwise type info will have to be loaded"
							(method referencesInstVarName: name for: m mixin reflectee)
								ifTrue: [	result add: m,,method selector ]]]].
	^result asSortedCollection: [ :t1 <Tuple[Mirror, Symbol]> :t2 <Tuple[Mirror, Symbol]> |
												t1 at1 name < t2 at1 name
													or: [ t1 at1 name = t2 at1 name and: [ t1 at2 <= t2 at2 ] ] ].!

renameGroup: grp <Dict[Symbol, Symbol]>

self definitionsReflectiveDo:[: dm <Mirror> |
	dm isMeta 
			ifFalse:[dm renameGroup: grp]
			].
self globalVariablesReflectiveDo:[:gm <Mirror> | gm renameGroup: grp].
!

sendersMatching: pattern <Str> ^ <SeqCltn[Tuple[Mirror, Symbol]]>

	| result <OrderedCollection[Tuple[Mirror, Symbol]]> |
	result := OrderedCollection[Tuple[Mirror, Symbol]] new.
	self classesAndMixinsReflectiveDo: [ :m <ClassMirror|MixinMirror> |
		m compiledMethodsDo: [ :method <Method> | 		"We use compiled methods here since otherwise type info will have to be loaded"
			(method referencesSenderMatching: pattern)
				ifTrue: [	result add: m,,method selector ] ] ].
	^result asSortedCollection: [ :t1 <Tuple[Mirror, Symbol]> :t2 <Tuple[Mirror, Symbol]> | t1 at1 name < t2 at1 name or: [ t1 at1 name = t2 at1 name and: [ t1 at2 <= t2 at2 ] ] ].!

sendersOf: selector <Symbol> ^ <SeqCltn[Tuple[Mirror, Symbol]]>

	| result <OrderedCollection[Tuple[Mirror, Symbol]]> |
	result := OrderedCollection[Tuple[Mirror, Symbol]] new.
	self classesAndMixinsReflectiveDo: [ :m <ClassMirror|MixinMirror> |
		m compiledMethodsDo: [ :method <Method> | 		"We use compiled methods here since otherwise type info will have to be loaded"
			(method referencesSender: selector)
				ifTrue: [	result add: m,,method selector ] ] ].
	^result asSortedCollection: [ :t1 <Tuple[Mirror, Symbol]> :t2 <Tuple[Mirror, Symbol]> | t1 at1 name < t2 at1 name or: [ t1 at1 name = t2 at1 name and: [ t1 at2 <= t2 at2 ] ] ].! !

