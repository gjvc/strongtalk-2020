Delta define: #ExternalReadWriteStream as: (
(Class subclassOf: 'ExternalOutputStream mixin |> (BasicOutputStream[Int] mixin |> ExternalReadStream)' instanceVariables: '') protocols: 'WriteStream[Int]'; abstract) !

(Delta mirrorFor: #ExternalReadWriteStream) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #ExternalReadWriteStream) group: 'base'!

(Delta mirrorFor: #ExternalReadWriteStream)
comment: 
'Implements positionable streams of bytes from an external source.  Currently, this class is used both
for read-only streams and read-write streams, with different creation messages.

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.1 $
'!

! (Delta mirrorFor: #ExternalReadWriteStream) classSide methodsFor: 'testing' !


test
    " ExternalReadWriteStream test "
    |    file <FilePath>
        sz <Int>
        read <ExternalReadStream>
        write <ExternalReadWriteStream>
        in <CharInStream>
        out <CharOutStream>
        bytes <ByteArray>
        s <Str> 
        testCount <Counter>
        test <Integer> |
    testCount := Counter new.
    file := FilePath for: 'deltatest.tmp'.
    sz := 12345.    "make sure this number is much greater than the stream buffer size" 
    write := file writeStream.
    0 to: sz-1 do: 
        [ :i <Int> |
            write nextPut: i \\ 100 + 32.    ].
    self test: testCount preinc is: [ write size = sz ].
    write position: 5001.
    write nextPut: 123.
    write close.
    write := file readWriteStream.
    write position: 5000.
    write nextPut: 12.
    self test: testCount preinc is: [ write next = 123 ].
    write position: 0.
    self test: testCount preinc is: [ write position = 0 ].
    write setToEnd.
    bytes := write contentsWritten.
    "self test: testCount preinc is: [ write atEnd ]."
    self test: testCount preinc is: [ Transcript show: 'actual: '; print: bytes size; show: ', expected: '; print: sz;cr. bytes size = sz ].
    write close.
    read := file readStream.
    self test: testCount preinc is: [ read peek = 32 ].
    self test: testCount preinc is: [ read size = sz ].
    test := testCount preinc.
    0 to: sz-1 do:
        [ :i <Int> |
            | byte <Int> |
            byte := read next.
            self test: 6 is:
                [ i ~= 5001
                    ifTrue: [ i ~= 5000
                                ifTrue: [ (i \\ 100 +32) = byte ]
                                ifFalse: [ byte = 12 ]    ]
                    ifFalse: [ byte = 123 ]    ].
            self test: test is: [ (bytes at: i + 1) = byte ].    ].

    self test: testCount preinc is: [ read atEnd ].
    read position: 5001.

    self test: testCount preinc is: [ read next = 123 ].
    read position: 0.

    self test: testCount preinc is: [ bytes = read contentsRemaining ].
    read close.
    out := file charOutputStream.
    s := 'hi 
there'.
    out nextPutAll: s.
    out close.
    in := file charInputStream.

    self test: testCount preinc is: [ in peek = (s at: 1) ].

	test := testCount preinc.
    1 to: s size do: 
        [ :i <Int> |
            self test: test is: [
				| n |
				n := in next.
				(s at: i) =  n].    ].

    self test: testCount preinc is: [ in atEnd ].
    in close.
    in := file charInputStream.

    self test: testCount preinc is: [ in contentsRemaining = s ].
    in close.! !

! (Delta mirrorFor: #ExternalReadWriteStream) methodsFor: 'accessing' !


contents  ^<SeqCltn[Int]>

	"Obsolete: this method is included purely for BlueBook compatibility.  If possible, use 
	 #contentsRemaining and #contentsWritten, which will work when a ReadWriteStream
	 is substituted for a ReadStream or a WriteStream, unlike this method"

	^self collection!

contentsWritten  ^<SeqCltn[Int]>
    "%copied (substituting for E) from BasicReadWriteStream"
    | cltn <VarSeqCltn[Int]>  origPos <Int> |
    cltn := self newCollectionOfSize: self position.
    origPos := self position.
    self position: 0.
    1 to: origPos do: [ :i <Int> |
        cltn at: i put: self next.    ].
    self position: origPos.
    ^cltn!

size ^<Int>

	"Make sure we flush our buffer if needed to ensure that
	 the buffer contents are taken into account"

	self flush.
	^super size! !

! (Delta mirrorFor: #ExternalReadWriteStream) methodsFor: 'private' !


updateBufferLocationAfterFlush

	"We don't advance the buffer here because we need to preserve the read semantics"!

writeIfNeededBeforePositionChange
    self dirty
        ifTrue: [ self writeBuffer; dirty: false. ].! !

