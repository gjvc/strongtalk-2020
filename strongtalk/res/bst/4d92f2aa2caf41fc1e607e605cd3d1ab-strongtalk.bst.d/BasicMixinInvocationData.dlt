Delta define: #BasicMixinInvocationData as: (
(Class subclassOf: 'BasicTypeData' instanceVariables: 'name myMixin myClass classObj ')) !

(Delta mirrorFor: #BasicMixinInvocationData) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #BasicMixinInvocationData) group: 'ast'!

(Delta mirrorFor: #BasicMixinInvocationData)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #BasicMixinInvocationData) methodsFor: 'Unclassified' !


asSide

^(Type forClass: self classObj) asSide!

classObj ^ <Class>

"Return the class I denote"

classObj isNil  ifTrue:[self computeClassObj].
^classObj.
  
!

classObj: c <Class>

self deltaHack.
Delta initializingTypeInfo ifFalse: [self error: 'Should not be called'].
classObj := c!

computeClassObj  ^ <Class>
"Private"
   |   m <Mixin>  superclassObj <AbstractClassMirror> mMirror  <MixinMirror> cMirror   <InvocationMirror> |

    superclassObj := AbstractClassMirror on: self myClass classObj.
    m := self myMixin mixinObj.
	self assert: [m isKindOf: Mixin].

    mMirror := MixinMirror on: m.
    cMirror := mMirror |> superclassObj.
    classObj := cMirror reflectee.

    (Type forClass: classObj) mixinType: self myMixin.
    (Type forClass: classObj) superclassType: self myClass.
    (Type forClass: cMirror classSide reflectee) mixinType: self myMixin dualClassType.
    (Type forClass: cMirror classSide reflectee) superclassType: self myClass dualClassType.
    ^classObj.!

computeTypeOfInstances ^ <Protocol>

^self asSide typeOfInstances!

mix: m <MixinNode >on: c <ClassNode >
    myMixin := m.
myClass := c.!

myClass ^ <ClassNode>
    ^myClass!

myMixin ^ <MixinNode>
    ^myMixin! !

