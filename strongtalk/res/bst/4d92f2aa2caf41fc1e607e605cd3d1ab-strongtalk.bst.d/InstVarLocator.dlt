Delta define: #InstVarLocator as: (
(Class subclassOf: 'VarLocator' instanceVariables: '')) !

(Delta mirrorFor: #InstVarLocator) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #InstVarLocator) group: 'ast'!

(Delta mirrorFor: #InstVarLocator)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #InstVarLocator) methodsFor: 'accessing' !


ast ^ <VarDecl>

self mirror instanceVariablesDo:	[:c <VarDecl> |
																	c name = self varName
																		ifTrue:[^c]
																].
^self error: 'Missing instance variable ', self varName, 
														' in ', self mirror name.
!

name ^ <Str>

^self definitionName, ' instance variables'!

parseTree  ^ <ParseTree[VarDecl]>

| vTrees <OrdCltn[ParseTree[VarDecl]]> |

vTrees := DeltaParser new parseInstVarList: self source 
														within: (DeltaScope new initialize: nil) 
														ifError: [:s <Str> :i <Int> | self error: s].
^vTrees detect: [:pt <ParseTree[VarDecl]> | pt body name = self varName]
					ifNone:[self error: 'Missing instance variable ', self varName, 
														' in ', self mirror name].
	!

source ^ <Str>

^self mirror instanceVariableString! !

! (Delta mirrorFor: #InstVarLocator) methodsFor: 'locator matching' !


matchesInstVarLocator: l  <InstVarLocator> ^ <Boolean>

^self matchesDefinitionLocator: l!

matchesLocator: l <DeltaLocator> ^ <Boolean>
	^l matchesInstVarLocator: self! !

