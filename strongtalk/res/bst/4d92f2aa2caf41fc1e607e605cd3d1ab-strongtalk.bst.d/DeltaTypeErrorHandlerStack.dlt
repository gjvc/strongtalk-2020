Delta define: #DeltaTypeErrorHandlerStack as: (
(Class subclassOf: 'Object' instanceVariables: 'definitionStack selectorStack ')) !

(Delta mirrorFor: #DeltaTypeErrorHandlerStack) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaTypeErrorHandlerStack) group: 'ast'!

(Delta mirrorFor: #DeltaTypeErrorHandlerStack)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaTypeErrorHandlerStack) classSide methodsFor: 'Unclassified' !


new
    ^super new initialize! !

! (Delta mirrorFor: #DeltaTypeErrorHandlerStack) methodsFor: 'Unclassified' !


clear
	"Clear stacks"
	self definitionStack: OrderedCollection new.
	self selectorStack: OrderedCollection new.
!

currentDefinition ^<DeltaBasicLocator>
	"Return top of definition stack"
	self definitionStack isEmpty ifTrue: [self error: 'No current definition'].
	^self definitionStack last!

currentSelector ^<Symbol>
	"Return top of selector stack"
	self selectorStack isEmpty ifTrue: [self error: 'No current selector'].
	^self selectorStack last!

definitionLocatorFor: node  <DeltaASTNode> ^ <DeltaLocator>

^self currentDefinition locatorFor: node.

!

definitionStack ^<Cltn[DeltaBasicLocator]>
	"Private"
	^definitionStack!

definitionStack: ds <Cltn[DeltaBasicLocator]>
	"Private"
	definitionStack := ds!

initialize
	"Private"
	self clear
!

locatorFor: node  <DeltaASTNode> ^ <DeltaLocator>

| methodLoc <MethodLocator> dm <DeltaMethod> astIndex <Integer> |

	self currentSelector isNil ifTrue: 	[^self definitionLocatorFor: node].
	methodLoc := self currentDefinition methodLocatorClass new definition: self currentDefinition selector: self currentSelector.
	dm := methodLoc deltaMethodIfAbsent: [^methodLoc ].
	astIndex := DeltaASTLocationTool indexForNode: node startingFrom: dm.
	astIndex = 0 ifTrue:[astIndex := 1].
	methodLoc astIndex: astIndex.
	^methodLoc.
	
	"astIndex = 0
		ifTrue: [ ^methodLoc ]
		ifFalse: [ ^self currentDefinition methodLocatorClass new definition: self currentDefinition selector: self currentSelector; astIndex: astIndex ]"
!

popDefinition
	"Pop and return top of definition stack"
	self definitionStack isEmpty ifTrue: [self error: 'No current definition'].
	self popSelector. 
	^self definitionStack removeLast
!

popSelector
	"Pop and return top of selector stack"
	self selectorStack isEmpty ifTrue: [self error: 'No current selector'].
	^self selectorStack removeLast
!

pushDefinition: loc <DeltaBasicLocator>
	"Push basic locator on definition stack"
	self selectorStack addLast: nil.
	self definitionStack addLast: loc.
!

pushSelector: sym <Symbol>
	"Push sym on definition stack"
	self selectorStack addLast: sym!

selectorStack ^<Cltn[Symbol]>
	"Private"
	^selectorStack!

selectorStack: ss <Cltn[Symbol]>
	"Private"
	selectorStack := ss! !

