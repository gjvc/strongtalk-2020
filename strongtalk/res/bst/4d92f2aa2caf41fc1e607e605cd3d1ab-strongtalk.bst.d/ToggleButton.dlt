Delta define: #ToggleButton as: (
(Class subclassOf: 'PressHandler' instanceVariables: 'model <Boolean>
modelSink <[Boolean]>
trueLook <Visual>
falseLook <Visual>
look <Boolean>
pressedBorder <Border>
unpressedBorder <Border>
frame <Frame>
		') classVariables: 'FocusPainter <Painter>
			'; protocols: 'View[Boolean]') !

(Delta mirrorFor: #ToggleButton) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #ToggleButton) group: 'ui'!

(Delta mirrorFor: #ToggleButton)
comment: 
'General non-native button.

Tags: %User %UI

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license
'!

! (Delta mirrorFor: #ToggleButton) classSide methodsFor: 'instance creation' !


withTrueLook: t <Visual>
falseLook: f <Visual>
^<Instance>

	^self new trueLook: t falseLook: f initialLook: false!

withTrueLook: t <Visual>
falseLook: f <Visual>
initialLook: b <Boolean>
^<Instance>

	^self new trueLook: t falseLook: f initialLook: b! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'accessing' !


falseLook ^<Visual>

	^falseLook!

look ^<Boolean>

	^look!

look: flag <Boolean>

	look := flag.
	self updatePart.!

model ^<Boolean>

	^model!

model: f <Boolean>

	model := f.
	self look: f.!

modelSink ^<[Boolean]>

	^modelSink!

modelSink: b <[Boolean]>

	modelSink := b!

pressedBorder ^<Border>

	^pressedBorder!

pressedBorder: b <Border>

	pressedBorder notNil
		ifTrue: [ self changing; updatePart ].
	pressedBorder := b!

trueLook ^<Visual>

	^trueLook!

trueLook: t <Visual> falseLook: f <Visual>

	trueLook := t.
	falseLook := f.

	self	onPress: [ self look: self model not ];
			onAction: [ self toggle ];
			onCancel: [ self look: self model ].

	self look: self model.!

trueLook: t <Visual> falseLook: f <Visual> initialLook: b <Boolean>

	model := b.
	look := b.
	self trueLook: t falseLook: f!

unpressedBorder ^<Border>

	^unpressedBorder!

unpressedBorder: b <Border>

	unpressedBorder notNil
		ifTrue: [ self changing; updatePart ].
	unpressedBorder := b! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'initialize' !


initialize
	super initialize.
	model := false.
	self modelSink: [ :f <Boolean> | ].
	look := false.
	self	pressedBorder: (Border standard3DRaised: false);
			unpressedBorder: (Border standard3DRaised: true).! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'control' !


toggle

	self model: self model not.
	self modelSink value: self model.
	self updatePart.! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'private' !


action

	super action.

	"We regain the focus if needed because some parents might move or reparent us
		during the action (like outliners)"
	(self isFocus not and: [ self isAttached and: [ self session activeWindow == self topWindow ] ])
		ifTrue: [ self becomeFocus ].!

focusPainter ^<Painter>

	FocusPainter isNil
		ifTrue: [	"We don't need a critical region because replacement won't hurt"
						FocusPainter := Painter new lineStyle: #dot	].
	^FocusPainter!

frame ^<Frame>

	^frame!

frame: f <Frame>

	frame := f.
	self part: f.!

isFocusCandidate ^<Boolean>

	^true!

press

	self scrollIfNeededToMakeVisible: self allocation enclosingRect
			 relativeTo: self minimizeMotion: true.
	super press.
	self becomeFocus!

skipCheckLayout ^<Boolean>

	^false!

updatePart

	| b <Border> f <Frame> look <Visual> |
	self hasPart
		ifTrue: [ self frame removePart ]
		ifFalse: [ self frame: (Frame new) ].

	self pressing
		ifTrue: [ b := self pressedBorder ]
		ifFalse: [ b := self unpressedBorder ].

	look := self look
		ifTrue: [ self trueLook ]
		ifFalse: [ self falseLook ].

	self frame
		part: look;
		border: b.! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'restricted-to session' !


isFocus: f <Boolean>

	super isFocus: f.
	(f not and: [ self isGrabbing ])
		ifTrue: [ self releaseGrab ].
	self invalidate.! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'displaying' !


localDisplayOn: can <Canvas>

	super localDisplayOn: can.

	(self isFocus and: [ self blinkState and: [ self pressing not ] ])
		ifTrue: [ can withPainter: self focusPainter
							do: [ can displayRectangle:
										 ((self frame part allocationRelativeTo: self) enclosingRect
												expandBy: 1) ]	].! !

! (Delta mirrorFor: #ToggleButton) methodsFor: 'event processing' !


keyDown: key <Symbol> focus: focus <Visual> event: ev <UIEvent> ^<Boolean>

	focus == self
		ifFalse: [ ^false ].

	key = #RETURN
		ifTrue: [	self press.
						^true ].
	key = #SPACE
		ifTrue: [	self action.
						^true ].
	(key = #TAB and: [ self pressing ])
		ifTrue: [	self cancel.
						^false ].

	^false!

keyUp: key <Symbol> focus: focus <Visual> event: ev <UIEvent> ^<Boolean>

	focus == self
		ifFalse: [ ^false ].

	^(key = #RETURN and: [ self pressing ])
		onTrue: [ self action ]! !

