Delta define: #SeqCltnReadStream as: (
Generic forAll: 'E ' body: ((Class subclassOf: 'BasicReadStream[E]' instanceVariables: 'collection <SeqCltn[E]>
		'))) !

(Delta mirrorFor: #SeqCltnReadStream) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #SeqCltnReadStream) group: 'base'!

(Delta mirrorFor: #SeqCltnReadStream)
comment: 
'This is the standard concrete class used for creating ReadStreams on sequenceable collections.

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #SeqCltnReadStream) classSide methodsFor: 'instance creation' !


on: sc <SeqCltn[E]> ^<ReadStream[E]>

	^self over: sc!

over: sc <SeqCltn[E]> ^<Instance>
	"This is like on: except it returns type Instance.   on: for streams may return a non-instance type."

	^self new initCollection: sc! !

! (Delta mirrorFor: #SeqCltnReadStream) classSide methodsFor: 'testing' !


test
	"self test"
	self test: (CharacterReadStream on: 'hello there folks') containing: 'hello there folks'.! !

! (Delta mirrorFor: #SeqCltnReadStream) methodsFor: 'private' !


accumulateUntil: predicate <[^Boolean]>  ^<SeqCltn[E]>

	| start <Int> |

	start := self position.
	[ predicate value ]
		whileFalse: [ self position: self position + 1 ].
	^self collection copyFrom: start + 1 to: self position!

actualNext ^<E>

	| pos <Int> |
	pos := self actualPosition.
	pos := pos + 1.
	pos > self size
		ifTrue: [ self error: 'Attempt to read past the end of a stream' ].
	self actualPosition: pos.
	^self collection at: pos!

collection ^<SeqCltn[E]>

	^collection!

nextFromPeek ^<E>

	"If this happens, you should have overridden the calling method"
	self shouldNotHappen!

peekVal ^<E>

	self shouldNotHappen! !

! (Delta mirrorFor: #SeqCltnReadStream) methodsFor: 'initialization' !


initCollection: sc <SeqCltn[E]>

	collection := sc.! !

! (Delta mirrorFor: #SeqCltnReadStream) methodsFor: 'accessing' !


at: index <Int> ^<E>

	^self collection at: index!

atEnd ^<Boolean>

	"%optimization: we can ensure that atEnd and actualAtEnd are identical, since we reimplement peek to avoid the superclass
	  peek buffer, because we can look ahead quickly in a seqcltn"
	^self actualAtEnd!

next ^<E>

	"%optimization: we can ensure that next and actualNext are identical, since we reimplement peek to avoid the superclass
	  peek buffer, since we can look ahead quickly in a seqcltn"
	^self actualNext!

nextIfAbsent: f <[^X def]> ^<E | X>

	| pos <Int> |
	pos := self actualPosition.
	pos := pos + 1.
	pos > self size
		ifTrue: [ ^f value ].
	self actualPosition: pos.
	^self collection at: pos!

peek ^<E>

	| pos <Int> |
	pos := self position.
	pos := pos + 1.
	pos > self size
		ifTrue: [ self error: 'Attempt to read past the end of a stream' ].
	^self collection at: pos!

peekIfAbsent: f <[^X def]>  ^<E | X>

	| pos <Int> |
	pos := self position.
	pos := pos + 1.
	pos > self size
		ifTrue: [ ^f value ].
	^self collection at: pos!

position: p <Int>

	self actualPosition: p.
	"Don't have to unset the peekVal"!

size ^<Int>

	^self collection size! !

! (Delta mirrorFor: #SeqCltnReadStream) methodsFor: 'printing' !


printOn: strm <CharOutputStream>

	strm nextPutAll: self class name;
			nextPutAll: '(position='; 	print: self position;
			nextPutAll: ' collection=';  print: self collection;
			nextPut: $)
			! !

