Delta define: #TaskControlBlock as: (
(Class subclassOf: 'TaskState' instanceVariables: 'link identity priority input state function handle')) !

(Delta mirrorFor: #TaskControlBlock) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #TaskControlBlock) group: 'benchmark'!

(Delta mirrorFor: #TaskControlBlock)
comment: 
'No comment
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #TaskControlBlock) classSide methodsFor: 'instance creation' !


link: link create: identity priority: priority initialWorkQueue: initialWorkQueue initialState: initialState function: aBlock privateData: privateData
    ^super new
        link: link
        identity: identity
        priority: priority
        initialWorkQueue: initialWorkQueue
        initialState: initialState
        function: aBlock
        privateData: privateData
! !

! (Delta mirrorFor: #TaskControlBlock) methodsFor: 'initialize' !


link: aLink identity: anIdentity priority: aPriority initialWorkQueue: anInitialWorkQueue initialState: anInitialState function: aBlock privateData: aPrivateData
    link := aLink.
    identity := anIdentity.
    priority := aPriority.
    input := anInitialWorkQueue.
    packetPending := anInitialState isPacketPending.
    taskWaiting := anInitialState isTaskWaiting.
    taskHolding := anInitialState isTaskHolding.
    function := aBlock.
    handle := aPrivateData
! !

! (Delta mirrorFor: #TaskControlBlock) methodsFor: 'accessing' !


identity
    ^identity
!

link
    ^link
!

priority
    ^priority
! !

! (Delta mirrorFor: #TaskControlBlock) methodsFor: 'scheduling' !


addInput: packet checkPriority: oldTask
    NoWork == input
        ifTrue:
            [input := packet.
            packetPending := true.
            priority > oldTask priority ifTrue: [^self]]
        ifFalse:
            [input := self append: packet head: input].
    ^oldTask
!

doTask: work data: data
    ^function value: work value: data
!

runTask
    | message |
    self isWaitingWithPacket
        ifTrue:
            [message := input.
            input := message link.
            NoWork == input
                ifTrue: [self running]
                ifFalse: [self packetPending]]
        ifFalse: [message := NoWork].
    ^self doTask: message data: handle
! !

