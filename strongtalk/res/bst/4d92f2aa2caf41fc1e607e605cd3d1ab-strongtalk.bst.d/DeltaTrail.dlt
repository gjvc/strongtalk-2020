Delta define: #DeltaTrail as: (
(Class subclassOf: 'Object' instanceVariables: 'dict ')) !

(Delta mirrorFor: #DeltaTrail) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #DeltaTrail) group: 'ast'!

(Delta mirrorFor: #DeltaTrail)
comment: 
'The trail is implemented by this class. A single instance, DeltaGlobalTrail,
exists at any point in time.

The representation used here is simple. The instance variable ''dict''
is a dictionary mapping type variables to dictionaries. Every type variable T
that is known to be related to some other type has an entry in ''dict''
(T being the key). The value of this entry is a dictionary D
mapping types to Booleans. Each entry E_sigma in D
corresponds to a type Sigma known to be related to to the type variable T.
If T <= Sigma, then E_sigma value is True.  If T <# Sigma, then E_sigma
value is False. Otherwise, T is unrelated to Sigma.


 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaTrail) methodsFor: 'Unclassified' !


answer: t1 <ObjectType >isInheritedTypeOf: t2 <ObjectType > ^ <Boolean>
    ^((self dict at: t1 ifAbsent:[^false]) at: t2 ifAbsent:[^false]) not!

answer: t1 <ObjectType >isSubtypeOf: t2 <ObjectType > ^ <Boolean>
    ^(self dict at: t1 ifAbsent:[^false]) at: t2 ifAbsent:[^false]!

answerTypeVar: t1 <ObjectType >isSubtypeOf: t2 <ObjectType > ^ <Boolean>
"Buggy!!  We need to see if t1 is a subtype or inherited type of its bound.
If it is a subtype, the code below works.
If it is not, it only works provided the bound is monotonic (and what does that entail if the bound
is another type variable?

"
    ^(self typeVarBoundFor: t1) subtypeOf: t2 assuming: self.!

assume: t1 <ObjectType >isInheritedTypeOf: t2 <ObjectType > ^ <Self>
    | t1Dict <IdentityDictionary[ObjectType, Boolean]>  |

t1Dict := self dict at: t1
                      ifAbsent:[self dict at: t1 put: IdentityDictionary[ObjectType, Boolean]  new].
(t1Dict includesIndex: t2) ifFalse:[t1Dict at: t2 put: false]
                                         ifTrue:[self error: 'Trail already contains entry for ', t1 name, ' inherited type of ', t2 name].!

assume: t1 <ObjectType >isSubtypeOf: t2 <ObjectType > ^ <Self>
    | t1Dict <IdentityDictionary[ObjectType, Boolean]>  |

t1Dict := self dict at: t1
                      ifAbsent:[self dict at: t1 put: IdentityDictionary[ObjectType, Boolean]  new].
(t1Dict includesIndex: t2) ifFalse:[t1Dict at: t2 put: true]
                                         ifTrue:[self error: 'Trail already contains entry for ', t1 name, ' subtype of ', t2 name].!

dict ^ <IdentityDictionary[ObjectType,IdentityDictionary[ObjectType,Boolean]]>
    ^dict!

forget: t1 <ObjectType >isInheritedTypeOf: t2 <ObjectType > ^ <Self>
    self forget: t1 isSubtypeOf: t2!

forget: t1 <ObjectType >isSubtypeOf: t2 <ObjectType > ^ <Self>
    | e1 <IdentityDictionary[ObjectType, Boolean]>  |


(e1 := self dict at: t1 ifAbsent:[^self]) removeKey: t2 ifAbsent:[^self].
e1 isEmpty ifTrue:[self dict removeKey: t1].!

initialize ^ <Self>
    dict := IdentityDictionary[ObjectType, IdentityDictionary[ObjectType, Boolean]]  new.!

komment

"The trail is implemented by this class. A single instance, DeltaGlobalTrail,
exists at any point in time.

The representation used here is simple. The instance variable 'dict'
is a dictionary mapping type variables to dictionaries. Every type variable T
that is known to be related to some other type has an entry in 'dict'
(T being the key). The value of this entry is a dictionary D
mapping types to Booleans. Each entry E_sigma in D
corresponds to a type Sigma known to be related to to the type variable T.
If T <= Sigma, then E_sigma value is True.  If T <# Sigma, then E_sigma
value is False. Otherwise, T is unrelated to Sigma.

"!

typeVarBoundFor: tv <TypeVar > ^ <ObjectType>
    | tvDict <IdentityDictionary[ObjectType, Boolean]>  |

" The entry for a type variable should contain exactly one element, which is the known bound for the type variable.
If no entry exists, we can always assume that the type variable is an Object
(or should we treat this as an inconsistency?).
"
tvDict := self dict at: tv ifAbsent:[^DeltaTypeId new setId: #Object; scope: DeltaGlobals].
tvDict associationsDo:[:a <Assoc[ObjectType,IdentityDictionary[ObjectType,Boolean]]> | ^a key].! !

