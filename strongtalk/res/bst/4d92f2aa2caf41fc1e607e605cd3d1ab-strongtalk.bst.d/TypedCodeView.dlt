Delta define: #TypedCodeView as: (
(Class subclassOf: 'CodeView' instanceVariables: 'codeManager <CodeApp>
')) !

(Delta mirrorFor: #TypedCodeView) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #TypedCodeView) group: 'ui'!

(Delta mirrorFor: #TypedCodeView)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #TypedCodeView) methodsFor: 'menus' !


acceptMenu ^<Menu>

	^super acceptMenu
		addSeparator;
		addAll: self typecheckingMenu removeAll!

menuBar ^<Menu>

	^super menuBar add: self typecheckingMenu!

typecheckingMenu  ^<Menu>

^Menu new name: 'Typecheck';
    add: (MenuAction new
                  name: 'Typecheck and Accept';
                  action: [self  typecheck]);
    add: (MenuAction new
                  name: 'Show type';
                  action: [self showType])! !

! (Delta mirrorFor: #TypedCodeView) methodsFor: 'control' !


showType

	| 
		mirror <Mirror>   selection <Tuple[Int, Int]> node <ASTNode> parseTree <ParseTree> 
		position <Tuple[Int, Int]>   otype <ObjectType> eh <TypeErrorHandler>
	|
	
	mirror := self codeManager mirror.
	selection := self linearSelection.
	selection at1 = 0 ifTrue: [^self].
	parseTree := DeltaParser new parseMethod: self modelString within: mirror scope ifError: [ :msg :pos | self showSourceError: msg at: pos. ^ self].
	node := parseTree nodeForPosition: selection.
	position := parseTree positionForNode: node.	
	self  sourceSelection: position.
	eh := Type doChecks: [otype := mirror typeForNode: node inMethod: parseTree body].					
	eh reportedErrors isEmpty
		ifTrue:[
						self visual promptOk:  'Type of selection is ', otype name asString printString
											title: 'Showing type in ', self codeManager locator name
											type: #info
											action: [].
					] 
		ifFalse: [
                         otype isError  ifTrue:[
                         											self reportShowTypeResult: 'Selection has erroneous type. Browse type errors?'
                         													errors: eh reportedErrors
                         										]
                                                     ifFalse:[
                                                     				self reportShowTypeResult:  'Type of selection is ' ,
                                                                                otype name asString printString, '; however the expression includes type errors. Browse type errors?'
                                                                            errors: eh reportedErrors
                                                                   ].
                          ].

!

typecheck

	self acceptAndOnSuccess: [
		self session inProcessDo: [ self codeManager typecheck ]
	]! !

! (Delta mirrorFor: #TypedCodeView) methodsFor: 'accessing' !


codeManager ^ <CodeApp>

^codeManager!

codeManager: cm   <CodeApp>

codeManager := cm! !

! (Delta mirrorFor: #TypedCodeView) methodsFor: 'private-utility' !


reportShowTypeResult: s <Str> errors: es <OrdCltn[TypeError]>

| title <Str> cm <MethodOutliner> |

title := 'Showing type in ', self codeManager locator name.
cm := self codeManager.
self visual promptYesNo: s
                     title: title
                      type: #question
                      default: 1
                      action: [:b <Boolean> | 
                         				b ifTrue:[cm launchTypeErrorList: es 
                         											  title: title
                         								]
                         			].! !

! (Delta mirrorFor: #TypedCodeView) methodsFor: 'event processing' !


keyDown: key <Symbol> focus: focus <Visual> event: ev <UIEvent> ^<Boolean>

	key = #RETURN
		ifTrue: [	(ev shiftPressed and: [ev ctrlPressed or: [ self isMultiLine not and: [ self autoAccept not ] ]])
							ifTrue: [ self typecheck.
											^true ].
					 ].
	^super keyDown: key focus: focus event: ev! !

