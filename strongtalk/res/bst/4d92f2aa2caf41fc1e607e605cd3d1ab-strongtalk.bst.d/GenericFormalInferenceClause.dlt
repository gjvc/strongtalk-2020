Delta define: #GenericFormalInferenceClause as: (
(Class subclassOf: 'DeltaASTNode' instanceVariables: 'target <ObjectTypeInferenceClause>  typeArgNumber <Integer> genericId <Symbol>') protocols: 'ObjectTypeInferenceClause') !

(Delta mirrorFor: #GenericFormalInferenceClause) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #GenericFormalInferenceClause) group: 'ast'!

(Delta mirrorFor: #GenericFormalInferenceClause)
comment: 
'I implement inference clauses like Cltn[X def].
In general,  an inference clause may have one of
two concrete syntactical forms:

(1) F[X1, ... Xk def, ... Xn]  
(2) typeArg n of generic F of ...

Both forms get represented internally as GenericFormalInference
clauses.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #GenericFormalInferenceClause) classSide methodsFor: 'instance creation' !


target: t <ObjectTypeInferenceClause> arg: n <Integer> id: g <Symbol> ^ <Instance>

^self new target: t; typeArgNumber: n; genericId: g! !

! (Delta mirrorFor: #GenericFormalInferenceClause) methodsFor: 'inferring' !


inferFrom: sig <InferenceSignature > ^ <ObjectType>
"I have to collect all explicitly declared 
supertypes of the actual type argument, and find all invocations of 
my generic  among them.
Of these, a minimal type must exist, otherwise the send is
ambiguous and an error is reported."
| allInvocations <Cltn[GenericApplicationType]> |

allInvocations := self 	allInvocationsOf: self generic 
											in: (self target inferFrom:  sig) allDeclaredSupertypes.
^(allInvocations isEmpty 
		ifTrue:[self generic defaultInvocation]
		ifFalse:[self 	minimalTypeOf: allInvocations
								ifNone: [^self reportError: AmbiguousCallToPolyMsg new]
						]) actuals at: self typeArgNumber
! !

! (Delta mirrorFor: #GenericFormalInferenceClause) methodsFor: 'private-accessing' !


genericId ^ <Symbol>

^genericId!

genericId: gid <Symbol>

genericId := gid!

target ^ <ObjectTypeInferenceClause>

^target!

target: t <ObjectTypeInferenceClause>

target := t!

typeArgNumber ^ <Integer>

^typeArgNumber!

typeArgNumber: n <Integer>

typeArgNumber := n! !

! (Delta mirrorFor: #GenericFormalInferenceClause) methodsFor: 'private' !


allInvocationsOf: g <DeltaGeneric> in: types <Cltn[ObjectType]> ^ <Cltn[GenericApplicationType]>

^types select:[:t <ObjectType> | t isGenericInvocation and:[t generic = g]]!

generic ^ <DeltaGeneric>

^(Type for: (Smalltalk at: self genericId ifAbsent:[self error: self genericId, ' not found'])) asGeneric!

minimalTypeOf: types <Cltn[GenericApplicationType]> ifNone: fb <[^DoesNotMatter]> ^ <GenericApplicationType>

^types 	inject: types anElement
				into: [: t <GenericApplicationType> :g <GenericApplicationType> |  
							(t subtypeOf: g assuming: DeltaGlobalTrail)
								 ifTrue:[t] 
								 ifFalse:[(g subtypeOf: t assuming: DeltaGlobalTrail) ifTrue:[g] ifFalse:[^fb value]]
						]
			! !

