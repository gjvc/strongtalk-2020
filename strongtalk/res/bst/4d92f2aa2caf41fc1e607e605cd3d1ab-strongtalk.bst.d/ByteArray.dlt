Delta define: #ByteArray as: (
(Class subclassOf: 'IndexedByteInstanceVariables |> VarSequenceableCollection[Int]' instanceVariables: '') abstract) !

(Delta mirrorFor: #ByteArray) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #ByteArray) group: 'base'!

(Delta mirrorFor: #ByteArray)
comment: 
'ByteArrays are arrays of integers in the range 0-255.

%todo: stop using variable creation message and use the indexed ivar mixin

Subclass responsibilities:
    %responsibility copyWithSize:
        Subclasses with instance variables must extend (or implement, if they haven''t) copyWithSize: to copy
        the instance variable values as needed to the copy, since copyWithSize: doesn''t normally use the
        normal copy mechanism that uses #shallowCopy to transfer all instance variable values.

Tags: %BlueBook  %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #ByteArray) classSide methodsFor: 'instance creation' !


new ^<Instance>

	^self new: 0!

new: size <Int> ^<Instance>

	^self primitiveNew: size!

withAll: cltn <SeqCltn[Int]> ^<Instance>

	| inst <Instance> |
	inst := self new: cltn size.
	inst replaceFrom: 1 to: cltn size with: cltn.
	^inst! !

! (Delta mirrorFor: #ByteArray) methodsFor: 'accessing' !


asString ^<String>

^String withAll: (self collect: [ :b <Integer>  | Character value: b])!

at: index <Int> ^<Int>

	^self primitiveAt: index!

at: index <Int> ifAbsent: fail <[^X def]> ^<Int|X>

	^self primitiveAt: index ifAbsent: fail!

at: index <Int> put: el <Int> ^<Int>

	^self primitiveAt: index put: el!

atAllPut: val <Int>

	{{self primitiveIndexedByteAtAllPut: val ifFail: [:err <Symbol> | self error: err]}}!

size ^<Int>

	^self primitiveSize! !

! (Delta mirrorFor: #ByteArray) methodsFor: 'copying' !


byteArrayCopyWithSize: s <Int> ^<ByteArray>
	"This is the same as copyWithSize:, but the type signature knows more about
	  the return type, which can't be done with copyWithSize: because of inheritance
	  constraints in the current typechecker"

	"%todo: implement this as a primitive"
	| a <Instance> |
	a := self actualClass new: s.
	a replaceFrom: 1 to: (self size min: s) with: self.
	"The guarantee is safe because of the inference clause"
	^a!

copyFrom: start <Int> to: stop <Int>   ^<VarSeqCltn[EX]>
	{where EX is returnType of #anElement message of receiverType}

	"The guarantee is typesafe since the inference clause guarantees that E < EX at the call site"
	| copy <VarSeqCltn[EX]> safeme <SeqCltn[EX]> |
	safeme := guaranteed <SeqCltn[EX]> self.
	copy := guaranteed <VarSeqCltn[EX]> (self class new: (stop - start) + 1).
	copy replaceFrom: 1 to: copy size with: safeme startingAt: start.
	^copy!

copyWithSize: s <Int> ^<VarSeqCltn[EX]>
	{where EX is returnType of #anElement message of receiverType}

	"The guarantee is safe because of the inference clause"
	^guaranteed <VarSeqCltn[EX]> (self byteArrayCopyWithSize: s)! !

