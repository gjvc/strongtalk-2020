Delta define: #CString as: (
(Class subclassOf: 'ExternalProxy' instanceVariables: '')) !

(Delta mirrorFor: #CString) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #CString) group: 'base'!

(Delta mirrorFor: #CString)
comment: 
'A proxy for a C string.

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.2 $
'!

! (Delta mirrorFor: #CString) classSide methodsFor: 'instance creation' !


for: s <Str> ^<Instance>
	"Allocate a c buffer big enough to hold a null terminated copy of s, which
		must hold only ascii strings, and copy s into it.  The caller must free the return value."

	^self new
		malloc: s size + 1;
		value: s! !

! (Delta mirrorFor: #CString) methodsFor: 'accessing' !


asString ^<Str>
	"build and return a Smalltalk string"

	| s <String> |
	s := String new: self strlen.
	1 to: s size do:
		[ :i <Int> |
			s at: i putUnicode: (self byteAt: i - 1)  ].
	^s!

strlen ^<Int>
	"Return the number of characters in the string pointed to by the receiver"

	| len <Int> |
	len := 0.
	[ (self byteAt: len) = 0 ]
		whileFalse: [ len := len + 1 ].
	^len!

value ^<Str>

	^self asString!

value: s <Str>
	"Store the value of s as a null-terminated ascii string in the receiver.  The receiver must
	  have been previously allocated to hold enough space.  s must hold only ascii values."

	self store: s asCStringAt: 0! !

! (Delta mirrorFor: #CString) methodsFor: 'printing' !


printValueOn: strm <CharOutStream>

	super printValueOn: strm.
	self isNull
		ifFalse: [ strm putAll: '='; print: self asString ]! !

