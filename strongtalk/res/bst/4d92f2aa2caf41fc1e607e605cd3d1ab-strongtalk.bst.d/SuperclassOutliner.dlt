Delta define: #SuperclassOutliner as: (
(Class subclassOf: 'DefinitionItemOutliner' instanceVariables: '')) !

(Delta mirrorFor: #SuperclassOutliner) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #SuperclassOutliner) group: 'outliner'!

(Delta mirrorFor: #SuperclassOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #SuperclassOutliner) methodsFor: 'private' !


aspectForUpdate ^ <Symbol>

	^#superclassType
!

header ^ <Str>

	^'Superclass'
!

modelAsCharGlyphs ^ <CharGlyphs>

	^self standardTextForString: self mirror superclassTypeString painter: self codePainter!

storeAndOnSuccess: blk <[]>

	"The right way to do this is to have a #superclass:ifFail: in ClassMirror  that will parse and
		update accordingly.
		
		In the meantime, we parse an extra time here to check for errors and reevaluate the constructor.
		This should be changed shortly."
		
	| sc <Str> eval <Str> constructor <Mirror> |
	self deltaHack.
	sc := self charGlyphModelAsString: self codeView.
	DeltaParser new 
		parseClassOrMixinExpr: sc
		within: self mirror scope
		ifError: [ :msg <Str> :pos <Int> | ^self showParseError: msg at: pos in: self codeView ].

	eval := self mirror basicDefinitionString.
	constructor := Smalltalk evaluate: eval ifError: [ self shouldNotHappen ].
	constructor superclass: sc.
	self mirror isGeneric
		ifTrue: [ constructor := Generic forAll: self mirror typeArgumentString body: constructor ].
	Smalltalk define: self mirror name as: constructor.
	
	blk value.
! !

! (Delta mirrorFor: #SuperclassOutliner) methodsFor: 'typechecking' !


typecheck

self typecheckAction:[self mirror typecheckSuperclassClause]
		title: 'Typechecking ', self mirror name, ' superclass clause'.
! !

! (Delta mirrorFor: #SuperclassOutliner) methodsFor: 'accessing' !


locator ^ <SuperclassClauseLocator>

^SuperclassClauseLocator ofDefinition: self mirror basicLocator! !

