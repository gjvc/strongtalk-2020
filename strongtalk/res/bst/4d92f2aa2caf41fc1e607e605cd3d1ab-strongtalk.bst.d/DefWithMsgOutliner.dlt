Delta define: #DefWithMsgOutliner as: (
Generic forAll: 'M <Mirror> ' body: ((Class subclassOf: 'DefOutliner[M]' instanceVariables: 'instanceSide <SideOutliner>
	classSide <SideOutliner>'))) !

(Delta mirrorFor: #DefWithMsgOutliner) revision: '$Revision: 1.16 $'!

(Delta mirrorFor: #DefWithMsgOutliner) group: 'outliner'!

(Delta mirrorFor: #DefWithMsgOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DefWithMsgOutliner) classSide methodsFor: 'instance creation' !


onLocator: loc <DeltaLocator> ^ <Instance>

| outliner <Instance> side <SideOutliner> meta <Boolean> |

meta := loc mirror isMeta.
outliner := meta ifFalse:[self on: loc mirror] ifTrue:[self on: loc mirror instanceSide].
loc isMethodLocator
	ifTrue:[
				outliner openSide: meta selector: (guaranteed <MethodLocator> (loc)) selector.
				loc sourceHighlight.
				]
	ifFalse:[outliner openDefinition].
^outliner!

onTypeError: te <TypeError>

	| inst <Instance> |
	inst := self on: te loc mirror.
	inst openOnTypeError:  te.
	^inst
! !

! (Delta mirrorFor: #DefWithMsgOutliner) methodsFor: 'private' !


innerBuildBody: col <Column[Visual]>

	self instanceSide: (self sideOutlinerClass for: self mirror).
	self classSide: (self sideOutlinerClass for: self mirror classSide).
	col add: (self addChild: self instanceSide) imbeddedVisual.
	col add: (self addChild: self classSide) imbeddedVisual.
!

sideOutlinerClass ^ <SideOutliner class>

^SideOutliner! !

! (Delta mirrorFor: #DefWithMsgOutliner) methodsFor: 'menus' !


fileMenu ^ <Menu>

	^super fileMenu
		addSeparator;
		add: (MenuAction new
					name: '&Spawn';
					action: [ self spawn ] )
!

hasMenu ^<Boolean>

	^true!

menuBar ^ <Menu>

	^Menu new
		add: self fileMenu;
		add: self viewMenu;
		add: self typecheckingMenu!

popUpMenu ^<Menu>

	^Menu new
		addAll: self fileMenu removeAll;
		addSeparator;
		add: self viewMenu!

typecheckingMenu ^ <Menu>

^Menu new name: 'Typecheck';
    add: (MenuAction new
                  name: 'Typecheck interface';
                  action: [self typecheckInterface])
!

viewMenu ^ <Menu>

	^super viewMenu
		addSeparator;
		add: (MenuAction new
					name: 'Expand public interface';
					action: [ self expandPublicInterface ] );
		add: (MenuAction new
					name: 'Expand interface';
					action: [ self expandInterface ] )
! !

! (Delta mirrorFor: #DefWithMsgOutliner) methodsFor: 'control' !


buildClosedHeader ^ <Visual>

	^(StringGlyph for: self definitionTitle, ' ', self mirror name painter: self entryPainter) asVisual.!

definitionTitle ^ <Str>

	self subclassResponsibility
!

entryPainter ^ <Painter>

	self subclassResponsibility
!

expandInterface

	self instanceSide expandInterface.
	self classSide expandInterface.
	!

expandPublicInterface

	self instanceSide expandPublicInterface.
	self classSide expandPublicInterface.
	!

initialOpenState ^ <Boolean>

	^true!

showBodyOnlyForTop ^ <Boolean>

	^true!

spawn

	(self class for: self mirror) launch!

typecheckInterface

 self typecheckAction:[
											self mirror typecheckInterface.
											self mirror classSide typecheckInterface.
											]
		title: 'Typechecking interface of ', self mirror name.! !

! (Delta mirrorFor: #DefWithMsgOutliner) methodsFor: 'accessing' !


classSide ^ <SideOutliner>

	^classSide!

classSide: s <SideOutliner>

	classSide := s!

instanceSide ^ <SideOutliner>

	^instanceSide!

instanceSide: s <SideOutliner>

	instanceSide := s! !

! (Delta mirrorFor: #DefWithMsgOutliner) methodsFor: 'launching' !


launchOpenSide: meta <Boolean> selector: sel <Symbol>  ^<Window>

	| focusVisual <Visual> window <Window> |

	focusVisual := self openSide: meta selector: sel.
	window := self launch.
	focusVisual notNil
		ifTrue: [	window initialInputFocus: focusVisual ].
	^window
	!

openOnTypeError: te <TypeError> ^ <Visual>

te loc isMethodLocator
	ifTrue:[
				| mirror <Mirror>  meta <Boolean> |
	
				meta := te loc mirror isMeta.
				mirror := meta
					ifTrue: [		self mirror classSide ]
					ifFalse: [	self mirror ].
				(mirror sourceInfo hasSelector: te loc selector)
					ifFalse: [ ^nil ].
				self body.		"Ensure body is created"
				meta
					ifTrue: [		^self classSide openOnTypeError: te ]
 					ifFalse: [	^self instanceSide openOnTypeError: te ]
				]
	ifFalse:[self openDefinition].
	^nil!

openSide: meta <Boolean> selector: sel <Symbol> ^ <Visual>

	| mirror <Mirror> cat <Str> |
	mirror := meta
		ifTrue: [		self mirror classSide ]
		ifFalse: [	self mirror ].
	(mirror sourceInfo hasSelector: sel)
		ifFalse: [ ^nil ].
	cat := mirror sourceInfo categoryForSelector: sel.
	self body.		"Ensure body is created"
	meta
		ifTrue: [		^self classSide openCategory: cat selector: sel ]
 		ifFalse: [	^self instanceSide openCategory: cat selector: sel ]
!

outlinerForLocator: loc <DeltaLocator> ^ <CommonProgEnvOutliner>

^loc isMethodLocator
	ifTrue:[
				| mir <Mirror>  meta <Boolean> |
	
				meta :=  loc mirror isMeta.
				mir := meta
					ifTrue: [		self mirror classSide ]
					ifFalse: [	self mirror ].
				(mir sourceInfo hasSelector:  loc selector)
					ifFalse: [self error: loc selector, ' not found in ', mir name ].
				self body.		"Ensure body is created"
				meta
					ifTrue: [		self classSide outlinerForLocator: loc ]
 					ifFalse: [	self instanceSide outlinerForLocator: loc ]
				]
	ifFalse:[self definitionOutliner outlinerForLocator: loc]! !

! (Delta mirrorFor: #DefWithMsgOutliner) methodsFor: 'toolbars' !


buildOpenCloseChildrenButtons

	super buildOpenCloseChildrenButtons.
	self toolBar
			addSpace;
			addButtonWithImageFrom: 'resources/publicInterface.bmp'
					action: [ :b <Button> |	self expandPublicInterface ];
			addButtonWithImageFrom: 'resources/fullInterface.bmp'
					action: [ :b <Button> |	self expandInterface ];
			yourself! !

