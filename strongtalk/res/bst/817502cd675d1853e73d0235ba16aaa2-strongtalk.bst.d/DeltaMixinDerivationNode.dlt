Delta define: #DeltaMixinDerivationNode as: (
(Class subclassOf: 'DeltaMixinNode' instanceVariables: '')) !

(Delta mirrorFor: #DeltaMixinDerivationNode) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaMixinDerivationNode) group: 'ast'!

(Delta mirrorFor: #DeltaMixinDerivationNode)
comment: 
'This node represents the AST for a mixin derivation.

 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaMixinDerivationNode) methodsFor: 'Unclassified' !


abstract ^ <Boolean>
    ^self klass abstract!

apply: tool <DeltaASTTool>

tool mixinDerivationNode: self!

asMixinSide ^ <Side>
    ^self klass asMixinSide!

asProtocol ^ <Protocol>

^self klass asProtocol!

asSide ^ <Side>
    ^self asMixinSide asSide!

basicLocator
	^self klass basicLocator!

branded ^ <Boolean>
    ^self klass branded!

class: c selector: s

self filter:(BasicMixinDerivationData new class: c selector: s)
         using: DeltaSubstitution new initialize.!

compositeSubstitute: t <Interface> ^ <Interface>

^(self filteree compositeSubstitute: t) substitute: self substitution

 !

dualClassType ^ <ClassType>
    ^self class new class: self klass dualClassType selector: self selector!

extensionsAreSubtypes ^ <Boolean>
    ^self klass extensionsAreSubtypes!

firstClassRepType  ^ <ObjectType>

   ^self asMixinSide firstClassRepType!

heirScope ^ <Scope>
    ^self asMixinSide  heirScope !

isMonotonic ^ <Boolean>
    ^self klass isMonotonic!

klass

^self filteree klass substitute: self substitution!

komment

"This node represents the AST for a mixin derivation.
"!

localScope ^ <Scope>
    ^self asMixinSide  localScope !

messages ^ <Dict[Symbol,Message]>

   ^self asMixinSide messages!

methods ^ <Dict[Symbol,Method]>
   ^self asMixinSide methods!

mixinObj ^ <Mixin>

"Return the mixin I denote"

self deltaHack.

^self selector = #delta
    ifTrue:[(Mirror on: self klass classObj) mixin reflectee]
    ifFalse:[(Mirror on: self klass classObj) mixin reflectee].!

mixinSubstitute: t <Interface> ^ <Interface>

^self filteree mixinSubstitute: t!

monotonic ^ <Boolean>
    ^self klass monotonic!

name

^(self klass name, ' ', self selector) asSymbol!

protocolForInvocation: i <MixinInvocationNode> ^ <Protocol>

| key <Protocol> |

key :=  i superclassType asProtocol canonicalRep.

"If i represents an invocation that is equivalent to klass, we just
return the protocol for klass. This can be determined by checking
if i's superclass is the same as klass'."
key == self klass asProtocol canonicalRep superprotocol  asProtocol canonicalRep
  ifTrue:[^self klass asProtocol canonicalRep].

"Otherwise, have klass look up the protocol"
^self klass protocolForInvocation: i!

selector  ^ <Symbol>

^self filteree selector!

subtype ^ <Boolean>
    ^self klass subtype!

superclassType ^ <ClassType>
    ^self asMixinSide superclassType!

supportedProtocol ^ <Protocol>
    ^self asMixinSide supportedProtocol!

untypedName

^self klass untypedName!

varDecls ^ <Dict[Symbol,VarDecl]>
     ^self asMixinSide varDecls!

wellFormed ^ <Boolean>

| wf <Boolean> |

"should test  if klass is a class"

wf := self klass wellFormed.

^wf.! !

