Delta define: #ExternalReadWriteStreamTest as: (
(Class subclassOf: 'TestCase' instanceVariables: 'file			<FilePath>
write			<ReadWriteStream>
read			<ReadStream>
sz				<Integer>
charFile	<FilePath>
in				<CharInputStream>
s				<ReadString>')) !

(Delta mirrorFor: #ExternalReadWriteStreamTest) revision: '$Revision:$'!

(Delta mirrorFor: #ExternalReadWriteStreamTest) group: 'Unclassified'!

(Delta mirrorFor: #ExternalReadWriteStreamTest)
comment: 
''!

! (Delta mirrorFor: #ExternalReadWriteStreamTest) methodsFor: 'running' !


close: stream

	stream isNil ifTrue: [^self].
	stream isClosed ifTrue: [^self].
	stream close!

setUp

	| out	<CharOutputStream> |
    file := FilePath for: 'deltatest.tmp'.
    charFile := FilePath for: 'deltatest2.tmp'.
    
    sz := 12345.    "make sure this number is much greater than the stream buffer size" 
    write := file readWriteStream.
	0 to: sz-1 do: 
        [ :i <Int> |
            write nextPut: i \\ 100 + 32].

	out := charFile charOutputStream.
    s := 'hi 
there'.
    out nextPutAll: s.
    out close.
    in := charFile charInputStream!

tearDown

	self close: write.
	self close: read.
	in close.
	file delete.
	charFile delete! !

! (Delta mirrorFor: #ExternalReadWriteStreamTest) methodsFor: 'tests' !


testCharStreamContentsRemainingShouldHaveCorrectContents

	| contents |
	contents := in contentsRemaining.
	self assert: contents = s description: 'Wrong contents: ', contents!

testCharStreamShouldHaveCorrectContents

	1 to: s size do: 
        [ :i <Int> |
            | n |
			n := in next.
            self assert: (s at: i) =  n
            	description: 'Wrong character: ', n printString, ' at index: ', i printString].
    self assert: in atEnd description: 'Character stream should be exhausted'!

testContentsWrittenShouldMatchReadStreamContents

	| size bytes |
	write setToEnd.
	bytes := write contentsWritten.
	write close.
    read := file readStream.
    0 to: sz-1 do:
        [ :i <Int> |
            | byte <Int> |
            byte := read next.
            self should: [ (bytes at: i + 1) = byte ]
            	description: 'Wrong byte: ', (bytes at: i + 1) printString, ' at index: ', i printString].
    self should: [ read atEnd] description: 'Read stream should be at end'.
    read position: 0.
    self assert: bytes = read contentsRemaining description: 'Invalid contentsRemaining'!

testContentsWrittenShouldReturnCorrectlySizedCollection

	| bytes |
	write setToEnd.
    bytes := write contentsWritten.

    self should: [ bytes size = sz ]
    	description: 'Wrong byte count: ', bytes size printString!

testModifyingWrittenFileShouldUpdateContents

	| byte |
    write position: 5001.
    write nextPut: 123.
    write close.
    write := file readWriteStream.
    write position: 5000.
    write nextPut: 12.
    byte := write next.
    self assert: byte = 123 description: 'Wrong write byte value: ', byte printString.
    write close.

    read := file readStream.
    read position: 5001.
    byte := read next.
    self assert: byte = 123 description: 'Wrong read byte value: ', byte printString!

testPeekShouldReturnCorrectByte

	| byte |
	write close.
    read := file readStream.
    byte := read peek.
    self should: [ byte = 32 ]
    	description: 'Wrong byte: ', byte printString!

testPeekShouldReturnFirstCharacter

	| char |
	char := in peek.
	self assert: char = (s at: 1)
		description: 'Wrong character: ', char printString!

testReadStreamShouldHaveCorrectContents

	| size |
	write close.
    read := file readStream.
    0 to: sz-1 do:
        [ :i <Int> |
            | byte <Int> |
            byte := read next.
            self should: [ (i \\ 100 +32) = byte ]
            	description: 'Wrong byte: ', byte printString, ' at index: ', i printString]!

testReadStreamShouldHaveCorrectSize

	| size |
	write close.
    read := file readStream.
    size := read size.
    self should: [ size = sz ]
    	description: 'Wrong size: ', size printString!

testWrittenFileShouldHaveCorrectSize

    self should: [ write size = sz ]
    	description: 'Wrong size ', write size printString! !

