Delta define: #UnixFilePattern as: (
(Class subclassOf: 'FilePattern' instanceVariables: '')) !

(Delta mirrorFor: #UnixFilePattern) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #UnixFilePattern) group: 'base'!

(Delta mirrorFor: #UnixFilePattern)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #UnixFilePattern) classSide methodsFor: 'instance creation' !


for: pat <Str>  ^<FilePattern>

    self assert: [ self validPattern: pat ].
    ^self new pattern: pat! !

! (Delta mirrorFor: #UnixFilePattern) classSide methodsFor: 'restricted' !


patternHasWildcards: pat <Str> ^<Boolean>

    ^(pat includes: Platform multipleMatchWildcardCharacter)
        or: [ pat includes: Platform singleMatchWildcardCharacter ]! !

! (Delta mirrorFor: #UnixFilePattern) classSide methodsFor: 'testing' !


validPattern: pat <Str> ^<Boolean>

    "Make sure this is a valid syntactic pattern (should be valid even if no *s)"
    self unimplemented! !

! (Delta mirrorFor: #UnixFilePattern) methodsFor: 'accessing' !


extensions ^<FilePattern>

    ^self , (FilePattern for: '*')! !

! (Delta mirrorFor: #UnixFilePattern) methodsFor: 'iterating' !


elementsDo: blk <[FilePattern]>

    | s <CharacterReadStream> |

    s := self pattern readStream.
    [ s atEnd ]
        whileFalse:
            [   | next <Str> |
                next := s upTo: $/.
                next isEmpty
                    ifFalse: [ blk value: (FilePattern for: next)] ]!

pathsDo: blk <[FilePath]>

	self terminalPathsDo: blk
    "| els <SeqCltn[FilePattern]> i <Int> |
    els := self elements.
    i := self firstWildElementOf: els
                ifFail: [ ^self shouldNotHappen ].
    i = els size
        ifTrue: [ self terminalPathsDo: blk ]
        ifFalse: [  | rest <FilePattern> |
                        i + 1 = els size
                            ifTrue: [ rest := els last ]
                            ifFalse: [ rest := FilePattern forAll: (els copyFrom: i + 1 to: els size) ].
                        (FilePattern forAll: (els copyFrom: 1 to: i))
                            pathsDo:
                                [ :fp <FilePath> |
                                    fp isDirectory
                                        ifTrue: [ (fp, rest) pathsDo: blk ]     ]
                     ]"! !

! (Delta mirrorFor: #UnixFilePattern) methodsFor: 'private' !


firstWildElementOf: els <SeqCltn[FilePattern]> ifFail: fail <[^X def]> ^<Int | X>

    1 to: els size do:
        [ :i <Int> |
            (els at: i) isPath
                ifFalse: [ ^i ]
        ].
    ^fail value!

lastError

	^{{primitiveGetLastError}}!

patternExtending: pat <FilePattern> ^<Str>

    ^pat pattern last = $/
        ifTrue: [ pat pattern, self pattern ]
        ifFalse: [ pat pattern,'/', self pattern ]!

terminalPathsDo: blk <[FilePath]>

    | glob pathArray strings patternString |
   glob := GlobT new allocate.
   patternString := CString for: self pattern.
   {{<libc ExternalProxy glob>
    	pattern: patternString
    	flags: 0
    	ignore: 0
    	glob: glob}}.
	[glob pathsDo: [:pathString| blk value: (FilePath for: pathString)]]
		ensure: [
			glob free.
			patternString free.]! !

! (Delta mirrorFor: #UnixFilePattern) methodsFor: 'testing' !


isAbsolute ^<Boolean>

    ^self pattern first == $/! !

