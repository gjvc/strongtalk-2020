Delta define: #Time as: (
(Class subclassOf: 'Magnitude[Time]' instanceVariables: 'seconds <Int>  "seconds since midnight"
		')) !

(Delta mirrorFor: #Time) revision: '$Revision: 1.5 $'!

(Delta mirrorFor: #Time) group: 'base'!

(Delta mirrorFor: #Time)
comment: 
'Tags: %BlueBook  %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.
'!

! (Delta mirrorFor: #Time) classSide methodsFor: 'inquiries' !


clockValue ^<Float>
	"return a double second clock value reflecting
		elapsed time since Smalltalk started"

	^{{primitiveElapsedTime}}!

dateAndTimeNow ^<Tuple[Date,Time]>

	| t <SYSTEMTIME> time <Time> date <Date> |
	t := Time localSYSTEMTIME.
	^[	time := self fromSeconds: (t wHour * 3600) + (t wMinute * 60) + t wSecond.
		date := Date newDay: t wDay monthIndex: t wMonth year: t wYear.
		date,,time
	 ] ensure: [ t free ]
!

microsecondFloatClockValue ^<Float>

	^{{primitiveElapsedTime}}!

millisecondClockValue ^<Int>

	| u <Float> |
	u := self microsecondFloatClockValue.
	^(u * 1000.0) asInteger!

millisecondUserClockValue ^<Int>
	"return a clock value that is proportional to user cpu time (non-OS CPU time in this OS process)"
	| u <Float> |
	u := {{primitiveUserTime}}.
	^(u * 1000.0) asInteger!

millisecondsToRun: f <[]> ^<Int>
	"Return the number of elapsed milliseconds to run f.  Note that this is NOT
		user CPU seconds; for that use userMillisecondsToRun:"

	| t <Int> |
	t := self millisecondClockValue.
	f value.
	^self millisecondClockValue - t!

secondsToRun: f <[]> ^<Float>
	"return the number of elapsed seconds it takes to evaluate f"

	| t <Float> |
	t := {{primitiveElapsedTime}}.
	f value.
	^{{primitiveElapsedTime}} - t!

timeWords ^<SeqCltn[Int]>

	self unimplemented!

totalSeconds ^<Int>

	self unimplemented!

userMillisecondsToRun: f <[]> ^<Int>
	"return number of user cpu milliseconds to evaluate f"

	| t <Int> |
	t := self millisecondUserClockValue.
	f value.
	^self millisecondUserClockValue - t! !

! (Delta mirrorFor: #Time) classSide methodsFor: 'instance creation' !


fromSeconds: s <Int> ^<Instance>

	^self new initSeconds: s!

now ^<Instance>

	| t <SYSTEMTIME> |
	t := Time localSYSTEMTIME.
	^[	self fromSeconds: (t wHour * 3600) + (t wMinute * 60) + t wSecond
	 ] ensure: [ t free ]
! !

! (Delta mirrorFor: #Time) classSide methodsFor: 'restricted-win32' !


localSYSTEMTIME ^<SYSTEMTIME>

	^Platform localSYSTEMTIME
! !

! (Delta mirrorFor: #Time) methodsFor: 'accessing' !


asSeconds ^<Int>

	^seconds!

hash ^<Int>

	^self asSeconds hash!

hour ^<Int>

	^self asSeconds // 3600!

minute ^<Int>
	"The minute of the hour"

	^(self asSeconds \\ (60*60)) // 60!

minutes ^<Int>

	^self asSeconds // 60!

second ^<Int>
	"The second of the minute.  Use asSeconds to get the total seconds"

	^self asSeconds \\ 60! !

! (Delta mirrorFor: #Time) methodsFor: 'arithmetic' !


addTime: amt <Date|Time> ^<Instance>

	^self actualClass fromSeconds: self asSeconds + amt asSeconds!

subtractTime: amt <Date|Time> ^<Instance>

	^self actualClass fromSeconds: self asSeconds - amt asSeconds! !

! (Delta mirrorFor: #Time) methodsFor: 'comparing' !


< other <Time> ^<Boolean>

	^self asSeconds < other asSeconds!

= other <Object> ^<Boolean>

	^self == other or:
		[ (Time coerce: other else: [ ^false ]) asSeconds = self asSeconds ]! !

! (Delta mirrorFor: #Time) methodsFor: 'copying' !


copy ^<Instance>
	^self! !

! (Delta mirrorFor: #Time) methodsFor: 'initialization' !


initSeconds: s <Int>

	seconds := s! !

! (Delta mirrorFor: #Time) methodsFor: 'printing' !


printOn: strm <CharOutputStream>

	strm print: self hour;
			put: $:;
			print: self minute;
			put: $:;
			print: self second! !

