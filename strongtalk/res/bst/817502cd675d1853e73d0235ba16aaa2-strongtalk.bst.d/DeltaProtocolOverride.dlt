Delta define: #DeltaProtocolOverride as: (
(Class subclassOf: 'DeltaProtocol' instanceVariables: '')) !

(Delta mirrorFor: #DeltaProtocolOverride) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #DeltaProtocolOverride) group: 'ast'!

(Delta mirrorFor: #DeltaProtocolOverride)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaProtocolOverride) methodsFor: 'Unclassified' !


allSelfClassTVs ^ <Collection[TypeVar]>
    | tvs <Collection[TypeVar]>  |

tvs := self type1 allSelfClassTVs.
self type2 allSelfClassTVs do:[ : tv <TypeVar>  | tvs add: tv].
^tvs!

allSelfTVs ^ <Collection[TypeVar]>
    | tvs <Collection[TypeVar]>  |

tvs := self type1 allSelfTVs.
self type2 allSelfTVs do:[ : tv <TypeVar>  | tvs add: tv].
^tvs!

antimonotonicIn: tv <TypeVar > ^ <Boolean>
    ^(self type1 antimonotonicIn: tv) and:[self type2 antimonotonicIn: tv]!

apply: tool <DeltaTool > ^ <Self>
	tool protocolOverrideNode: self.!

bareAttributes ^ <Dict[Symbol,MsgSignature]>
    ^self delta bareAttributes override: self base bareAttributes.!

bareSecondaryAttributes ^ <Dict[Symbol,MsgSignature]>
    ^self delta bareSecondaryAttributes override: self base bareSecondaryAttributes!

base ^ <Protocol>
    ^self type2!

basicLocator
	^DeltaBasicOverrideLocator new 
		loc1: self type1 basicLocator
		loc2: self type2 basicLocator!

branded ^ <Boolean>
    ^false!

classProtocol ^ <Protocol>
    ^classProtocol isNil ifTrue:[classProtocol := DeltaUnaryOverride new dual: self]
                                ifFalse:[classProtocol].!

declaredSubprotocolOf: p <DeltaProtocol > ^ <Boolean>
    ^self  == p or:[(self base declaredSubprotocolOf: p) or:[self delta declaredSubprotocolOf: p]]!

declaredSuperMixinInvocationOf: m <MixinInvocationNode> ^<Boolean>

^false!

declaredSupertypes ^ <Cltn[ObjectType]>

| c <OrdCltn[ObjectType]> |

c := OrderedCollection[ObjectType] new.
c 	add: self type1;
	add: self type2.
^c!

delta ^ <Protocol>
    ^self type1!

hasNoConflicts

" This message verifies that the signatures of all messages in delta 
are subtypes of the corresponding signatures in base (if they exist) "

| ms1 <Dict[Symbol, MsgSignature]> ms2 <Dict[Symbol, MsgSignature]> |

ms1 := self delta bareAttributes.
ms2 := self base bareAttributes.

^ms1 keys inject: true into:[:b <Boolean> :k <Symbol> | 
                                                    b and: [self noConflictForSelector: k between: ms1 and: ms2].
                                                    ].
!

involvesTypeVariables ^ <Boolean>
    ^self delta involvesTypeVariables or:[self base involvesTypeVariables]!

isMonotonic ^ <Boolean>
    ^(self type1 isMonotonic) and:[self type2 isMonotonic].!

localBareAttributes ^ <Dict[Symbol,MsgSignature]>
    ^Dictionary[Symbol,MsgSignature].!

localBareSecondaryAttributes ^ <Dict[Symbol,MsgSignature]>
    ^Dictionary[Symbol,MsgSignature] new.!

monotonicIn: tv <TypeVar > ^ <Boolean>
    ^(self type1 monotonicIn: tv) and:[self type2 monotonicIn: tv]!

myLocalSubstitution ^ <Substitution>
" This method returns a substitution that replaces t1's and t2's
type variables with my own. It is used to modify the signatures
inherited from t1 and t2 so that all self reference uses
my type variables. That is equivalent to invoking the t1's and t2's
generator with the formal parameters of my generator during
inheritance.
"  
  | theta <Substitution>  t1 <Protocol>   t2 <Protocol>  |

theta := DeltaSubstitution new initialize.

t1 := self type1.
theta at: t1 selfTV put: self selfTV.
theta at: t1 selfClassTV put: self selfClassTV.

t2 := self type2.
theta at: t2 selfTV put: self selfTV.
theta at: t2 selfClassTV put: self selfClassTV.

^theta!

name  ^ <Symbol>

^(self type1 name, '/', self type2 name) asSymbol!

noConflictForSelector: sel <Symbol> between: ms1 <Dict[Symbol, MsgSignature]> and: ms2 <Dict[Symbol, MsgSignature]> ^ <Boolean>

"Private"

| sig1 <MsgSignature>  sig2 <MsgSignature> result <Boolean>  |

sig2 := self compositeSubstitute:  (ms2 at: sel ifAbsent:[^true]).
sig1 :=  self compositeSubstitute: (ms1 at: sel ).

result := sig1 subtypeOf: sig2 assuming: DeltaGlobalTrail.
result  ifFalse:[self reportError: (DeltaOverrideMsgConflictError new conflictingSelector: sel)].
^result
            !

rawPrimaryInterface ^ <Interface>
    ^(self delta rawPrimaryInterface override: self base rawPrimaryInterface) substitute: self myLocalSubstitution.!

rawSecondaryInterface ^ <Interface>
    ^(self delta rawSecondaryInterface override: self base rawSecondaryInterface) substitute: self myLocalSubstitution.!

relevantTypeVars  ^ <Set[TypeVar]>

| set   <Set[TypeVar]> |

set := self filteree relevantTypeVars copy.
set add: self selfTV;
       add: self selfClassTV.
self substitution keys do: [:k <Symbol> | set remove: k ifAbsent:[].].
self myLocalSubstitution keys do: [:k <Symbol> | set remove: k ifAbsent:[].].
self substitution values do:[:v <ObjectType> |
                                                      v isTypeVar ifTrue:[set add: v].
                                                       ].
^set.!

scope: s <Scope>

self type1 scope: s.
self type2 scope: s.!

secondaryInterface
    ^self type1 secondaryInterface override: self type2 secondaryInterface!

type1 ^ <TypeExpr>
    ^self filteree type1 substitute: self substitution!

type1: t1 <DeltaProtocol >type2: t2 <DeltaProtocol > ^ <Self>
    substitution := DeltaSubstitution new.
filteree := BasicOverrideData new type1: t1 type2: t2 typeOfInstances: self.!

type2 ^ <TypeExpr>
    ^self filteree type2 substitute: self substitution!

wellFormed ^ <Boolean>
    ^self type1 wellFormed and:[self type2 wellFormed and:[self hasNoConflicts]].! !

