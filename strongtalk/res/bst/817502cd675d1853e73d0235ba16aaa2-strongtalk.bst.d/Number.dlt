Delta define: #Number as: (
(Class subclassOf: 'Magnitude[Number] mixin |> Object' instanceVariables: '') abstract) !

(Delta mirrorFor: #Number) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #Number) group: 'base'!

(Delta mirrorFor: #Number)
comment: 
'Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #Number) classSide methodsFor: 'instance creation' !


new ^<Instance>

	self shouldNotImplement! !

! (Delta mirrorFor: #Number) classSide methodsFor: 'testing' !


test
	"self test"

	self	testEquals;
		testRelationals;
		testArithmetic.!

testArithmetic
	"self testArithmetic"
	| eps <Float> |
	eps := 0.00000001.
	
		"+"
		[ 3+3 = 6 ] verify. [ 1+(2/3) = (5/3) ] verify. [ 1 + 2.0 isWithin: eps of: 3.0 ] verify.
		[ 3.0 + 3.0 isWithin: eps of:  6.0 ] verify. [ 1.0 + (2/3) isWithin: eps of: 5/3 ] verify. [ 1.0 + 2 isWithin: eps of: 3.0] verify.
		[ (1/3 + 1/6) = (2/9) ] verify. [ 2/3 + (1 asFloat/ 3 asFloat) isWithin: eps of: 1 ] verify.

		"-"
		[ 3-1 = 2 ] verify. [ 1-(2/3) = (1/3) ] verify. [ 1 - 2.0 isWithin: eps of: -1.0 ] verify.
		[ 3.0 - 2.0 isWithin: eps of:  1.0 ] verify. [ 1.0 - (2/3) isWithin: eps of: 1/3 ] verify. [ 1.0 - 2 isWithin: eps of: -1.0] verify.
		[ (1/3 - 1/6) = (-1/9) ] verify. [ 4/3 - (1 asFloat/ 3 asFloat) isWithin: eps of: 1 ] verify.

		"*"
		[ 2*3 = 6 ] verify. [ 2*3.0 isWithin: eps of: 6.0 ] verify. [ 3*(1/3) = 1 ] verify.
		[ 2.0 *3.0 isWithin: eps of: 6.0 ] verify. [ 2.0*(1/2) isWithin: eps of: 1 ] verify. [ 2.0 * 3 isWithin: eps of: 6 ] verify.
		[ 2/3 * (1/3) = (2/9) ] verify. [ 2/3 * (1 asFloat / 3 asFloat) isWithin: eps of: 2/9 ] verify. [ 2/3 * 2 = (4/3) ] verify.

		"/"
		[ 6/3 = 2 ] verify. [ 6/3.0 isWithin: eps of: 2 ] verify. [ 3/(1/3) = 9 ] verify.
		[ 6.0 / 2 isWithin: eps of: 3 ] verify. [ 6.0 / 2.0 isWithin: eps of: 3 ] verify. [ 6.0 / (1/3) isWithin: eps of: 18 ] verify. 
		[ 2/3/(1/2) = (4/3) ] verify. [ 2/3/0.5 isWithin: eps of: 4/3 ] verify. [ 2/3/2 = (1/3) ] verify.

		"//"
		[ 7 // 2 = 3 ] verify. [ 7 // 2.0 isWithin: eps of: 3 ] verify. [ 7 // (1/2) = 14 ] verify. [ -7 // 2 = -4 ] verify.
		[ 7.0 // 2.0 = 3 ] verify. [ 7.0 // 2 isWithin: eps of: 3 ] verify. [ 7.0 // (1/2) = 14 ] verify. [ -7.0 // 2 = -4 ] verify.
		[ 7/3 // (2/3) = 3 ] verify. [  -7/3 // (2/3) = -4 ] verify.

		"\\"
		[ 7 \\ 2 = 1 ] verify. [ 7 \\ 2.0 isWithin: eps of: 1 ] verify. [ (7+ 1/3) \\ (1/2) = (1/6) ] verify. [ -7 \\ 2 = 1 ] verify.
		[ 7.0 \\ 2.0 isWithin: eps of: 1.0 ] verify.
		[ 7.0 \\ 2 isWithin: eps of: 1 ] verify.
		[ (7.0 + (1/3) asFloat) \\ (1/2) isWithin: eps of: 1/3 ] verify.
		[ -7.0 \\ 2 isWithin: eps of: 1 ] verify.
		[ 7/3 \\ (2/3) = (1/3) ] verify. [  -7/3 \\ (2/3) = (1/3) ] verify.
!

testEquals
	"self testEquals"

	"=, ~="
	[ 123 == 123 ] verify. [ (-2 == -3) not ] verify.
	[ 123 = 123 ] verify. [ 123 ~= -123 ] verify.
	[ 123 = (246/2) ] verify. [ 123 ~= (246/3) ] verify.
	[ 123 = 123.0 ] verify. [ 123 ~= 123.1 ] verify.

	[ 123.0 = 123.0 ] verify. [ 123.0 ~= 123.4 ] verify.
	[ 123.0 = 123 ] verify. [ 123.0 ~= 124 ] verify.
	[ 0.5 = (1/2) ] verify. [ -0.5 = (1/-2) ] verify. [ 0.5 ~= (1/3) ] verify.

	[ (3/4) = (6/8) ] verify. [ (3/4) ~= (1/4) ] verify.
	[ (1/3) = (1.0 / 3.0) ] verify. [ (1/3) ~= 0.33333 ] verify.
	[ (2/3) * 3 = 2 ] verify.
	[ (-10/-5) = 2 ] verify. [ (-10/5) = -2 ] verify. [ (10/-5) = -2 ] verify.

!

testRelationals
	"self testRelationals"

	"<"
	[ 123 < 125 ] verify. [ (123 < 122) not ] verify.
	[ 123 < 124.0 ] verify. [ (123 < 122.0) not ] verify.
	[ 2 < (11/5) ] verify. [ (2 < (9/5)) not ] verify.

	[ 123.0 < 124.0 ] verify. 
	[ 123.0 < 124 ] verify.
	[ 2.0 < (11/5) ] verify.

	[ (11/5) < (12/5) ] verify. [ ((11/5) < (9/5)) not ] verify. [ (9/5) < (10/5) ] verify.
	[ ((11/5) < (11/5)) not ] verify.
	[ (-4/5) < 0 ] verify. [ (4/-5) < (-3/5) ] verify. [ (2/3) < (-4/-3) ] verify.
	[ 2/3 < 1 ] verify. [ (4/3 < 1) not ] verify.
	[ 2/3 < 1.0 ] verify. [ (4/3 < 1.0) not ] verify.

	">"
	[ 123 > 122 ] verify. [ (121 > 122) not ] verify.
	[ 123 > 122.0 ] verify. [ (123 > 124.0) not ] verify.
	[ 2 > (9/5) ] verify. [ (2 > (11/5)) not ] verify.

	[ 124.0 > 123.0 ] verify. 
	[ 124.0 > 123 ] verify.
	[ 2.0 > (9/5) ] verify.

	[ (12/5) > (11/5) ] verify. [ ((9/5) > (11/5)) not ] verify. [ (10/5) > (9/5) ] verify.
	[ ((11/5) > (11/5)) not ] verify.
	[ (-4/5) > -1 ] verify. [ (3/-5) > (-4/5) ] verify. [ (4/3) > (-2/-3) ] verify.
	[ 2/3 > 0 ] verify. [ (4/3 > 2) not ] verify.
	[ 2/3 > 0.0 ] verify. [ (4/3 > 2.0) not ] verify.

	"<="
	[ 1 <= 2 ] verify. [ 2 <= 2 ] verify. [ (2 <= 1)not ] verify.
	[ 1.0 <= 2.0 ] verify. [ 2.0 <= 2.0 ] verify. [ (2.0 <= 1.0)not ] verify.
	[ 0.666 <= (2/3) ] verify. [ (0.666 <= (1/3) ) not ] verify.

	">="
	[ 1 >= 0 ] verify. [ (1 >= 2) not ] verify. [ 1 >= 1 ] verify.
	[ 1.0 >= 0.0 ] verify. [ (1.0 >= 2.0) not ] verify. [ 1.0 >= 1.0 ] verify.
	[ 0.66 >= (1/3)  ] verify. [ (0.66 >= (2/3)) not ] verify.
	[ (1/3) >= (1/3) ] verify. [ (2/3) >= (1/3) ] verify.

	">"
	[ 1 > 0 ] verify. [ (1 > 2) not ] verify. [ (1 > 1) not ] verify.
	[ 1.0 > 0.0 ] verify. [ (1.0 > 2.0) not ] verify. [ (1.0 > 1.0) not ] verify.
	[ 0.66 > (1/3)  ] verify. [ (0.66 > (2/3)) not ] verify.
	[ ((1/3) > (1/3)) not ] verify. [ (2/3) > (1/3) ] verify.

	"min:"
	[ (4 min: 5) = 4 ] verify. [ (5 min: 4) = 4 ] verify. [  (5 min: 4.0) = 4.0 ] verify. [ (1 min: 2/3)  = (2/3) ] verify.

	"max:"
	[ (5 max: 4) = 5 ] verify. [ (5 max: 4) = 5 ] verify. [  (5 max: 4.0) = 5 ] verify. [ (1 max: 4/3)  = (4/3) ] verify.

	"between:and:"
	[ 2 between: 1 and: 3 ] verify. [ 3 between: 3 and: 4 ] verify. [ (2 between: 3 and: 4) not ] verify.

! !

! (Delta mirrorFor: #Number) methodsFor: 'benchmarking' !


higherOf: aNumber <Number> ^<Number>
    ^(self min: aNumber)!

isAbove: aNumber <Number> ^<Boolean>
    ^self < aNumber!

isLeftOf: aNumber <Number> ^<Boolean>
    ^self < aNumber!

leftMost: aNumber <Number> ^<Number>
    ^(self min: aNumber)!

lowerOf: aNumber <Number> ^<Number>
    ^(self max: aNumber)!

rightMost: aNumber <Number> ^<Number>
    ^(self max: aNumber)! !

! (Delta mirrorFor: #Number) methodsFor: 'constants' !


unit ^<Number>
	"The unit value, in whatever representation is appropriate for each subclass"

	self subclassResponsibility!

zero ^<Number>
	"zero, in whatever representation is appropriate for each subclass"

	self subclassResponsibility! !

! (Delta mirrorFor: #Number) methodsFor: 'converting' !


@ yval <Number>  ^<Point>
	"return a point with the receiver as x, and yval as y"

	^Point x: self y: yval!

asFloat ^<Float>

	self subclassResponsibility!

asInteger ^<Integer>

	self subclassResponsibility!

degreesToRadians ^<Number>

	self unimplemented!

radiansToDegrees ^<Number>

	self unimplemented! !

! (Delta mirrorFor: #Number) methodsFor: 'copying' !


copy ^<Instance>
	^self! !

! (Delta mirrorFor: #Number) methodsFor: 'fake brands' !


Number ^<Boolean>

	^true! !

! (Delta mirrorFor: #Number) methodsFor: 'iteration' !


to: stop <Number> ^<Interval>

	^Interval from: self to: stop!

to: stop <Number> by: step <Number> ^<Interval>

	^Interval from: self to: stop by: step! !

! (Delta mirrorFor: #Number) methodsFor: 'mathematical functions' !


arcCos ^<Number>

	self unimplemented!

arcSin ^<Number>

	self unimplemented!

arcTan ^<Number>

	self unimplemented!

cos ^<Number>

	self unimplemented!

exp ^<Number>
	self unimplemented!

floorLog: radix <Number> ^<Int>
	self unimplemented!

ln ^<Number>
	self unimplemented!

log: o <Number> ^<Number>
	self unimplemented!

raisedTo: power <Number> ^<Number>
	self unimplemented!

raisedToInteger: power <Int> ^<Number>
	self unimplemented!

sin ^<Number>

	self unimplemented!

sqrt ^<Number>
	
	^self asFloat sqrt!

tan ^<Number>

	self unimplemented! !

! (Delta mirrorFor: #Number) methodsFor: 'operations' !


* a <Number> ^<Number>
			{where X <Number> is arg 1}

	self subclassResponsibility!

+ a <Number> ^<Number>
			{where X <Number> is arg 1}

	self subclassResponsibility!

- a <Number> ^<Number>
			{where X <Number> is arg 1}

	self subclassResponsibility!

/ a <Number> ^<Number>
			{where X <Number> is arg 1}

	self subclassResponsibility!

// arg <Number> ^<Int>
	"Integer quotient with truncation towards negative infinity"

	^(self / arg) floor!

\\ a <Number> ^<Number>
			{where X <Number> is arg 1}
	"Modulo, implemented with truncation towards negative infinity"

	self subclassResponsibility!

abs ^<Number>

	^self < self zero
		ifTrue: [ self negated ]
		ifFalse: [ self ]!

isWithin: epsilon <Number> of: other <Number> ^<Boolean>
	"Test whether the 'distance' from the receiver to other is less than or equal to
	  epsilon. This is the right way to compare floating point numbers, or numbers in different
	  representations, for equality"

	^(self - other) abs <= epsilon!

negated ^<Number>

	^self zero - self!

quo: n <Number> ^<Int>
	"Integer quotient with truncation towards zero"

	^(self / n) truncated !

reciprocol ^<Number>

	^self unit/self!

rem: n <Number> ^<Number>

	self unimplemented!

squared ^<Number>

	^self * self! !

! (Delta mirrorFor: #Number) methodsFor: 'restricted-double dispatching' !


addFromFloat: o <Float> ^<Number>
	"%generated code- do not modify"
	^self asFloat + o!

addFromInteger: o <Integer> ^<Number>
	"%generated code- do not modify"
	^self + o asFloat!

addFromRationalNumber: o <RationalNumber> ^<Number>
	"%generated code- do not modify"
	^self + o asFloat!

addFromSmallInteger: o <SmallInteger> ^<Number>
	"%generated code- do not modify"
	^self + o asFloat!

bitAndFromInteger: arg <Integer> ^ <Integer>

	^arg bitAnd: self asInteger!

bitOrFromInteger: arg <Integer> ^ <Integer>

	^arg bitOr: self asInteger!

bitXorFromInteger: arg <Integer> ^ <Integer>

	^arg bitXor: self asInteger!

divideFromFloat: o <Float> ^<Number>
	"%generated code- do not modify"
	^o / self asFloat!

divideFromInteger: o <Integer> ^<Number>
	"%generated code- do not modify"
	^o asFloat / self!

divideFromRationalNumber: o <RationalNumber> ^<Number>
	"%generated code- do not modify"
	^o asFloat / self!

divideFromSmallInteger: o <SmallInteger> ^<Number>

	^self isZero
		ifTrue: [(ZeroDivide dividend: o) signal]
		ifFalse: [o asFloat / self]!

equalFromFloat: o <Float> ^<Boolean>
	"%generated code- do not modify"
	^o = self asFloat!

equalFromInteger: o <Integer> ^<Boolean>
	"%generated code- do not modify"
	^self = o asFloat!

equalFromRationalNumber: o <RationalNumber> ^<Boolean>
	"%generated code- do not modify"
	^self = o asFloat!

equalFromSmallInteger: o <SmallInteger> ^<Boolean>
	"%generated code- do not modify"
	^self = o asFloat!

expandRect: r <Rect> ^<Rect>

	^Rectangle
		left: r left - self
		right: r right + self
		top: r top - self
		bottom: r bottom + self!

insetRect: r <Rect> ^<Rect>

	^Rectangle
		left: r left + self
		right: r right - self
		top: r top + self
		bottom: r bottom - self!

lessFromFloat: o <Float> ^<Boolean>
	"%generated code- do not modify"
	^o < self asFloat!

lessFromInteger: o <Integer> ^<Boolean>
	"%generated code- do not modify"
	^o asFloat < self!

lessFromRationalNumber: o <RationalNumber> ^<Boolean>
	"%generated code- do not modify"
	^o asFloat < self!

lessFromSmallInteger: o <SmallInteger> ^<Boolean>
	"%generated code- do not modify"
	^o asFloat < self!

moduloFromFloat: o <Float> ^<Number>
	"%generated code- do not modify"
	^o \\ self asFloat!

moduloFromInteger: o <Integer> ^<Number>
	"%generated code- do not modify"
	^o asFloat \\ self!

moduloFromRationalNumber: o <RationalNumber> ^<Number>
	"%generated code- do not modify"
	^o asFloat \\ self!

moduloFromSmallInteger: o <SmallInteger> ^<Number>
	"%generated code- do not modify"
	^o asFloat \\ self!

multiplyFromFloat: o <Float> ^<Number>
	"%generated code- do not modify"
	^self asFloat * o!

multiplyFromInteger: o <Integer> ^<Number>
	"%generated code- do not modify"
	^self * o asFloat!

multiplyFromRationalNumber: o <RationalNumber> ^<Number>
	"%generated code- do not modify"
	^self * o asFloat!

multiplyFromSmallInteger: o <SmallInteger> ^<Number>
	"%generated code- do not modify"
	^self * o asFloat!

subtractFromFloat: o <Float> ^<Number>
	"%generated code- do not modify"
	^o - self asFloat!

subtractFromInteger: o <Integer> ^<Number>
	"%generated code- do not modify"
	^o asFloat - self!

subtractFromRationalNumber: o <RationalNumber> ^<Number>
	"%generated code- do not modify"
	^o asFloat - self!

subtractFromSmallInteger: o <SmallInteger> ^<Number>
	"%generated code- do not modify"
	^o asFloat - self! !

! (Delta mirrorFor: #Number) methodsFor: 'testing' !


even ^<Boolean>

	^(self \\ 2) = 0!

isZero

	^self = self zero!

negative ^<Boolean>

	^self < self zero!

odd ^<Boolean>

	^(self \\ 2) ~= 0!

positive ^<Boolean>

	^self >= self zero!

sign ^<Number>

	^self > self zero
		ifTrue: [ self unit ]
		ifFalse: [ self < self zero ifTrue: [ self unit negated ] ifFalse: [ self zero ] ]!

strictlyPositive ^<Boolean>

	^self > self zero! !

! (Delta mirrorFor: #Number) methodsFor: 'truncation and rounding' !


ceiling ^<Int>
	"Return the receiver truncated to the nearest integer towards positive infinity"

	self unimplemented!

floor ^<Int>
	"Return the receiver truncated to the nearest integral value towards negative infinity"

	| t <Int> |
	^self < self zero
		ifFalse: [ self truncated ]
		ifTrue: [	
				t := self truncated.
				t = self
					ifTrue: [ t ]
					ifFalse: [ t - 1 ]	]!

roundTo: n <Number> ^<Number>

	self unimplemented!

rounded ^<Int>
	"The nearest integral value to the receiver.  When this is ambiguous (e.g. -1.5), choose the
		integral value farthest away from 0 (in the above example, -2)."

"%todo: use the version below when quo: is implemented for doubles
	^((self + self + self sign) quo: (self unit + self unit)) asInteger
"

	^self negative
		ifFalse: [ (self + 0.5d) truncated ]
		ifTrue: [ (self - 0.5d) truncated ]!

truncateTo: grid <Number> ^<Number>

	^(self quo: grid) * grid!

truncated ^<Int>
	"Return the receiver truncated to the nearest integral value towards 0."

	self subclassResponsibility! !

