Delta define: #LargeInteger as: (
(Class subclassOf: 'IndexedByteInstanceVariables |> Integer' instanceVariables: '')) !

(Delta mirrorFor: #LargeInteger) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #LargeInteger) group: 'base'!

(Delta mirrorFor: #LargeInteger)
comment: 
'Implements infinite precision integer arithmetic.  This class should never be referred
to directly by user code.

Tags: %BlueBook

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.1 $
'!

! (Delta mirrorFor: #LargeInteger) classSide methodsFor: 'restricted-to floats' !


forFloat: f <Float> ^<LargeInteger>

	^{{self primitiveIndexedByteLargeIntegerFromFloat: f ifFail: [ :err <Symbol> | self error: err ] }}	 	 ! !

! (Delta mirrorFor: #LargeInteger) classSide methodsFor: 'restricted-to integers' !


forSmallInteger: sm <SmallInteger> ^<LargeInteger>

	^guaranteed <LargeInteger>
		{{self primitiveIndexedByteLargeIntegerFromSmallInteger: sm
			ifFail: [ :err <Symbol> | self error: err ]
	 	 }}! !

! (Delta mirrorFor: #LargeInteger) classSide methodsFor: 'testing' !


test

	[ (SmallInteger maxVal + 1) class = LargeInteger ] verify.
	[ ((SmallInteger maxVal + 1) - 1) class = SmallInteger ] verify.
	[ ((SmallInteger maxVal + 1) - 1) = SmallInteger maxVal ] verify.
	[ ((SmallInteger maxVal + 1) - SmallInteger maxVal) = 1 ] verify.
	[ ((SmallInteger maxVal * 2) // 2) = SmallInteger maxVal ] verify.
	[ ((SmallInteger maxVal + SmallInteger maxVal ) // 2) = SmallInteger maxVal ] verify.
	[ ((SmallInteger maxVal * 2 ) - (SmallInteger maxVal * 2 )) = 0 ] verify.

	[ (SmallInteger maxVal * 3 ) > (SmallInteger maxVal * 2 ) ] verify.
	[ (SmallInteger maxVal * -3 ) < (SmallInteger maxVal * 2 ) ] verify.
	[ SmallInteger maxVal < (SmallInteger maxVal * 2 ) ] verify.
	[ (SmallInteger maxVal * -3 ) = (SmallInteger maxVal * -3 ) ] verify.
	[ (SmallInteger maxVal * -3 ) ~= (SmallInteger maxVal * 3 ) ] verify.
	[ (SmallInteger maxVal * 3 ) = (SmallInteger maxVal * 3 ) ] verify.
	[ ((SmallInteger maxVal * -3) * -1 ) = (SmallInteger maxVal * 3 ) ] verify.
	[ SmallInteger maxVal = (((SmallInteger maxVal * -3) * -1 ) // 3)  ] verify.
	[ ((SmallInteger maxVal * -3) / (SmallInteger maxVal * -3)) = 1 ] verify.
	[ ((SmallInteger maxVal * 2) / (SmallInteger maxVal * 3)) = (2/3) ] verify.
	[ ((((SmallInteger maxVal * 2) * 2.0) // 2) / (SmallInteger maxVal * 3)) = (2/3) ] verify.


	[ 20 factorial printString =  '2432902008176640000' ] verify.
	[ 20 factorial =  (Integer readFrom: '2432902008176640000' readStream) ] verify.
! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'bit operations' !


<< bits <Int> ^ <Int>

	bits < 0 ifTrue: [self error: 'shift right should not be negative'].
	^self bitShift: bits!

>> bits <Int> ^ <Int>

	bits < 0 ifTrue: [self error: 'shift left should not be negative'].
	^self bitShift: bits negated!

bitAnd: arg <Number> ^ <Int>

	^{{self primitiveIndexedByteLargeIntegerAnd: arg
				ifFail: [:err|
							#FirstArgumentHasWrongType == err
								ifTrue: [super bitAnd: arg]
								ifFalse: [self error: err]]}}!

bitOr: arg <Number> ^ <Int>

	^{{self primitiveIndexedByteLargeIntegerOr: arg
				ifFail: [:err|
							#FirstArgumentHasWrongType == err
								ifTrue: [super bitOr: arg]
								ifFalse: [self error: err]]}}!

bitShift: bits <Int> ^ <Int>

	^{{self primitiveIndexedByteLargeIntegerShift: bits
				ifFail: [:err | self error: err]}}!

bitXor: arg <Number> ^ <Int>

	^{{self primitiveIndexedByteLargeIntegerXor: arg
				ifFail: [:err|
							#FirstArgumentHasWrongType == err
								ifTrue: [super bitXor: arg]
								ifFalse: [self error: err]]}}! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'converting' !


asAlien ^<Alien|SmallInt>

	^self < 0
		ifTrue: [Alien forLong: self]
		ifFalse: [Alien forULong: self]
!

asFloat ^ <Float>

	^{{ self primitiveIndexedByteLargeIntegerAsFloatIfFail: [ :err <Symbol> | self error: err ] }}
! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'operations' !


// arg <Number> ^<Int>

	^{{self primitiveIndexedByteLargeIntegerDiv: arg
			ifFail: [ :err <Symbol> |
							^err == #FirstArgumentHasWrongType
								ifTrue: [ super // arg ]
								ifFalse: [ self error: 'LargeInteger //: ', err ]
					  ]
		}}!

rem: arg <Number> ^ <Number>

	^{{self primitiveIndexedByteLargeIntegerRem: arg asLargeInteger
				ifFail: [ :err <Symbol> | self nonPrimitiveRem: arg error: err ]}}! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'printing' !


printOn: strm <CharOutputStream>

	"reimplemented to use print string primitive, which is much faster"
	strm putAll: self printString!

printString ^<Str>

	| ba <ByteArray> size <Integer> |
	ba := {{self primitiveIndexedByteLargeIntegerToStringBase: 10 ifFail:
		[ :err <Symbol> |	self error: err ]
	}}.
	"Right now the primitive returns a byte array with trailing zeroes. Robert will fix this"
	size := ba size.
	[ 0 = (ba at: size) and: [ size > 1] ] whileTrue: [ size := size - 1 ].
	^(ba copyWithSize: size) asString! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'private' !


compareToLargeInteger: li <LargeInteger> ^<Int>

	| result <Int> |
	result := {{self primitiveIndexedByteLargeIntegerCompare: li
						ifFail: [ :err <Symbol> | self error: err ]
				   }}.
	^result > 0
		ifTrue: [ 1 ]
		ifFalse: [ result < 0
							ifTrue: [ -1 ]
							ifFalse: [ 0 ]
					 ]!

nonPrimitiveDiv: a <Number> error: err <Symbol> ^<Int>
	"This is invoked on primitive failure"

	^err == #FirstArgumentHasWrongType
			ifTrue: [ super // a ]
			ifFalse: [ self error: 'LargeInteger //: ', err ]!

nonPrimitiveRem: a <Number> error: err <Symbol> ^<Int>
	"This is invoked on primitive failure"

	^err == #FirstArgumentHasWrongType
			ifTrue: [ super rem: a ]
			ifFalse: [ self error: 'LargeInteger rem: ', err ]! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'restricted-double dispatching' !


addFromInteger: o <Integer> ^<Integer>

	^{{self primitiveIndexedByteLargeIntegerAdd: o asLargeInteger
			ifFail: [ :err <Symbol> | self error: err ]
		}}!

bitAndFromInteger: o <Integer> ^<Integer>

	^{{self primitiveIndexedByteLargeIntegerAnd: o asLargeInteger
					ifFail: [ :err <Symbol> | self error: err ]
		}}!

bitOrFromInteger: o <Integer> ^<Integer>

	^{{self primitiveIndexedByteLargeIntegerOr: o asLargeInteger
					ifFail: [ :err <Symbol> | self error: err ]
		}}!

equalFromInteger: o <Integer> ^<Boolean>

	^0 = {{self primitiveIndexedByteLargeIntegerCompare: o asLargeInteger
		ifFail: [ :err <Symbol> | self error: err ]
	}}!

lessFromInteger: o <Integer> ^<Boolean>

	^0 < {{self primitiveIndexedByteLargeIntegerCompare: o asLargeInteger
		ifFail: [ :err <Symbol> | self error: err ]
	}}!

multiplyFromInteger: o <Integer> ^<Integer>

	^{{self primitiveIndexedByteLargeIntegerMultiply: o asLargeInteger
		ifFail: [ :err <Symbol> | self error: err ]
	}}.
!

remFromInteger: o <Integer> ^<Integer>

	^{{self primitiveIndexedByteLargeIntegerRem: o asLargeInteger
		ifFail: [ :err <Symbol> | self error: err ]
	}}!

subtractFromInteger: o <Integer> ^<Integer>

	^o asLargeInteger subtractLargeInteger: self! !

! (Delta mirrorFor: #LargeInteger) methodsFor: 'restricted-to large integers' !


asLargeInteger ^<LargeInteger>

	^self!

subtractLargeInteger: li <LargeInteger> ^<Integer>

	^{{self primitiveIndexedByteLargeIntegerSubtract: li
		ifFail: [ :err <Symbol> | self error: err ]
	}}! !

