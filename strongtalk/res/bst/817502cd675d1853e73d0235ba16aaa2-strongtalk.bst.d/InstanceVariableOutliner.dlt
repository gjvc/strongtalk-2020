Delta define: #InstanceVariableOutliner as: (
(Class subclassOf: 'DefinitionItemOutliner' instanceVariables: '')) !

(Delta mirrorFor: #InstanceVariableOutliner) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #InstanceVariableOutliner) group: 'outliner'!

(Delta mirrorFor: #InstanceVariableOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #InstanceVariableOutliner) methodsFor: 'accessing' !


locator ^ <ClassVarLocator>

^InstVarLocator ofDefinition: self mirror basicLocator! !

! (Delta mirrorFor: #InstanceVariableOutliner) methodsFor: 'control' !


referencesToInstVar

	self instVarNames size = 1
		ifTrue: [^self referencesToInstVar: (self instVarNames anElement)].
	self launchListDialogWithPainter: Painter default
		title: 'Select instance variable'
		contents: self instVarNames
		multi: false
		action: [:items|
			self referencesToInstVar: (self instVarNames at: items anElement)]!

referencesToInstVar: instVar <Symbol>

	| references |
	references := Smalltalk 
							referencesToInstVarName: instVar
							for: self mixin reflectee.
	self
		launchSelectorListWithPainter: Painter default
		title: 'References to instance variable "', instVar, '"'
		contents: references! !

! (Delta mirrorFor: #InstanceVariableOutliner) methodsFor: 'menus' !


hasMenu ^<Boolean>

	^true!

menuBar ^<Menu>

	^Menu new
		add: (MenuAction new
					name: 'References...';
					action: [ self referencesToInstVar ])
! !

! (Delta mirrorFor: #InstanceVariableOutliner) methodsFor: 'private' !


aspectForUpdate ^ <Symbol>

	^#instanceVariables
!

header ^ <Str>

	^'Instance variables'!

instVarNames

	| names |
	names := OrderedCollection new.
	self mirror instanceVariablesDo: [:var|
		names add: var name].
	^names
		!

mixin

	^self mirror isMixin
		ifTrue: [self mirror]
		ifFalse: [self mirror mixin]!

modelAsCharGlyphs ^ <CharGlyphs>

	| tool <ASTtoRichTextTool[CharGlyph]> pts <Cltn[ParseTree]> |
	self useRichTextForSources
		ifTrue: [
			pts := DeltaParser new
							parseInstVarList: self mirror instanceVariableString 
							within: (DeltaScope within: nil)
							ifError: [ :msg <Str> :pos <Int> | self shouldNotHappen ].
			^pts isEmpty
				ifTrue: [ 		OrderedCollection[CharGlyphs] new ]
				ifFalse: [ 	self richTextForParseTrees: pts ] ]
		ifFalse: [
			^self standardTextForString: self mirror instanceVariableString painter: self codePainter ]

!

storeAndOnSuccess: blk <[]>

	"The right way to do this is to have a #instanceVariables:ifFail: in ClassMirror and MixinDeclMirror
		that will parse and	update accordingly.
		
		In the meantime, we parse an extra time here to check for errors and call #instanceVariables: afterwards.
		This should be changed shortly."
		
	| ivs <Str> eval <Str> constructor <Mirror> |
	self deltaHack.
	ivs := self charGlyphModelAsString: self codeView.
	DeltaParser new 
		parseInstVarList: ivs
		within: (DeltaScope within: nil)
		ifError: [ :msg <Str> :pos <Int> | ^self showParseError: msg at: pos in: self codeView ].
	self mirror instanceVariables: ivs.
	blk value.
! !

! (Delta mirrorFor: #InstanceVariableOutliner) methodsFor: 'typechecking' !


typecheck

self typecheckAction:[self mirror typecheckInstVars]
		title: 'Typechecking ', self mirror name, ' instance variables'.! !

