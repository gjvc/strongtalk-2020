Delta define: #TestSuite as: (
(Class subclassOf: 'NotifyingObject' instanceVariables: 'tests resources name')) !

(Delta mirrorFor: #TestSuite) revision: '$Revision:$'!

(Delta mirrorFor: #TestSuite) group: 'SUnit'!

(Delta mirrorFor: #TestSuite)
comment: 
'This is a Composite of Tests, either TestCases or other TestSuites. The common protocol is #run: aTestResult and the dependencies protocol'!

! (Delta mirrorFor: #TestSuite) classSide methodsFor: 'Creation' !


named: aString

	^self new
		name: aString;
		yourself
			! !

! (Delta mirrorFor: #TestSuite) methodsFor: 'Accessing' !


addTest: aTest
	self tests add: aTest
			!

addTests: aCollection 
	aCollection do: [:eachTest | self addTest: eachTest]
			!

defaultResources
	^self tests 
		inject: Set new
		into: [:coll :testCase | 
			coll
				addAll: testCase resources;
				yourself]
			!

name

	^name
			!

name: aString

	name := aString
			!

resources
	resources isNil ifTrue: [resources := self defaultResources].
	^resources
			!

resources: anObject
	resources := anObject
			!

tests
	tests isNil ifTrue: [tests := OrderedCollection new].
	^tests
			! !

! (Delta mirrorFor: #TestSuite) methodsFor: 'Dependencies' !


addDependentToHierarchy: anObject
	self sunitAddDependent: anObject.
	self tests do: [ :each | each addDependentToHierarchy: anObject]
			!

removeDependentFromHierarchy: anObject
	self sunitRemoveDependent: anObject.
	self tests do: [ :each | each removeDependentFromHierarchy: anObject]
			! !

! (Delta mirrorFor: #TestSuite) methodsFor: 'Running' !


run
	| result |
 	result := TestResult new.
	self resources do: [ :res |
		res isAvailable ifFalse: [^res signalInitializationError]].
	[self run: result] sunitEnsure: [self resources do: [:each | each reset]].
	^result
			!

run: aResult 
	self tests do: [:each | 
		Processor yield.
		each run: aResult.
		self sunitChanged: each with: aResult]
			! !

