Delta define: #Association as: (
Generic forAll: 'K , V ' body: ((Class subclassOf: 'Object' instanceVariables: 'key <K>
value <V>
		') protocols: 'VarAssoc[K,V]')) !

(Delta mirrorFor: #Association) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #Association) group: 'base'!

(Delta mirrorFor: #Association)
comment: 
'Associates an object of type K with an object of type V.

Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.
'!

! (Delta mirrorFor: #Association) classSide methodsFor: 'instance creation' !


key: k <K> value: v <V> ^<Instance>

	^self new key: k value: v! !

! (Delta mirrorFor: #Association) methodsFor: 'accessing' !


at1 ^<K>

	^key!

at1: k <K>

	key := k!

at2 ^<V>

	^value!

at2: v <V>

	value := v!

key ^<K>

	^key!

key: k <K>

	key := k.!

key: k <K> value: v <V>

	key := k.
	value := v.!

value ^<V>

	^value!

value: v <V>

	value := v.! !

! (Delta mirrorFor: #Association) methodsFor: 'comparing' !


= other <Object> ^<Boolean>

	| othera <Assoc[Object,Object]> |
	"%todo: replace Association with Assoc when typecase is fully impl"
	othera := Association[Object,Object] coerce: other else: [ ^false ].
	^self key = othera key and: [ self value = othera value ]!

hash ^<Int>

	^self key hash bitXor: self value hash! !

! (Delta mirrorFor: #Association) methodsFor: 'printing' !


printOn: strm <CharOutputStream>

	self key printOn: strm.
	strm nextPutAll: ' -> '.
	self value printOn: strm.! !

