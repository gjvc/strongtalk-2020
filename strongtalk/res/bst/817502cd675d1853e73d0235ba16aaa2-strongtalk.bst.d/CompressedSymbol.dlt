Delta define: #CompressedSymbol as: (
(Class subclassOf: 'IndexedByteInstanceVariables |> Symbol' instanceVariables: '') abstract) !

(Delta mirrorFor: #CompressedSymbol) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #CompressedSymbol) group: 'base'!

(Delta mirrorFor: #CompressedSymbol)
comment: 
'CompressedSymbols contain only characters whose unicode values are < 256.

%todo: implement all the basic ops faster (<, at:, size, =, etc).  It would be nice to have a primitive that returned a sigma value (-1,0,1) based on the comparison; <,
        equality, & more etc would all be definable using it.

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.3 $
'!

! (Delta mirrorFor: #CompressedSymbol) classSide methodsFor: 'file out' !


fileOutSignature ^<Integer>
    ^71! !

! (Delta mirrorFor: #CompressedSymbol) methodsFor: 'accessing' !


at: i <Int> ^<Character>
  ^{{self primitiveIndexedByteCharacterAt: i ifFail: [ :err | Character value: (self primitiveAt: i) ]}}
!

numberOfArguments ^<SmallInteger>
  ^{{self primitiveSymbolNumberOfArguments}}
!

size ^<SmallInt>

	^self primitiveSize!

unicodeAt: index <Int> ^<Int>

  ^self primitiveAt: index! !

! (Delta mirrorFor: #CompressedSymbol) methodsFor: 'coercing' !


asByteArray

	^ByteArray withAll: (self collect: [:ch| ch asciiValue])! !

! (Delta mirrorFor: #CompressedSymbol) methodsFor: 'comparing' !


compare: other <Str>  ^<Int>

	^{{self primitiveIndexedByteCompare: other
			ifFail: [ :err <Symbol> |
							^super compare: other 	] }}! !

! (Delta mirrorFor: #CompressedSymbol) methodsFor: 'copying' !


copy ^<Instance>
	^self! !

! (Delta mirrorFor: #CompressedSymbol) methodsFor: 'file out' !


fileOutSignature ^<Integer>
    ^103! !

! (Delta mirrorFor: #CompressedSymbol) methodsFor: 'private' !


equalsStr: other <Str> ^<Boolean>

	"We check the size first as an optimization, since #compare: must scan even if the sizes aren't equal"
	^self size == other size
		and:  [	0 == {{self primitiveIndexedByteCompare: other
								ifFail: [ :err <Symbol> |
											^super equalsStr: other	] }}	]! !

