Delta define: #DeltaBlock as: (
(Class subclassOf: 'DeltaExpression' instanceVariables: 'body ')) !

(Delta mirrorFor: #DeltaBlock) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaBlock) group: 'ast'!

(Delta mirrorFor: #DeltaBlock)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaBlock) methodsFor: 'Unclassified' !


apply: aTool <DeltaTool > ^ <Self>
    aTool blockNode: self!

body ^ <DeltaStatementList>
    ^ body!

body: b
    self assert: [b isCodeBodyNode].
    body := b!

isBlockNode ^ <Boolean>
    ^ true!

parameters  ^ <OrdCltn[VarDecl]>
	^ body parameters
	!

scope ^ <DeltaScope>
    ^ body scope!

selector
    ^ nil!

type ^ <ObjectType>
    | tas <VarOrdCltn[ObjectType]>  |

tas := OrderedCollection[ObjectType]  new.
"must add types of parameters"
self parameters do:[:p <VarDecl>  | 
										p isIntroducedByRewriter
											ifFalse:[p type wellFormed. tas add: p type].
										].
tas addLast: self body type.
^DeltaBlockApplicationType new
        apply: (DeltaTypeId new setId: #Fun; scope: DeltaGlobals) to: tas.! !

