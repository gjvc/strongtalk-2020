Delta define: #Planner as: (
(Class subclassOf: 'DeltaBlue' instanceVariables: '') classVariables: 'currentMark') !

(Delta mirrorFor: #Planner) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #Planner) group: 'benchmark'!

(Delta mirrorFor: #Planner)
comment: 
'I embody the DeltaBlue algorithm described in:
	"The DeltaBlue Algorithm: An Incremental Constraint Hierarchy Solver"
	by Bjorn N. Freeman-Benson and John Maloney
See January 1990 Communications of the ACM or University of Washington TR 89-08-06 for further details.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #Planner) classSide methodsFor: 'add/remove' !


incrementalAdd: c
	"Attempt to satisfy the given constraint and, if successful, incrementally update the dataflow graph."
	"Details: If satifying the constraint is successful, it may override a weaker constraint on its output. 
	The algorithm attempts to resatisfy that constraint using some other method. This process is 
	repeated until either a) it reaches a variable that was not previously determined by any constraint 
	or b) it reaches a constraint that is too weak to be satisfied using any of its methods. The variables 
	of constraints that have been processed are marked with a unique mark value so that we know 
	where we've been. This allows the algorithm to avoid getting into an infinite loop even if the 
	constraint graph has an inadvertent cycle."

	| mark overridden |
	mark := self newMark.
	overridden := c satisfy: mark.
	[overridden == nil] whileFalse:
		[overridden := overridden satisfy: mark].!

incrementalRemove: c
	"Entry point for retracting a constraint. Remove the given constraint and incrementally update the 
	dataflow graph."
	"Details: Retracting the given constraint may allow some currently unsatisfiable downstream 
	constraint be satisfied. We thus collect a list of unsatisfied downstream constraints and attempt 
	to satisfy each one in turn. This list is sorted by constraint strength, strongest first, as a heuristic 
	for avoiding unnecessarily adding and then overriding weak constraints."
	"Assume: c is satisfied."

	| out unsatisfied |
	out := c output.
	c markUnsatisfied.
	c removeFromGraph.
	unsatisfied := self removePropagateFrom: out.
	unsatisfied do: [: u | self incrementalAdd: u].! !

! (Delta mirrorFor: #Planner) classSide methodsFor: 'benchmarks' !


chainTest: n
	"Do chain-of-equality-constraints performance tests, printing the results in the Transcript."
	"Planner chainTest: 100"

	| equalsC vars constraints v1 v2 eqC editConstraint plan |
	"This constraint is slower than the special-purpose EqualityConstraint."
	equalsC := Constraint
		names: #(a b)
		methods: #('a := b'   'b := a').

	self report: 'Built chain of ', n printString, ' equality constraints in' times: 1 run:
		[vars := (0 to: n) collect: [: i | Variable new].
		 constraints := OrderedCollection new: n.
		 "thread a chain of equality constraints through the variables"
		 1 to: n do:
			[: i |
			 v1 := (vars at: i).
			 v2 := (vars at: i + 1).
			 eqC := v1 requireEquals: v2 "equalsC copy var: v1 var: v2 strength: #required".
			 constraints add: eqC].
		 vars last strongDefaultStay].

	self report: 'Add constraint (case 1):' times: 1 run:
		[editConstraint := EditConstraint var: (vars first) strength: #preferred].
	self report: 'Make Plan (case 1)' times: 1 run:
		[plan := Planner extractPlanFromConstraints: (Array with: editConstraint)].
	Transcript show: 'Plan length: ', plan size printString, ' constraints'; cr.
	self report: 'Execute Plan (case 1):' times: 20 run:
		[plan execute].
	self report: 'Remove constraint (case 1):' times: 1 run:
		[editConstraint destroyConstraint].
	self report: 'Setting first node: (case 1a):' times: 1 run:
		[(vars first) setValue: 123 strength: #strongPreferred].
	self report: 'Setting last node: (case 1b):' times: 1 run:
		[(vars last) setValue: 321 strength: #strongPreferred].
	Transcript cr.

	self report: 'Add constraint (case 2):' times: 1 run:
		[editConstraint := EditConstraint var: (vars first) strength: #default].
	self report: 'Make Plan (case 2):' times: 1 run:
		[plan := Planner extractPlanFromConstraints: (Array with: editConstraint)].
	Transcript show: 'Plan length: ', plan size printString, ' constraints'; cr.
	self report: 'Execute Plan (case 2):' times: 20 run:
		[plan execute].
	self report: 'Remove constraint (case 2):' times: 1 run:
		[editConstraint destroyConstraint].
	self report: 'Setting first node: (case 2a):' times: 1 run:
		[(vars first) setValue: 1230 strength: #weakDefault].
	self report: 'Setting last node: (case 2b):' times: 1 run:
		[(vars last) setValue: 3210 strength: #weakDefault].
	Transcript cr.

	constraints do: [: c | c release].
	vars do: [: v | v release].
	Transcript cr.!

projectionTest: n
"This test constructs a two sets of variables related to each other by a simple linear transformation (scale and offset). The time is measured to change a variable on either side of the mapping and to change the scale and offset factors. Results are printed in the Transcript."
	"Planner projectionTest: 100"

	| projectionC constraints scale offset src dst |
	"This constraint is slower than the special-purpose ScaleConstraint."
	projectionC := Constraint
		names: #(src scale offset dst)
		methods: #('dst := (src * scale) + offset'   'src := (dst - offset) // scale').
	constraints := OrderedCollection new.

	self report: 'Projection test for ', n printString, ' points (Smalltalk):' times: 1 run:
		[scale := Variable value: 10.
		 offset := Variable value: 1000.
		 1 to: n do:
			[: i |
			 src := Variable value: i.
			 dst := Variable value: i.
			 constraints add: (src defaultStay).
			 constraints add:
				("(projectionC copy)"ScaleConstraint
					var: src var: scale var: offset var: dst
					strength: #required)]].
	self reportChange: 'Changing a data point:'
		var: src newValue: 17.
	self reportChange: 'Changing a projected point:'
		var: dst newValue: 1050.
	self reportChange: 'Changing the scale factor:'
		var: scale newValue: 5.
	self reportChange: 'Changing the offset:'
		var: offset newValue: 2000.

	constraints do: [: c | c release].
	Transcript cr.!

report: string times: count run: aBlock
	"Report the time required to execute the given block."

	| time |
	time := Time millisecondsToRun: [count timesRepeat: aBlock].
	Transcript show: string, ' ', (time // count) printString, ' milliseconds'; cr.!

reportChange: title var: aVariable newValue: newValue

	| editConstraint plan |
	Transcript show: title; cr.
	self report: '  Adding Constraint:' times: 1 run:
		[editConstraint := EditConstraint var: aVariable strength: #preferred].
	self report: '  Making Plan' times: 1 run:
		[plan := Planner extractPlanFromConstraints: (Array with: editConstraint)].
	Transcript show: '  Plan size: ', plan size printString, ' constraints'; cr.
	self report: '  Executing Plan:' times: 10 run:
		[aVariable value: newValue. plan execute].
	self report: '  Removing Constraint:' times: 1 run:
		[editConstraint destroyConstraint].!

ursDBTest: n Count: count 
	"Do chain-of-equality-constraints performance tests, printing the results in 
	the Transcript."
	"Planner ursDBTest: 10 Count: 10"
	"Planner ursDBTest: 10 Count: 100"
	"TimeProfiler profile:[Planner ursDBTest: 100 Count: 100]"
	"AllocationProfiler profile:[Planner ursDBTest: 100 Count: 100]"

	| vars constraints v1 v2 eqC editConstraint plan msecs |
	vars := Array new: n.
	1 to: n do: [:i | vars at: i put: Variable new].
	constraints := OrderedCollection new: n.
	1 to: n - 1 do: 
		[:i | 
		v1 := vars at: i.
		v2 := vars at: i + 1.
		eqC := v1 requireEquals: v2.
		constraints add: eqC].
	vars last defaultStay.
	msecs := Time millisecondsToRun: [count
					timesRepeat: 
						[editConstraint := EditConstraint var: vars first strength: #strongDefault.
						plan := Planner extractPlanFromConstraints: (Array with: editConstraint).
						plan execute.
						editConstraint destroyConstraint]].
	constraints do: [:c | c release].
	vars do: [:v | v release].
	Transcript show: 'Self-style DeltaBlue Benchmark (Smalltalk-80)'; cr.
	"
	Transcript show: '  (chain length: ' , n printString , ', count: ' , count printString , ', total time: ' , msecs printString , ')'; cr; cr
	"
	Transcript show: 'DeltaBlue	' , msecs printString; cr; cr
	
	! !

! (Delta mirrorFor: #Planner) classSide methodsFor: 'class initialization' !


initialize
	"Planner initialize"

	currentMark := 1! !

! (Delta mirrorFor: #Planner) classSide methodsFor: 'planning/value propagation' !


extractPlanFromConstraints: constraints
	"Extract a plan for resatisfaction starting from the outputs of the given constraints, usually a set of input constraints."

	| sources |
	sources := OrderedCollection new.
	constraints do:
		[: c | ((c isInput) and: [c isSatisfied]) ifTrue: [ sources add: c]].
	^self makePlan: sources!

extractPlanFromVariables: variables
	"Extract a plan from the dataflow graph having the given variables. It is assumed that the given set of variables is complete, or at least that it contains all the input variables."

	| sources |
	sources := OrderedCollection new.
	variables do:
		[: v |
		 (v constraints) do:
			[: c | ((c isInput) and: [c isSatisfied]) ifTrue: [sources add: c]]].
	^self makePlan: sources!

makePlan: sources
	"Extract a plan for resatisfaction starting from the given source constraints, usually a set of input constraints. This method assumes that stay optimization is desired; the plan will contain only constraints whose output variables are not stay. Constraints that do no computation, such as stay and edit constraints, are not included in the plan."
	"Details: The outputs of a constraint are marked when it is added to the plan under construction. A constraint may be appended to the plan when all its input variables are known. A variable is known if either a) the variable is marked (indicating that has been computed by a constraint appearing earlier in the plan), b) the variable is 'stay' (i.e. it is a constant at plan execution time), or c) the variable is not determined by any constraint. The last provision is for past states of history variables, which are not stay but which are also not computed by any constraint."
	"Assume: sources are all satisfied."

	| mark plan todo c |
	mark := self newMark.
	plan := Plan new.
	todo := sources.
	[todo isEmpty] whileFalse:
		[c := todo removeFirst.
		 ((c output mark ~= mark) and:		"not in plan already and..."
		  [c inputsKnown: mark]) ifTrue:		"eligible for inclusion"
			[plan addLast: c.
			 c output mark: mark.
			 c := self addConstraintsConsuming: c output to: todo]].
	^plan!

propagateFrom: v
	"The given variable has changed. Propagate new values downstream."

	| todo c |
	todo := OrderedCollection new.
	self addConstraintsConsuming: v to: todo.
	[todo isEmpty] whileFalse:
		[c := todo removeFirst.
		 c execute.
		 self addConstraintsConsuming: c output to: todo].! !

! (Delta mirrorFor: #Planner) classSide methodsFor: 'private' !


addConstraintsConsuming: v to: aCollection

	| determiningC |
	determiningC := v determinedBy.
	v constraints do:
		[: c |
		 ((c == determiningC) or: [c isSatisfied not]) ifFalse:
			[aCollection add: c]].!

addPropagate: c mark: mark
	"Recompute the walkabout strengths and stay flags of all variables downstream of the given constraint and recompute the actual values of all variables whose stay flag is true. If a cycle is detected, remove the given constraint and answer false. Otherwise, answer true."
	"Details: Cycles are detected when a marked variable is encountered downstream of the given constraint. The sender is assumed to have marked the inputs of the given constraint with the given mark. Thus, encountering a marked node downstream of the output constraint means that there is a path from the constraint's output to one of its inputs."

	| todo d |
	todo := OrderedCollection with: c.
	[todo isEmpty] whileFalse:
		[d := todo removeFirst.
		 (d output mark = mark) ifTrue:
			[self incrementalRemove: c.
			 ^false].
		 d recalculate.
		 self addConstraintsConsuming: d output to: todo].
	^true!

constraintsConsuming: v do: aBlock

	| determiningC |
	determiningC := v determinedBy.
	v constraints do:
		[: c |
		 ((c == determiningC) or: [c isSatisfied not]) ifFalse:
			[aBlock value: c]].!

newMark
	"Select a previously unused mark value."
	"Details: We just keep incrementing. If necessary, the counter will turn into a LargePositiveInteger. In that case, it will be a bit slower to compute the next mark but the algorithms will all behave correctly. We reserve the value '0' to mean 'unmarked'. Thus, this generator starts at '1' and will never produce '0' as a mark value."

	^currentMark := currentMark + 1!

removePropagateFrom: out
	"Update the walkabout strengths and stay flags of all variables downstream of the given constraint. Answer a collection of unsatisfied constraints sorted in order of decreasing strength."

	| unsatisfied todo v nextC |
	unsatisfied := SortedCollection sortBlock:
		[: c1 : c2 | c1 strength stronger: c2 strength].
	out determinedBy: nil.
	out walkStrength: Strength absoluteWeakest.
	out stay: true.
	todo := OrderedCollection with: out.
	[todo isEmpty] whileFalse:
		[v := todo removeFirst.
		 v constraints do:
		 	[: c | (c isSatisfied) ifFalse: [unsatisfied add: c]].
		 self constraintsConsuming: v do:
			[: c |
			 c recalculate.
			 todo add: c output]].
	^unsatisfied! !

