Delta define: #DeltaBasicMixinLocator as: (
(Class subclassOf: 'DeltaBasicEntryLocator' instanceVariables: '')) !

(Delta mirrorFor: #DeltaBasicMixinLocator) revision: '$Revision: 1.3 $'!

(Delta mirrorFor: #DeltaBasicMixinLocator) group: 'ast'!

(Delta mirrorFor: #DeltaBasicMixinLocator)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaBasicMixinLocator) methodsFor: 'Unclassified' !


indexFor: node  <DeltaASTNode> ^ <Integer>

| astIndex <Integer> myType <DeltaSide> |

" test the index for all parts of my definition"

astIndex := (SuperclassClauseLocator ofDefinition: self) indexFor: node.
astIndex ~= 0 ifTrue:[^astIndex].

astIndex := (SupportedProtocolLocator ofDefinition: self) indexFor: node.
astIndex ~= 0 ifTrue:[^astIndex].

myType := Type forMixin: (self mirror reflectee).

myType isGeneric ifFalse:[^0].

myType asGeneric formals 
	do:	[: tf <TypeFormal> | 
			astIndex := (TypeArgumentLocator 	onTypeArgument: tf name
																					ofDefinition: self) indexFor: node.
			astIndex ~= 0 ifTrue:[^astIndex].
			].

"InstanceVars"

"ClassVars"
^0.
!

locationOfMethod: sel <Symbol> ifAbsent: blk <[^X def]>  ^ <BasicLocator | X>
	| side superclassType |
	side := self typeInfo.
	(side methods includesKey: sel) ifTrue: [^self].
     (side messages includesKey: sel) ifTrue:[^side basicLocator].
	[true] whileTrue: [
		(superclassType := side superclassType) isNil ifTrue: [^blk value].
		side := superclassType asSide.
		(side methods includesKey: sel) ifTrue: [^side basicLocator].
          (side messages includesKey: sel) ifTrue:[^side basicLocator].
          ].
!

locatorFor: node  <DeltaASTNode> ^ <Locator[Mirror]>

| astIndex <Integer> myType <DeltaSide> loc <Locator[Mirror]>  |

" test the index for all parts of my definition"

astIndex := (loc := SuperclassClauseLocator ofDefinition: self) indexFor: node.
astIndex ~= 0 ifTrue:[^loc astIndex: astIndex].

astIndex := (loc := SupportedProtocolLocator ofDefinition: self) indexFor: node.
astIndex ~= 0 ifTrue:[^loc astIndex: astIndex].

myType := Type forMixin: (self mirror reflectee).

myType isGeneric ifFalse:[^self].

myType asGeneric formals 
	do:	[: tf <TypeFormal> | 
			astIndex := (loc := TypeArgumentLocator 	onTypeArgument: tf name
																					ofDefinition: self) indexFor: node.
			astIndex ~= 0 ifTrue:[^loc astIndex: astIndex].
			].

"InstanceVars"

"ClassVars"

!

methodAt: sel <Symbol> ifAbsent: blk <[^X def]>  ^ <Method | X>
	^self typeInfo methods at: sel 
                                                    ifAbsent: [self typeInfo messages at: sel ifAbsent: blk]!

mirror   ^ <MixinMirror>
	| m <MixinMirror> |
	m := Mirror on: (Delta at: self id).
	self deltaHack.
	(m isKindOf: AbstractClassMirror) ifTrue: [m := m mixin].
	^self isMetaSide
		ifTrue: [m classSide]
		ifFalse: [m]! !

