Delta define: #AlienWeakTable as: (
(Class subclassOf: 'Object' instanceVariables: 'accessProtect <Semaphore>
firstUnusedIndex <Integer>
lastUsedIndex <Integer>
weakArray <WeakArray>
strongArray <Array>
owner <Object>')) !

(Delta mirrorFor: #AlienWeakTable) revision: '$Revision:$'!

(Delta mirrorFor: #AlienWeakTable) group: 'Aliens'!

(Delta mirrorFor: #AlienWeakTable)
comment: 
''!

! (Delta mirrorFor: #AlienWeakTable) classSide methodsFor: 'instance creation' !


newForOwner: owner
	^self new initializeWithOwner: owner! !

! (Delta mirrorFor: #AlienWeakTable) methodsFor: 'adding' !


add: anObject finalizing: postMortemFinalizationTag
	"Register a new object in the table, with the associated tag.
	 The object is held onto weakly, the tag--strongly. The tag
	 will be passed to the owner as the argument of #finalize:
	 some time after the object is garbage collected."

	| size start delta |
	accessProtect critical:
		[size := strongArray size.
		 start := firstUnusedIndex].
	start to: size do:
		[:i|
		(strongArray at: i) == nil ifTrue:
			[accessProtect critical:
				[weakArray at: i put: anObject.
				 strongArray at: i put: postMortemFinalizationTag.
				 firstUnusedIndex := i + 1.
				 i > lastUsedIndex ifTrue: [lastUsedIndex := i]].
			 ^anObject]].
	delta := size min: 4096.
	accessProtect critical:
		[(weakArray := weakArray copyGrownBy: delta)
			 at: size + 1 put: anObject.
		 (strongArray := strongArray  copyGrownBy: delta)
			at: size put: postMortemFinalizationTag.
		 firstUnusedIndex := size + 1.
		 lastUsedIndex := size].
	^anObject! !

! (Delta mirrorFor: #AlienWeakTable) methodsFor: 'initialization' !


initializeWithOwner: anOwner

	accessProtect := Semaphore forMutualExclusion.
	firstUnusedIndex := 1.
	lastUsedIndex := 0.
	weakArray := WeakArray new: 1024.
	strongArray := Array new: 1024.
	owner := anOwner.
	weakArray addWeakDependent: (BlockDependent
															updateBlock: [:aspect :object | self finalizeValues])! !

