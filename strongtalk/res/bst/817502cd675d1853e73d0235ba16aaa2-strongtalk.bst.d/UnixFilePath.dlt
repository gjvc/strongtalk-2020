Delta define: #UnixFilePath as: (
(Class subclassOf: 'FilePath mixin |>(ExternalStreamableObject mixin |>(ExternalObject mixin |>UnixFilePattern))' instanceVariables: '')) !

(Delta mirrorFor: #UnixFilePath) revision: '$Revision: 1.4 $'!

(Delta mirrorFor: #UnixFilePath) group: 'base'!

(Delta mirrorFor: #UnixFilePath)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #UnixFilePath) classSide methodsFor: 'instance creation' !


currentDirectory ^<FilePath>

    | buf <CString> buflen <Int> getcwd <Alien> |
    buflen := 1000.
    buf := Alien newC: buflen.
    getcwd := Alien lookup: 'getcwd' inLibrary: self libcName.
    ^[|result|
    	getcwd
    		primFFICallResult: (result := Alien new: 4)
    		with: buf pointer
    		with: buflen.
    	result asUnsignedLong = 0
    		ifTrue: [self error: 'Unable to get current directory']
            ifFalse: [self for: buf strcpy ]
      ] ensure: [ buf free ]!

currentDirectory: file <FilePath>

    	| result <Alien> name <Alien> chdir <Alien> |
    	chdir := Alien lookup: 'chdir' inLibrary: self libcName.
    	result := Alien new: 4.
    	name := file name asString asAlien.
    	[chdir
    		primFFICallResult: result
    		with: name pointer.
    	result asSignedLong = 0 ifFalse: [self error: 'Unable to cd to directory ', file name]]
    		ensure: [name free]
	!

libcName

	^'libc.so.6'! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'accessing' !


type ^<Str>
    "The file type (on most platforms this is the part after the $. at the end)"

    | indices <SeqCltn[Int]> |
    indices := self name indicesOfSubCollection: '.'.
    indices isEmpty
        ifTrue: [ ^'' ].
    ^self name
            copyFrom: indices last + 1
            to: self name size! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'control' !


createDirectoryIfFail: fail <[Symbol]>

    | name <CString> |
    name := CString for: self name.

    [{{<libc ExternalProxy mkdir>
            name: name
            mode: 8r777
        }} asSmallInteger == -1
            ifTrue: [  fail value: #CannotCreateFile ]
    ] ensure: [ name free ]! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'copying-moving' !


copyAs: newPath <FilePath> ifFail: fail <[ExternalError]>

    | source target	|
	source := self readStream.
	target := newPath writeStream.
	[[source atEnd]	 whileFalse: [
		target nextPut: source next]]
			ensure: [source close.
							target close]!

moveAs: newPath <FilePath> ifFail: fail <[ExternalError]>

    | csrc <CString> cdest <CString> |
    csrc := CString for: self name.
    cdest := CString for: newPath name.
    [   {{<libc ExternalProxy rename>
                source: csrc
                dest: cdest
        }} isAllOnes
            ifTrue: [ fail value: 'Error moving file.' asSymbol ]
    ] ensure:
        [   csrc free.
            cdest free  ]! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'private' !


O_CREAT

	^8r100!

O_RDONLY

	^0!

O_RDWR

	^2!

O_TRUNC

	^8r1000!

O_WRONLY

	^1!

S_IFDIR

	^8r40000!

S_IRGRP

	^8r400!

S_IROTH

	^8r40!

S_IRUSR

	^8r4000!

S_IWGRP

	^8r200!

S_IWOTH

	^8r20!

S_IWUSR

	^8r2000!

S_IXGRP

	^8r100!

S_IXOTH

	^8r10!

S_IXUSR

	^8r1000!

StatBuffer

    ^StatBuffer!

W_OK

	^2!

access: mode ifFail: block

	| name result |
	name := CString for: self name.
	[result := {{<libc ExternalProxy access>
						name: name
						mode: mode}}.
	^result isAllOnes not]
		ensure: [name free]!

createValueFor: mode <Symbol>  ^<ExternalData>

    mode = #read
        ifTrue: [ ^3        "OPEN_EXISTING" ].
    mode = #write
        ifTrue: [ ^2        "CREATE_ALWAYS" ].
    mode = #readWrite
        ifTrue: [ ^4        "OPEN_ALWAYS" ].
    self shouldNotHappen!

deleteDirectoryIfFail: blk <[Symbol]>

    | name <CString> |
    name := CString for: self name.
    [ {{<libc ExternalProxy rmdir>
             name: name
        }} asSmallInteger == -1
            ifTrue: [ blk value: #ErrorDeletingDirectory ]
    ] ensure: [ name free ]!

deleteFileIfFail: blk <[Symbol]>

    | name <CString> |
    name := CString for: self name.
    [   {{<libc ExternalProxy unlink>
                name: name
        }} asSmallInteger == -1
            ifTrue: [ blk value: #ErrorDeletingFile ]
    ] ensure: [ name free ]!

fileAttributesFor: mode <Symbol>  ^<ExternalData>
    
    mode = #read
        ifTrue: [ ^ExternalProxy new
                    setHigh:    16r0800        "FILE_FLAG_SEQUENTIAL_SCAN"
                    low:            16r80        "FILE_ATTRIBUTE_NORMAL"    ].
    (mode = #write)
        ifTrue: [ ^ExternalProxy new
                    setHigh:    16r0000
                    low:            16r80        "FILE_ATTRIBUTE_NORMAL"    ].
    (mode = #readWrite)
        ifTrue: [ ^ExternalProxy new
                    setHigh:    16r0000    
                    low:            16r80        "FILE_ATTRIBUTE_NORMAL"    ].
    self shouldNotHappen.!

fileDescriptorClass ^<FileDescriptor class>
"%TODO delegate to Platform"
    ^UnixFileDescriptor!

getegid

	^{{<libc ExternalProxy getegid> call}} asSmallInteger!

geteuid

	^{{<libc ExternalProxy geteuid> call}} asSmallInteger!

modeFor: mode <Symbol> ^<SmallInt>

    mode = #read
        ifTrue: [ ^self O_RDONLY ].
    mode = #write
        ifTrue: [ ^(self O_RDWR bitOr: self O_CREAT) bitOr: self O_TRUNC ].
    mode = #readWrite
        ifTrue: [ ^self O_RDWR bitOr: self O_CREAT ].
    self error: 'Unrecognised mode: ' , mode!

modeProxyFor: mode <Symbol> ^<SmallInt>

    mode = #read
        ifTrue: [ ^0 ].
    mode = #write
        ifTrue: [ ^1 ].
    mode = #readWrite
        ifTrue: [ ^2 ]!

open: dname <ExternalProxy> mode: dmode <SmallInt> ^ <ExternalProxy>

   ^{{<libc ExternalProxy open>
    		name: dname
    		flags: dmode
    		permissions: 8r777 }}!

sharingValueFor: mode <Symbol> ^<ExternalData>

    mode = #read
        ifTrue: [ ^1    "FILE_SHARE_WRITE" ].
    "in all other cases"
    ^0 "no sharing"!

stat: testBlock ifFail: failBlock

    | statBuffer <StatBuffer> 
    	status <ExternalProxy>
    	name <CString> |
    statBuffer := self StatBuffer new.
    statBuffer allocate.
    name := CString for: self name.
    [ status := self statName: name
            			buffer: statBuffer.
	status asSmallInteger == -1
		ifTrue: [ failBlock value ]
		ifFalse: [ ^testBlock value: statBuffer ]]
		ensure: [ statBuffer free.
						name free]!

statFailed

	| errno|
	errno := self lastError.
	self error: 'could not stat file: ', errno printString!

statName: name buffer: statBuffer

    ^{{<libc ExternalProxy __xstat>
   				version: statBuffer version
       			name: name
       			buffer: statBuffer}}! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'restricted' !


openInternalFor: mode <Symbol> ifFail: err <[ExternalError, ^X def]>  ^<ExternalProxy | X>

    |   dname <ExternalProxy>
        dmode <SmallInt>
        proxy <ExternalProxy> |
    dname := self nameProxy.

    [ dmode := self modeFor: mode.
    	proxy := self open: dname
    						mode: dmode]
    		ensure: [ dname free ].

    ^proxy isAllOnes
        ifFalse: [ proxy ]
        ifTrue: [ err value: #cannotOpenFile ]! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'restricted-double dispatching' !


deletePathIfFail: blk <[Symbol]>

    self exists
        ifFalse: [  blk value: #NoSuchFileOrDirectory.
                        ^self       ].
    self isDirectory
        ifTrue: [ self deleteDirectoryIfFail: blk ]
        ifFalse: [ self deleteFileIfFail: blk ]! !

! (Delta mirrorFor: #UnixFilePath) methodsFor: 'testing' !


exists ^<Boolean>
	| name result |
	name := self nameProxy.
    [result := {{<libc ExternalProxy open>
   	 					name: name
    					flags: 0
    					ignored: 0}}.
    result asInteger > 0
    	ifTrue: [{{<libc ExternalProxy close>
   							fd: result}}]]
     	ensure: [ name free ].
    ^result isAllOnes not!

isDirectory ^<Boolean>

    ^self stat: [:stat| (stat mode bitAnd: self S_IFDIR) == self S_IFDIR]
    	ifFail: [ self statFailed ]!

isReadOnly ^<Boolean>

    ^self isWriteable not!

isSyntaxValid ^<Boolean>

    "Extend inherited version to ensure no wildcard characters"
    ^super isSyntaxValid and: [ self unimplemented ]!

isWriteable

    "^self stat: [:stat| 
    				(stat uid == self geteuid and: [(stat mode bitAnd: self S_IWUSR) == self S_IWUSR])
    					or: [(stat gid == self getegid and: [(stat mode bitAnd: self S_IWGRP) == self S_IWGRP])
    					or: [(stat mode bitAnd: self S_IWOTH) == self S_IWOTH]]]
    	ifFail: [ self statFailed ]"
    ^self access: self W_OK ifFail: []! !

