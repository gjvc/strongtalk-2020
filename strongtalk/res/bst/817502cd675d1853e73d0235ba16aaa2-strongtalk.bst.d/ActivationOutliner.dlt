Delta define: #ActivationOutliner as: (
(Class subclassOf: 'CommonProgEnvOutliner' instanceVariables: 'activation <Activation>
debugger <StackTraceInspector>')) !

(Delta mirrorFor: #ActivationOutliner) revision: '$Revision: 1.1 $'!

(Delta mirrorFor: #ActivationOutliner) group: 'Unclassified'!

(Delta mirrorFor: #ActivationOutliner)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #ActivationOutliner) classSide methodsFor: 'instance creation' !


on: a <Activation> ^ <Instance>

	^self new initActivation: a!

on: a <Activation> debugger: debugger<StackTraceInspector> ^ <Instance>

	^self new initActivation: a debugger: debugger! !

! (Delta mirrorFor: #ActivationOutliner) methodsFor: 'accessing' !


activation ^ <Activation>

	^activation! !

! (Delta mirrorFor: #ActivationOutliner) methodsFor: 'private' !


activationVariableView: variable <Object> ^<Visual>

	^self
		activationVariableView: (self safePrintString: variable)
		value: variable!

activationVariableView: label <Str> value: variable <Object> ^<Visual>

	^self
		buildLabel: label
		painter: self codePainter
		action: [ (Inspector on: variable) launch ]!

buildActions ^ <Visual>

	| row <Row[Visual]> |

	row := Row[Button] new.
	row add: (self buttonLabeled: 'Step into'
						action: [:b <Button> | debugger singleStep: self activation]).
	row add: (self buttonLabeled: 'Step over'
						action: [:b <Button> | debugger stepNext: self activation]).
	row add: (self buttonLabeled: 'Step out'
						action: [:b <Button> | debugger stepReturn: self activation]).
	row add: Glue xStretchy.
	^row!

buildBody ^<Visual>

	| col <Column[Visual]> row <Row[Visual]> |

	col := Column[Visual] new.
	row := Row[Visual] new.
	row add: self buildCodeView;
		add: self buildTemporariesView.
	col add: self buildActions;
		add: row.
	^col
!

buildClosedHeader ^ <Visual>

	| selector <Symbol> args <Array[Object]> row <Row[Visual]> |
	
	"Check type of activation"
	self activation isSmalltalk
		ifFalse: [	^(StringGlyph for: 'External activation' painter: self codePainter) asVisual ].

	selector := self activation method enclosingMethod selector.
	args := self activation arguments.
	row := Row[Visual] new.
	
	self activation method isBlockMethod
		ifTrue: [		"Add block parens interspersed with arguments"
							row add: (StringGlyph for: '[' painter: self codePainter) asVisual.
							args do: [ :arg <Object> |
								row add: (StringGlyph for: ':' painter: self selectorPainter) asVisual.
								row add: (self activationVariableView: arg)].
							row add: (StringGlyph for: '] in ' painter: self codePainter) asVisual.
							row add: (StringGlyph for: selector painter: self selectorPainter) asVisual ]
		ifFalse: [	"Add receiver"
							| receiver <Object> |
							receiver := self activation receiver.
							row add: (self activationVariableView: receiver).
							row add: (StringGlyph for: '>> ' painter: self codePainter) asVisual.
							"Add selector interspersed with arguments"
							args size = 0
								ifTrue: [		row add: (StringGlyph for: selector painter: self selectorPainter) asVisual ]
								ifFalse: [	| strm <CharacterReadStream> |
													strm := selector readStream.
													args do: [ :arg <Object> |
														row add: (StringGlyph for: (strm upTo: $:), ':' painter: self selectorPainter) asVisual.
														row add: (self activationVariableView: arg) ]
												]
						].
	^row!

buildCodeView ^<Visual>

	| cv <CodeView> vmSrc <Str> strm <CharacterReadStream> gls <OrdCltn[CharacterGlyph]> |

	"Construct vm source with highligthed bci"
	vmSrc := self activation vmPrettyPrint.
	strm := vmSrc readStream.
	gls := OrderedCollection[CharacterGlyph] new: vmSrc size.
	(vmSrc occurrencesOf: self currentByteCodeSeparatorCharacter) = 2
		ifTrue: [	gls addAll: (self standardTextForString: (strm upTo: self currentByteCodeSeparatorCharacter) painter: self codePainter).
						gls addAll: (self standardTextForString: (strm upTo: self currentByteCodeSeparatorCharacter) painter: self codeBCIPainter) ].
	gls addAll: (self standardTextForString: strm contentsRemaining painter: self codePainter).
	
	cv := CodeView forText.
	cv doneBlock: [ :b <Boolean> :onSuccess <[]> | b ifTrue: onSuccess ].	"Dummy for now, we are not showing the real source code"
	cv model: gls.
	^self editorBorderFor: cv
!

buildExternalHeader ^ <Visual>

	^(StringGlyph for: 'External activation' painter: self codePainter) asVisual!

buildTemporariesView ^ <Visual>

	| column <Column[Visual]> |
	column := Column[Visual] new.
	self activation temporaries
		do: [:temp| column add: (self activationVariableView: temp key
														value: temp value)].
	^column
!

buttonLabeled: string action: block
	^(Button
			labeled: string
			action: block)
			stretchy: false;
			yourself!

currentByteCodeSeparatorCharacter ^ <Character>

	^Character value: 16r1B
!

hasSelector ^<Boolean>

	^self isMethodActivation!

initialPacifiedState ^ <Boolean>

	^self activation isSmalltalk not!

isBlockActivation ^<Boolean>

	^self activation isSmalltalk and: [self activation method isBlockMethod]!

isExternal ^ <Boolean>

	^self activation isSmalltalk not!

isMethodActivation ^<Boolean>

	^self activation isSmalltalk and: [self activation method isBlockMethod not]!

method

	^self mirror isNil
		ifTrue: [nil]
		ifFalse: [self mirror compiledMethodAt: self selector]!

methodSource ^<Str>

	^(self hasSelector and: [self mirror notNil])
		ifTrue: [self mirror sourceForSelector: self selector]
		ifFalse: [self vmMethodSource]!

mirror

	|mirror|
	mirror := Mirror on: self activation receiver class.
	[mirror isNil]
		whileFalse: [(mirror hasSelector: self selector) ifTrue: [^mirror].
							mirror := mirror superclass].
	^nil!

safePrintString: aValue

	^[aValue printString]
		on: Error
		do: [:ex|'??instance of ', (Reflection classOf: aValue) name]!

selector ^<Symbol>

	^self activation method selector!

sourceAsCharGlyphs ^<CharGlyphs>

	| vmSrc <Str> strm <CharacterReadStream> gls <OrdCltn[CharacterGlyph]> |

	"Construct vm source with highligthed bci"
	vmSrc := self methodSource.
	strm := vmSrc readStream.
	gls := OrderedCollection[CharacterGlyph] new: vmSrc size.
	(vmSrc occurrencesOf: self currentByteCodeSeparatorCharacter) = 2
		ifTrue: [	gls addAll: (self standardTextForString: (strm upTo: self currentByteCodeSeparatorCharacter) painter: self codePainter).
						gls addAll: (self standardTextForString: (strm upTo: self currentByteCodeSeparatorCharacter) painter: self codeBCIPainter) ].
	gls addAll: (self standardTextForString: strm contentsRemaining painter: self codePainter).
	^gls
!

vmMethodSource ^<Str>

	^self activation vmPrettyPrint! !

! (Delta mirrorFor: #ActivationOutliner) methodsFor: 'private-initialization' !


initActivation: a <Activation>

	activation := a!

initActivation: a <Activation> debugger: d <StackTraceInspector>

	activation := a.
	debugger := d! !

