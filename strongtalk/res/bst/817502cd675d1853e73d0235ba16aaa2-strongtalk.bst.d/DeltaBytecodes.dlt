Delta define: #DeltaBytecodes as: (
(Class subclassOf: 'Object' instanceVariables: '')) !

(Delta mirrorFor: #DeltaBytecodes) revision: '$Revision: 1.2 $'!

(Delta mirrorFor: #DeltaBytecodes) group: 'ast'!

(Delta mirrorFor: #DeltaBytecodes)
comment: 
'(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.'!

! (Delta mirrorFor: #DeltaBytecodes) classSide methodsFor: 'Unclassified' !


access_send_0
	^ 16rC8 !

access_send_self
	^ 16rB8 !

allocate_temp_1
	^ 16r0C !

allocate_temp_2
	^ 16r0D !

allocate_temp_3
	^ 16r0E !

allocate_temp_n
	^ 16r0F !

and_byte
	^ 16r72 !

and_word
	^ 16r7A !

compiled_send_0
	^ 16rA0 !

compiled_send_0_pop
	^ 16rA4 !

compiled_send_1
	^ 16rA1 !

compiled_send_1_pop
	^ 16rA5 !

compiled_send_2
	^ 16rA2 !

compiled_send_2_pop
	^ 16rA6 !

compiled_send_n
	^ 16rA3 !

compiled_send_n_pop
	^ 16rA7 !

compiled_send_self
	^ 16rA8 !

compiled_send_self_pop
	^ 16rA9 !

compiled_send_super
	^ 16rAA !

compiled_send_super_pop
	^ 16rAB !

copy_1_into_context
	^ 16r69 !

copy_2_into_context
	^ 16r6A !

copy_n_into_context
	^ 16r6B !

copy_self_1_into_context
	^ 16r6D !

copy_self_2_into_context
	^ 16r6E !

copy_self_into_context
	^ 16r6C !

copy_self_n_into_context
	^ 16r6F !

dll_call
	^ 16rB4 !

dll_call_lookup
	^ 16rC4 !

double_equal
	^ 16rEE !

double_tilde
	^ 16rEF !

halt
	^ 16rFF !

ifFalse_byte
	^ 16r71 !

ifFalse_word
	^ 16r79 !

ifTrue_byte
	^ 16r70 !

ifTrue_word
	^ 16r78 !

install_new_context_block_1
	^ 16r5D !

install_new_context_block_2
	^ 16r5E !

install_new_context_block_n
	^ 16r5F !

install_new_context_method_0
	^ 16r4C !

install_new_context_method_1
	^ 16r4D !

install_new_context_method_2
	^ 16r4E !

install_new_context_method_n
	^ 16r4F !

interpreted_send_0
	^ 16r80 !

interpreted_send_0_pop
	^ 16r84 !

interpreted_send_1
	^ 16r81 !

interpreted_send_1_pop
	^ 16r85 !

interpreted_send_2
	^ 16r82 !

interpreted_send_2_pop
	^ 16r86 !

interpreted_send_n
	^ 16r83 !

interpreted_send_n_pop
	^ 16r87 !

interpreted_send_self
	^ 16r88 !

interpreted_send_self_pop
	^ 16r89 !

interpreted_send_super
	^ 16r8A !

interpreted_send_super_pop
	^ 16r8B !

jump_else_byte
	^ 16r76 !

jump_else_word
	^ 16r7E !

jump_loop_byte
	^ 16r77 !

jump_loop_word
	^ 16r7F !

megamorphic_send_0
	^ 16rD0 !

megamorphic_send_0_pop
	^ 16rD4 !

megamorphic_send_1
	^ 16rD1 !

megamorphic_send_1_pop
	^ 16rD5 !

megamorphic_send_2
	^ 16rD2 !

megamorphic_send_2_pop
	^ 16rD6 !

megamorphic_send_n
	^ 16rD3 !

megamorphic_send_n_pop
	^ 16rD7 !

megamorphic_send_self
	^ 16rD8 !

megamorphic_send_self_pop
	^ 16rD9 !

megamorphic_send_super
	^ 16rDA !

megamorphic_send_super_pop
	^ 16rDB !

non_local_return_self_pop_n
	^ 16rAF !

non_local_return_tos_pop_n
	^ 16rAE !

objArray_at
	^ 16rEC !

objArray_at_put
	^ 16rED !

only_pop
	^ 16r5C !

or_byte
	^ 16r73 !

or_word
	^ 16r7B !

polymorphic_send_0
	^ 16r90 !

polymorphic_send_0_pop
	^ 16r94 !

polymorphic_send_1
	^ 16r91 !

polymorphic_send_1_pop
	^ 16r95 !

polymorphic_send_2
	^ 16r92 !

polymorphic_send_2_pop
	^ 16r96 !

polymorphic_send_n
	^ 16r93 !

polymorphic_send_n_pop
	^ 16r97 !

polymorphic_send_self
	^ 16r98 !

polymorphic_send_self_pop
	^ 16r99 !

polymorphic_send_super
	^ 16r9A !

polymorphic_send_super_pop
	^ 16r9B !

predict_prim_call
	^ 16rB1 !

predict_prim_call_failure
	^ 16rB3 !

predict_prim_call_failure_lookup
	^ 16rC3 !

predict_prim_call_lookup
	^ 16rC1 !

prim_call
	^ 16rB0 !

prim_call_failure
	^ 16rB2 !

prim_call_failure_lookup
	^ 16rC2 !

prim_call_lookup
	^ 16rC0 !

primitive_send_0
	^ 16rB9 !

primitive_send_0_pop
	^ 16rC9 !

primitive_send_1
	^ 16rBD !

primitive_send_1_pop
	^ 16rCD !

primitive_send_2
	^ 16rBE !

primitive_send_2_pop
	^ 16rCE !

primitive_send_n
	^ 16rBF !

primitive_send_n_pop
	^ 16rCF !

primitive_send_self
	^ 16rCA !

primitive_send_self_pop
	^ 16rCB !

primitive_send_super
	^ 16rBA !

primitive_send_super_pop
	^ 16rBB !

push_arg_1
	^ 16r08 !

push_arg_2
	^ 16r09 !

push_arg_3
	^ 16r0A !

push_arg_n
	^ 16r0B !

push_classVar
	^ 16rF3 !

push_false
	^ 16r1F !

push_global
	^ 16rF0 !

push_instVar
	^ 16r3D !

push_literal
	^ 16r1A !

push_neg_n
	^ 16r18 !

push_new_closure_context_0
	^ 16r48 !

push_new_closure_context_1
	^ 16r49 !

push_new_closure_context_2
	^ 16r4A !

push_new_closure_context_n
	^ 16r4B !

push_new_closure_tos_0
	^ 16r58 !

push_new_closure_tos_1
	^ 16r59 !

push_new_closure_tos_2
	^ 16r5A !

push_new_closure_tos_n
	^ 16r5B !

push_nil
	^ 16r1D !

push_self
	^ 16r1C !

push_succ_n
	^ 16r19 !

push_temp_0
	^ 16r00 !

push_temp_0_context_0
	^ 16r40 !

push_temp_0_context_0_pop
	^ 16r44 !

push_temp_0_context_1
	^ 16r50 !

push_temp_0_context_1_pop
	^ 16r54 !

push_temp_0_context_n
	^ 16r60 !

push_temp_0_context_n_pop
	^ 16r64 !

push_temp_1
	^ 16r01 !

push_temp_1_context_0
	^ 16r41 !

push_temp_1_context_0_pop
	^ 16r45 !

push_temp_1_context_1
	^ 16r51 !

push_temp_1_context_1_pop
	^ 16r55 !

push_temp_1_context_n
	^ 16r61 !

push_temp_1_context_n_pop
	^ 16r65 !

push_temp_2
	^ 16r02 !

push_temp_2_context_0
	^ 16r42 !

push_temp_2_context_0_pop
	^ 16r46 !

push_temp_2_context_1
	^ 16r52 !

push_temp_2_context_1_pop
	^ 16r56 !

push_temp_2_context_n
	^ 16r62 !

push_temp_2_context_n_pop
	^ 16r66 !

push_temp_3
	^ 16r03 !

push_temp_4
	^ 16r04 !

push_temp_5
	^ 16r05 !

push_temp_n
	^ 16r07 !

push_temp_n_context_0
	^ 16r43 !

push_temp_n_context_0_pop
	^ 16r47 !

push_temp_n_context_1
	^ 16r53 !

push_temp_n_context_1_pop
	^ 16r57 !

push_temp_n_context_n
	^ 16r63 !

push_temp_n_context_n_pop
	^ 16r67 !

push_tos
	^ 16r1B !

push_true
	^ 16r1E !

return_instVar
	^ 16r28 !

return_self_pop_0
	^ 16r9C !

return_self_pop_1
	^ 16r9D !

return_self_pop_2
	^ 16r9E !

return_self_pop_n
	^ 16r9F !

return_self_zap_pop_n
	^ 16rAD !

return_tos_pop_0
	^ 16r8C !

return_tos_pop_1
	^ 16r8D !

return_tos_pop_2
	^ 16r8E !

return_tos_pop_n
	^ 16r8F !

return_tos_zap_pop_n
	^ 16rAC !

set_self_via_context
	^ 16r68 !

smi_add
	^ 16rE0 !

smi_create_point
	^ 16rE5 !

smi_div
	^ 16rE3 !

smi_equal
	^ 16rE6 !

smi_greater
	^ 16rEA !

smi_greater_equal
	^ 16rEB !

smi_less
	^ 16rE8 !

smi_less_equal
	^ 16rE9 !

smi_mod
	^ 16rE4 !

smi_mult
	^ 16rE2 !

smi_not_equal
	^ 16rE7 !

smi_sub
	^ 16rE1 !

store_classVar
	^ 16rF5 !

store_classVar_pop
	^ 16rF4 !

store_global
	^ 16rF2 !

store_global_pop
	^ 16rF1 !

store_instVar
	^ 16r3F !

store_instVar_pop
	^ 16r3E !

store_inst_n
	^ 16r06 !

store_temp_0_pop
	^ 16r10 !

store_temp_1_pop
	^ 16r11 !

store_temp_2_pop
	^ 16r12 !

store_temp_3_pop
	^ 16r13 !

store_temp_4_pop
	^ 16r14 !

store_temp_5_pop
	^ 16r15 !

store_temp_n
	^ 16r16 !

store_temp_n_pop
	^ 16r17 !

whileFalse_byte
	^ 16r75 !

whileFalse_word
	^ 16r7D !

whileTrue_byte
	^ 16r74 !

whileTrue_word
	^ 16r7C ! !

