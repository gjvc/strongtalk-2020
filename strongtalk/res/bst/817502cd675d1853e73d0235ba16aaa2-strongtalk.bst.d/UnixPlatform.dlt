Delta define: #UnixPlatform as: (
(Class subclassOf: 'Object' instanceVariables: '') classVariables: 'ErrorStream <CharOutputStream>') !

(Delta mirrorFor: #UnixPlatform) revision: '$Revision: 1.4 $'!

(Delta mirrorFor: #UnixPlatform) group: 'base'!

(Delta mirrorFor: #UnixPlatform)
comment: 
'The class side holds platform dependent constants and utilities.  Is also used
to get command line args, and other things like that.

Keywords: %machdep  %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.   $Revision: 1.4 $
'!

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'Dynamic Linked Libraries' !


DLLInitialize
    DLLDict := Dictionary new.
    {{primitiveDLLSetupLookup: self selector: #DLLLookup:in: ifFail: [:err | self error: err]}}!

DLLLibrary: name
    ^DLLDict at: name ifAbsent: [
        DLLDict at: name put: (self DLLLoad: name)
    ]!

DLLLoad2: name

	|block|
	block := [:lib| ^lib].
    self tryDLLLoad: name ifSuccess: block.
    self tryDLLLoad: (name, '.so') asSymbol ifSuccess: block.
    self tryDLLLoad: (name, '.so.6') asSymbol ifSuccess: block.
    self error: 'Cannot find library ', name!

DLLLoad: name
    | r n |
    r := ExternalProxy new.
    n := (self DLLMapName: name) asSymbol.
    ^{{primitiveDLLLoad: n result: r ifFail: [ :err | self error: err]}}!

DLLLookup: name <Str> in: library <Str>
    "Convert library into proxy"
    | p r |
    p := self DLLLibrary: library.
    r := ExternalProxy new.
    {{primitiveDLLLookup: name asSymbol in: p result: r ifFail: [:err | self error: err]}}.
    ^r!

DLLMapName: name <Str> ^<Str>
	name indexOfSubCollection: '.so'
			startingAt: 1
			ifAbsent: [name = 'libc' ifTrue: [^'libc.so.6'].
    						^name, '.so'].
    ^name    !

tryDLLLoad: name <Str> ifFail: block <[X]> ^ <ExternalProxy>

	| r |
    r := ExternalProxy new.
    ^{{primitiveDLLLoad: name
    		result: r 
    		ifFail: [:err | block value: err]}}!

tryDLLLoad: name <Str> ifSuccess: block <[X]>

	| r |
    r := self tryDLLLoad: name ifFail: [:err| ^self].
    block value: r! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'clipboard access' !


clipboardText: str <Str>

    self openClipboard.
    [   | glob <HGLOBAL> strm <ReadWriteStream[Character]> xstr <Str> |
        self emptyClipboard.

        "transform string into a form with lfs inserted"
        strm := (String new: str size) readWriteStream.
        str do:
            [ :c <Character> |
                strm put: c.
                c = Character cr
                    ifTrue: [ strm put: Character lf ].
            ].
        xstr := String withAll: strm contentsWritten.

        glob := HGLOBAL new
                        allocate: xstr size + 1
                        attributes: (Win32 GMEM_MOVEABLE
                                            externalBitOr: Win32 GMEM_DDESHARE).
        glob withPointer: CString new
                do: [ :cs <CString> |
                            cs value: xstr   ].

        {{<user ExternalProxy SetClipboardData>
                format: Win32 CF_TEXT
                data: glob
        }} isNull
            ifTrue: [ Win32 handleError ].
    ] ensure:
        [ self closeClipboard ]!

clipboardTextIfAbsent: blk <[^X def]> ^<Str | X>

    self openClipboard.
    [   | glob <HGLOBAL> strm <CharWriteStream> |

        {{<user ExternalProxy IsClipboardFormatAvailable> format: Win32 CF_TEXT}} asBoolean
            ifFalse: [ ^blk value ].
        glob := {{<user HGLOBAL GetClipboardData> format: Win32 CF_TEXT}}.
        glob isNull
            ifTrue: [ Win32 handleError ].
        strm := (String new: 100) writeStream.
        glob withPointer: CString new
                do: [ :cs <CString> |
                            cs asString do:
                                [ :c <Character> |
                                    c = Character lf
                                        ifFalse: [ strm put: c ]
                                ].
                            ^strm contentsWritten
                      ].
    ] ensure:
        [ self closeClipboard ]! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'command line' !


commandLine ^<Str>
   ^self getCommandLine!

commandLineTokens ^<InputStream[Str]>
    "a stream of the input line tokens.  Tokens are sequences separated by whitespace; whitespace can be 
        included in a token by double quoting the arg.  (quotes can be imbedded by doubling, as with Smalltalk strings;
        the returned token has delimiting quotes removed and internal quotes undoubled. "

    | cstrm <CharInputStream> |
    cstrm := self commandLine readStream.
    self skipSpacesIn: cstrm.
    ^CustomInputStream[Str] new
            nextBlock: [    self parseArgFrom: cstrm ];
            atEndBlock: [ cstrm atEnd ].!

getArguments ^<OrdCltn[Str]>

    ^ {{ primitiveCommandLineArgs }} asOrderedCollection
    	collect: [:bytes| bytes asString]!

getCommandLine
    | stream |
    stream := CharacterReadWriteStream on: ''.
    self getArguments do: [:arg| stream nextPutAll: arg; space].
    stream isEmpty ifTrue: [^''].
    ^stream copyFrom: 1 to: stream size - 1! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'constants' !


multipleMatchWildcardCharacter ^<Character>

    ^$*!

singleMatchWildcardCharacter ^<Character>

    ^$?!

wordSize ^<Int>
    ^4! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'environment' !


environmentVariableAt: key <Str> ifAbsent: blk <[^X def]> ^ <Str | X>

    | cKey <CString> cValue <CString> |
    cKey := CString for: key.
    [cValue := {{<libc CString getenv> key: cKey}}.
    ^cValue isNull
    	ifTrue: [blk value]
    	ifFalse: [cValue asString]]
    	ensure: [cKey free]! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'initialization' !


initialize

    self DLLInitialize! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'os specific' !


currentThreadId
	"^ 0"
	^ {{ primitiveCurrentThreadId }}! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'os streams' !


errorStream ^<CharOutputStream>

    ErrorStream isNil
        ifTrue: [   ErrorStream := TempTranscript new ].
    ^ErrorStream! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'platform classes' !


pathClass ^<FilePath class>

    ^UnixFilePath!

patternClass ^<FilePattern class>

    ^UnixFilePattern! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'private' !


parseArgFrom: strm <CharInputStream>  ^<Str>

    ^strm peek = $"
        ifTrue: [       strm next.
                        strm upTo: $"   ]
        ifFalse: [  strm upTo: Character space ]!

skipSpacesIn: strm <CharInputStream>

    [ strm atEnd not and: [ strm peekFor: Character space] ] whileTrue.
! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'private-clipboard access' !


closeClipboard

    {{<user ExternalProxy CloseClipboard> call}}!

emptyClipboard

    {{<user ExternalProxy EmptyClipboard> call}} asBoolean
        ifFalse: [ Win32 handleError ].
!

openClipboard

    {{<user ExternalProxy OpenClipboard> hnd: Win32 NULL}} asBoolean
        ifFalse: [ Win32 handleError ].
! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'testing' !


usesCrLfConvention ^<Boolean>

    ^false! !

! (Delta mirrorFor: #UnixPlatform) classSide methodsFor: 'time' !


localSYSTEMTIME ^<SYSTEMTIME>

	| t tm |
	t := TimeT new allocate.
	[{{<libc ExternalProxy time> struct: t}} isAllOnes
		ifTrue: [self error: 'Invalid time'].
	tm := {{<libc TM gmtime>
					struct: t}}.
	^tm asSYSTEMTIME] ensure: [t free]
! !

