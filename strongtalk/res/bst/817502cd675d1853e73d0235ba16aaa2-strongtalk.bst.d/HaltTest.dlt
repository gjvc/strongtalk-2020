Delta define: #HaltTest as: (
(Class subclassOf: 'AbstractExceptionHandlingTest' instanceVariables: '')) !

(Delta mirrorFor: #HaltTest) revision: '$Revision:$'!

(Delta mirrorFor: #HaltTest) group: 'Unclassified'!

(Delta mirrorFor: #HaltTest)
comment: 
''!

! (Delta mirrorFor: #HaltTest) methodsFor: 'Testing' !


testDefaultActionShouldStopWithProcessHaltError

	| wasHandled processError |
	wasHandled := false.
	self withStopHandler: [:p| wasHandled := true.
											processError := p processError.
											p terminate]
			do: [[self halt] fork.
					Processor yield].
	self assert: wasHandled
			description: 'Halt should have been handled'.
	self assert: (processError isKindOf: ProcessHaltError)
			description: 'Wrong kind of error reported'!

testHaltShouldSignalHalt

	| wasSignalled |
	wasSignalled := false.
	[self halt]
		on: Halt
		do: [:ex| wasSignalled := true].
	self assert: wasSignalled!

testShouldBeResumable

	self assert: Halt new isResumable! !

